
Prova_Driverless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002070  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080021f8  080021f8  000121f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002248  08002248  00012248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800224c  0800224c  0001224c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000134  2000000c  0800225c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000140  0800225c  00020140  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000178d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bc7  00000000  00000000  00037910  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008ac2  00000000  00000000  0003a4d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad0  00000000  00000000  00042fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000e88  00000000  00000000  00043a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006852  00000000  00000000  000448f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000044de  00000000  00000000  0004b14a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004f628  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fe4  00000000  00000000  0004f6a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021e0 	.word	0x080021e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021e0 	.word	0x080021e0

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 fb0e 	bl	8000800 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 fac4 	bl	8000780 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 fa9d 	bl	800075c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fea8 	bl	8001f7c <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000038 	.word	0x20000038
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000038 	.word	0x20000038

08000258 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800025a:	6803      	ldr	r3, [r0, #0]
{
 800025c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800025e:	6898      	ldr	r0, [r3, #8]
 8000260:	f000 0003 	and.w	r0, r0, #3
 8000264:	2801      	cmp	r0, #1
 8000266:	d001      	beq.n	800026c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000268:	2000      	movs	r0, #0
 800026a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	07d2      	lsls	r2, r2, #31
 8000270:	d5fa      	bpl.n	8000268 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000272:	689a      	ldr	r2, [r3, #8]
 8000274:	f002 020d 	and.w	r2, r2, #13
 8000278:	2a01      	cmp	r2, #1
 800027a:	d11b      	bne.n	80002b4 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800027c:	689a      	ldr	r2, [r3, #8]
 800027e:	f042 0202 	orr.w	r2, r2, #2
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	2203      	movs	r2, #3
 8000286:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000288:	f7ff ffe0 	bl	800024c <HAL_GetTick>
 800028c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800028e:	6823      	ldr	r3, [r4, #0]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	07db      	lsls	r3, r3, #31
 8000294:	d5e8      	bpl.n	8000268 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000296:	f7ff ffd9 	bl	800024c <HAL_GetTick>
 800029a:	1b40      	subs	r0, r0, r5
 800029c:	2802      	cmp	r0, #2
 800029e:	d9f6      	bls.n	800028e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80002b0:	2001      	movs	r0, #1
 80002b2:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80002c4:	bd38      	pop	{r3, r4, r5, pc}
	...

080002c8 <HAL_ADC_Init>:
{
 80002c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80002ca:	2300      	movs	r3, #0
 80002cc:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 80002ce:	4604      	mov	r4, r0
 80002d0:	2800      	cmp	r0, #0
 80002d2:	f000 80cc 	beq.w	800046e <HAL_ADC_Init+0x1a6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80002d8:	06d2      	lsls	r2, r2, #27
 80002da:	f100 80b5 	bmi.w	8000448 <HAL_ADC_Init+0x180>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80002de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d07b      	beq.n	80003dc <HAL_ADC_Init+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002e4:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80002e6:	6823      	ldr	r3, [r4, #0]
 80002e8:	689a      	ldr	r2, [r3, #8]
 80002ea:	00d5      	lsls	r5, r2, #3
 80002ec:	d502      	bpl.n	80002f4 <HAL_ADC_Init+0x2c>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80002ee:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80002f0:	0099      	lsls	r1, r3, #2
 80002f2:	d50a      	bpl.n	800030a <HAL_ADC_Init+0x42>
      ADC_STATE_CLR_SET(hadc->State,
 80002f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002f6:	f023 0312 	bic.w	r3, r3, #18
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000300:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000308:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800030a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800030c:	06da      	lsls	r2, r3, #27
 800030e:	f100 80a8 	bmi.w	8000462 <HAL_ADC_Init+0x19a>
 8000312:	2800      	cmp	r0, #0
 8000314:	f040 80a5 	bne.w	8000462 <HAL_ADC_Init+0x19a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000318:	6822      	ldr	r2, [r4, #0]
 800031a:	6891      	ldr	r1, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 800031c:	f011 0104 	ands.w	r1, r1, #4
 8000320:	f040 809f 	bne.w	8000462 <HAL_ADC_Init+0x19a>
    ADC_STATE_CLR_SET(hadc->State,
 8000324:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000326:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6463      	str	r3, [r4, #68]	; 0x44
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000330:	6893      	ldr	r3, [r2, #8]
 8000332:	f003 0303 	and.w	r3, r3, #3
 8000336:	2b01      	cmp	r3, #1
 8000338:	f040 809b 	bne.w	8000472 <HAL_ADC_Init+0x1aa>
 800033c:	6813      	ldr	r3, [r2, #0]
 800033e:	07db      	lsls	r3, r3, #31
 8000340:	f140 8097 	bpl.w	8000472 <HAL_ADC_Init+0x1aa>
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000344:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000346:	68a6      	ldr	r6, [r4, #8]
 8000348:	69e5      	ldr	r5, [r4, #28]
 800034a:	2b01      	cmp	r3, #1
 800034c:	68e3      	ldr	r3, [r4, #12]
 800034e:	ea43 0306 	orr.w	r3, r3, r6
 8000352:	bf18      	it	ne
 8000354:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8000358:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
 800035c:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800035e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000360:	2901      	cmp	r1, #1
 8000362:	d107      	bne.n	8000374 <HAL_ADC_Init+0xac>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000364:	2d00      	cmp	r5, #0
 8000366:	d171      	bne.n	800044c <HAL_ADC_Init+0x184>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000368:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800036a:	3901      	subs	r1, #1
 800036c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8000370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000374:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000376:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000378:	bf1e      	ittt	ne
 800037a:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 800037c:	4329      	orrne	r1, r5
 800037e:	430b      	orrne	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000380:	6891      	ldr	r1, [r2, #8]
 8000382:	f011 0f0c 	tst.w	r1, #12
 8000386:	d10b      	bne.n	80003a0 <HAL_ADC_Init+0xd8>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000388:	68d1      	ldr	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800038a:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800038c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000390:	f021 0102 	bic.w	r1, r1, #2
 8000394:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000398:	0049      	lsls	r1, r1, #1
 800039a:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 800039e:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80003a0:	68d5      	ldr	r5, [r2, #12]
 80003a2:	4938      	ldr	r1, [pc, #224]	; (8000484 <HAL_ADC_Init+0x1bc>)
 80003a4:	4029      	ands	r1, r5
 80003a6:	430b      	orrs	r3, r1
 80003a8:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80003aa:	6923      	ldr	r3, [r4, #16]
 80003ac:	2b01      	cmp	r3, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80003ae:	bf05      	ittet	eq
 80003b0:	6b11      	ldreq	r1, [r2, #48]	; 0x30
 80003b2:	6a23      	ldreq	r3, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80003b4:	6b13      	ldrne	r3, [r2, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80003b6:	f103 33ff 	addeq.w	r3, r3, #4294967295
 80003ba:	bf06      	itte	eq
 80003bc:	f021 010f 	biceq.w	r1, r1, #15
 80003c0:	430b      	orreq	r3, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80003c2:	f023 030f 	bicne.w	r3, r3, #15
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80003c8:	2300      	movs	r3, #0
 80003ca:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80003cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ce:	f023 0303 	bic.w	r3, r3, #3
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6463      	str	r3, [r4, #68]	; 0x44
}
 80003d8:	b002      	add	sp, #8
 80003da:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80003dc:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80003de:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80003e0:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80003e2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80003e6:	f001 fde1 	bl	8001fac <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80003ea:	6823      	ldr	r3, [r4, #0]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	f53f af78 	bmi.w	80002e4 <HAL_ADC_Init+0x1c>
        tmp_hal_status = ADC_Disable(hadc);
 80003f4:	4620      	mov	r0, r4
 80003f6:	f7ff ff2f 	bl	8000258 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80003fc:	06d6      	lsls	r6, r2, #27
 80003fe:	f53f af72 	bmi.w	80002e6 <HAL_ADC_Init+0x1e>
 8000402:	2800      	cmp	r0, #0
 8000404:	f47f af6f 	bne.w	80002e6 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8000408:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800040a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800040e:	f023 0302 	bic.w	r3, r3, #2
 8000412:	f043 0302 	orr.w	r3, r3, #2
 8000416:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000418:	6823      	ldr	r3, [r4, #0]
 800041a:	689a      	ldr	r2, [r3, #8]
 800041c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000420:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000428:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <HAL_ADC_Init+0x1c0>)
 800042c:	4a17      	ldr	r2, [pc, #92]	; (800048c <HAL_ADC_Init+0x1c4>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	fbb3 f2f2 	udiv	r2, r3, r2
 8000434:	230a      	movs	r3, #10
 8000436:	4353      	muls	r3, r2
            wait_loop_index--;
 8000438:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800043a:	9b01      	ldr	r3, [sp, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	f43f af51 	beq.w	80002e4 <HAL_ADC_Init+0x1c>
            wait_loop_index--;
 8000442:	9b01      	ldr	r3, [sp, #4]
 8000444:	3b01      	subs	r3, #1
 8000446:	e7f7      	b.n	8000438 <HAL_ADC_Init+0x170>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000448:	4618      	mov	r0, r3
 800044a:	e75e      	b.n	800030a <HAL_ADC_Init+0x42>
        ADC_STATE_CLR_SET(hadc->State,
 800044c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800044e:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8000452:	f041 0120 	orr.w	r1, r1, #32
 8000456:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000458:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800045a:	f041 0101 	orr.w	r1, r1, #1
 800045e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000460:	e788      	b.n	8000374 <HAL_ADC_Init+0xac>
    ADC_STATE_CLR_SET(hadc->State,
 8000462:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000464:	f023 0312 	bic.w	r3, r3, #18
 8000468:	f043 0310 	orr.w	r3, r3, #16
 800046c:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800046e:	2001      	movs	r0, #1
 8000470:	e7b2      	b.n	80003d8 <HAL_ADC_Init+0x110>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000472:	4d07      	ldr	r5, [pc, #28]	; (8000490 <HAL_ADC_Init+0x1c8>)
 8000474:	6866      	ldr	r6, [r4, #4]
 8000476:	68ab      	ldr	r3, [r5, #8]
 8000478:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800047c:	4333      	orrs	r3, r6
 800047e:	60ab      	str	r3, [r5, #8]
 8000480:	e760      	b.n	8000344 <HAL_ADC_Init+0x7c>
 8000482:	bf00      	nop
 8000484:	fff0c007 	.word	0xfff0c007
 8000488:	20000008 	.word	0x20000008
 800048c:	000f4240 	.word	0x000f4240
 8000490:	50000300 	.word	0x50000300

08000494 <HAL_ADC_ConfigChannel>:
{
 8000494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000496:	2300      	movs	r3, #0
 8000498:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800049a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800049e:	2b01      	cmp	r3, #1
{
 80004a0:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80004a2:	f000 8139 	beq.w	8000718 <HAL_ADC_ConfigChannel+0x284>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004a6:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80004a8:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004aa:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80004ac:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004ae:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 80004b0:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80004b4:	f100 812b 	bmi.w	800070e <HAL_ADC_ConfigChannel+0x27a>
    if (sConfig->Rank < 5U)
 80004b8:	6848      	ldr	r0, [r1, #4]
 80004ba:	680c      	ldr	r4, [r1, #0]
 80004bc:	2804      	cmp	r0, #4
 80004be:	f04f 0206 	mov.w	r2, #6
 80004c2:	d831      	bhi.n	8000528 <HAL_ADC_ConfigChannel+0x94>
      MODIFY_REG(hadc->Instance->SQR1,
 80004c4:	4342      	muls	r2, r0
 80004c6:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80004c8:	201f      	movs	r0, #31
 80004ca:	4090      	lsls	r0, r2
 80004cc:	ea27 0000 	bic.w	r0, r7, r0
 80004d0:	fa04 f202 	lsl.w	r2, r4, r2
 80004d4:	4302      	orrs	r2, r0
 80004d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80004d8:	689a      	ldr	r2, [r3, #8]
 80004da:	f012 0f0c 	tst.w	r2, #12
 80004de:	d162      	bne.n	80005a6 <HAL_ADC_ConfigChannel+0x112>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80004e0:	2c09      	cmp	r4, #9
 80004e2:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80004e6:	688f      	ldr	r7, [r1, #8]
 80004e8:	d946      	bls.n	8000578 <HAL_ADC_ConfigChannel+0xe4>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004ea:	4422      	add	r2, r4
 80004ec:	6998      	ldr	r0, [r3, #24]
 80004ee:	3a1e      	subs	r2, #30
 80004f0:	f04f 0e07 	mov.w	lr, #7
 80004f4:	fa0e fe02 	lsl.w	lr, lr, r2
 80004f8:	ea20 000e 	bic.w	r0, r0, lr
 80004fc:	fa07 f202 	lsl.w	r2, r7, r2
 8000500:	4302      	orrs	r2, r0
 8000502:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000504:	68da      	ldr	r2, [r3, #12]
 8000506:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 800050a:	694a      	ldr	r2, [r1, #20]
 800050c:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000510:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000514:	690a      	ldr	r2, [r1, #16]
 8000516:	3a01      	subs	r2, #1
 8000518:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800051c:	2a03      	cmp	r2, #3
 800051e:	d873      	bhi.n	8000608 <HAL_ADC_ConfigChannel+0x174>
 8000520:	e8df f002 	tbb	[pc, r2]
 8000524:	675c5137 	.word	0x675c5137
    else if (sConfig->Rank < 10U)
 8000528:	2809      	cmp	r0, #9
 800052a:	d80b      	bhi.n	8000544 <HAL_ADC_ConfigChannel+0xb0>
      MODIFY_REG(hadc->Instance->SQR2,
 800052c:	4342      	muls	r2, r0
 800052e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000530:	3a1e      	subs	r2, #30
 8000532:	201f      	movs	r0, #31
 8000534:	4090      	lsls	r0, r2
 8000536:	ea27 0000 	bic.w	r0, r7, r0
 800053a:	fa04 f202 	lsl.w	r2, r4, r2
 800053e:	4302      	orrs	r2, r0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
 8000542:	e7c9      	b.n	80004d8 <HAL_ADC_ConfigChannel+0x44>
    else if (sConfig->Rank < 15U)
 8000544:	280e      	cmp	r0, #14
 8000546:	d80b      	bhi.n	8000560 <HAL_ADC_ConfigChannel+0xcc>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000548:	4342      	muls	r2, r0
 800054a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800054c:	3a3c      	subs	r2, #60	; 0x3c
 800054e:	201f      	movs	r0, #31
 8000550:	4090      	lsls	r0, r2
 8000552:	ea27 0000 	bic.w	r0, r7, r0
 8000556:	fa04 f202 	lsl.w	r2, r4, r2
 800055a:	4302      	orrs	r2, r0
 800055c:	639a      	str	r2, [r3, #56]	; 0x38
 800055e:	e7bb      	b.n	80004d8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000560:	4342      	muls	r2, r0
 8000562:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000564:	3a5a      	subs	r2, #90	; 0x5a
 8000566:	201f      	movs	r0, #31
 8000568:	4090      	lsls	r0, r2
 800056a:	ea27 0000 	bic.w	r0, r7, r0
 800056e:	fa04 f202 	lsl.w	r2, r4, r2
 8000572:	4302      	orrs	r2, r0
 8000574:	63da      	str	r2, [r3, #60]	; 0x3c
 8000576:	e7af      	b.n	80004d8 <HAL_ADC_ConfigChannel+0x44>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000578:	6958      	ldr	r0, [r3, #20]
 800057a:	4422      	add	r2, r4
 800057c:	f04f 0e07 	mov.w	lr, #7
 8000580:	fa0e fe02 	lsl.w	lr, lr, r2
 8000584:	ea20 000e 	bic.w	r0, r0, lr
 8000588:	fa07 f202 	lsl.w	r2, r7, r2
 800058c:	4302      	orrs	r2, r0
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	e7b8      	b.n	8000504 <HAL_ADC_ConfigChannel+0x70>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000592:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000594:	4f6d      	ldr	r7, [pc, #436]	; (800074c <HAL_ADC_ConfigChannel+0x2b8>)
 8000596:	4017      	ands	r7, r2
 8000598:	ea47 020c 	orr.w	r2, r7, ip
 800059c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80005a0:	ea42 020e 	orr.w	r2, r2, lr
 80005a4:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005a6:	689a      	ldr	r2, [r3, #8]
 80005a8:	f002 0203 	and.w	r2, r2, #3
 80005ac:	2a01      	cmp	r2, #1
 80005ae:	f040 80b5 	bne.w	800071c <HAL_ADC_ConfigChannel+0x288>
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	07d0      	lsls	r0, r2, #31
 80005b6:	f140 80b1 	bpl.w	800071c <HAL_ADC_ConfigChannel+0x288>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005ba:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80005bc:	2300      	movs	r3, #0
 80005be:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80005c2:	b003      	add	sp, #12
 80005c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80005c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80005c8:	4f60      	ldr	r7, [pc, #384]	; (800074c <HAL_ADC_ConfigChannel+0x2b8>)
 80005ca:	4017      	ands	r7, r2
 80005cc:	ea47 020c 	orr.w	r2, r7, ip
 80005d0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80005d4:	ea42 020e 	orr.w	r2, r2, lr
 80005d8:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80005da:	e7e4      	b.n	80005a6 <HAL_ADC_ConfigChannel+0x112>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80005dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80005de:	485b      	ldr	r0, [pc, #364]	; (800074c <HAL_ADC_ConfigChannel+0x2b8>)
 80005e0:	4010      	ands	r0, r2
 80005e2:	ea40 020c 	orr.w	r2, r0, ip
 80005e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80005ea:	ea42 020e 	orr.w	r2, r2, lr
 80005ee:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80005f0:	e7d9      	b.n	80005a6 <HAL_ADC_ConfigChannel+0x112>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80005f2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80005f4:	4a55      	ldr	r2, [pc, #340]	; (800074c <HAL_ADC_ConfigChannel+0x2b8>)
 80005f6:	4002      	ands	r2, r0
 80005f8:	ea42 020c 	orr.w	r2, r2, ip
 80005fc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000600:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000604:	66da      	str	r2, [r3, #108]	; 0x6c
 8000606:	e7ce      	b.n	80005a6 <HAL_ADC_ConfigChannel+0x112>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000608:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800060a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800060e:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000610:	bf02      	ittt	eq
 8000612:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000614:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000618:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800061a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800061c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000620:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000622:	bf02      	ittt	eq
 8000624:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000626:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800062a:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800062c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800062e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000632:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000634:	bf02      	ittt	eq
 8000636:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000638:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800063c:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800063e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000640:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000644:	4594      	cmp	ip, r2
 8000646:	d1ae      	bne.n	80005a6 <HAL_ADC_ConfigChannel+0x112>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000648:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800064a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800064e:	e7d9      	b.n	8000604 <HAL_ADC_ConfigChannel+0x170>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000650:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000654:	2101      	movs	r1, #1
 8000656:	40a1      	lsls	r1, r4
 8000658:	ea22 0201 	bic.w	r2, r2, r1
 800065c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000660:	2c10      	cmp	r4, #16
 8000662:	d131      	bne.n	80006c8 <HAL_ADC_ConfigChannel+0x234>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000664:	4a3a      	ldr	r2, [pc, #232]	; (8000750 <HAL_ADC_ConfigChannel+0x2bc>)
 8000666:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000668:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800066c:	d1a5      	bne.n	80005ba <HAL_ADC_ConfigChannel+0x126>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800066e:	6898      	ldr	r0, [r3, #8]
 8000670:	f000 0003 	and.w	r0, r0, #3
 8000674:	2801      	cmp	r0, #1
 8000676:	d102      	bne.n	800067e <HAL_ADC_ConfigChannel+0x1ea>
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	07d2      	lsls	r2, r2, #31
 800067c:	d447      	bmi.n	800070e <HAL_ADC_ConfigChannel+0x27a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800067e:	2c10      	cmp	r4, #16
 8000680:	d131      	bne.n	80006e6 <HAL_ADC_ConfigChannel+0x252>
 8000682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000686:	d198      	bne.n	80005ba <HAL_ADC_ConfigChannel+0x126>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000688:	4a31      	ldr	r2, [pc, #196]	; (8000750 <HAL_ADC_ConfigChannel+0x2bc>)
 800068a:	6893      	ldr	r3, [r2, #8]
 800068c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000690:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000692:	4b30      	ldr	r3, [pc, #192]	; (8000754 <HAL_ADC_ConfigChannel+0x2c0>)
 8000694:	4a30      	ldr	r2, [pc, #192]	; (8000758 <HAL_ADC_ConfigChannel+0x2c4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	fbb3 f2f2 	udiv	r2, r3, r2
 800069c:	230a      	movs	r3, #10
 800069e:	4353      	muls	r3, r2
            wait_loop_index--;
 80006a0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80006a2:	9b01      	ldr	r3, [sp, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d088      	beq.n	80005ba <HAL_ADC_ConfigChannel+0x126>
            wait_loop_index--;
 80006a8:	9b01      	ldr	r3, [sp, #4]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	e7f8      	b.n	80006a0 <HAL_ADC_ConfigChannel+0x20c>
        MODIFY_REG(hadc->Instance->SMPR1,
 80006ae:	1c60      	adds	r0, r4, #1
 80006b0:	6959      	ldr	r1, [r3, #20]
 80006b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80006b6:	2207      	movs	r2, #7
 80006b8:	4082      	lsls	r2, r0
 80006ba:	ea21 0102 	bic.w	r1, r1, r2
 80006be:	fa06 f200 	lsl.w	r2, r6, r0
 80006c2:	430a      	orrs	r2, r1
 80006c4:	615a      	str	r2, [r3, #20]
 80006c6:	e7cb      	b.n	8000660 <HAL_ADC_ConfigChannel+0x1cc>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80006c8:	2c11      	cmp	r4, #17
 80006ca:	d104      	bne.n	80006d6 <HAL_ADC_ConfigChannel+0x242>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80006cc:	4a20      	ldr	r2, [pc, #128]	; (8000750 <HAL_ADC_ConfigChannel+0x2bc>)
 80006ce:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80006d0:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80006d4:	e7ca      	b.n	800066c <HAL_ADC_ConfigChannel+0x1d8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80006d6:	2c12      	cmp	r4, #18
 80006d8:	f47f af6f 	bne.w	80005ba <HAL_ADC_ConfigChannel+0x126>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80006dc:	4a1c      	ldr	r2, [pc, #112]	; (8000750 <HAL_ADC_ConfigChannel+0x2bc>)
 80006de:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80006e0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80006e4:	e7c2      	b.n	800066c <HAL_ADC_ConfigChannel+0x1d8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80006e6:	2c11      	cmp	r4, #17
 80006e8:	d109      	bne.n	80006fe <HAL_ADC_ConfigChannel+0x26a>
 80006ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006ee:	f47f af64 	bne.w	80005ba <HAL_ADC_ConfigChannel+0x126>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80006f2:	4a17      	ldr	r2, [pc, #92]	; (8000750 <HAL_ADC_ConfigChannel+0x2bc>)
 80006f4:	6893      	ldr	r3, [r2, #8]
 80006f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80006fa:	6093      	str	r3, [r2, #8]
 80006fc:	e75d      	b.n	80005ba <HAL_ADC_ConfigChannel+0x126>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80006fe:	2c12      	cmp	r4, #18
 8000700:	f47f af5b 	bne.w	80005ba <HAL_ADC_ConfigChannel+0x126>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <HAL_ADC_ConfigChannel+0x2bc>)
 8000706:	6893      	ldr	r3, [r2, #8]
 8000708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800070c:	e7f5      	b.n	80006fa <HAL_ADC_ConfigChannel+0x266>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800070e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	646b      	str	r3, [r5, #68]	; 0x44
 8000716:	e751      	b.n	80005bc <HAL_ADC_ConfigChannel+0x128>
  __HAL_LOCK(hadc);
 8000718:	2002      	movs	r0, #2
 800071a:	e752      	b.n	80005c2 <HAL_ADC_ConfigChannel+0x12e>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800071c:	2e01      	cmp	r6, #1
 800071e:	d197      	bne.n	8000650 <HAL_ADC_ConfigChannel+0x1bc>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000720:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000724:	40a6      	lsls	r6, r4
 8000726:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000728:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800072a:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 800072e:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000730:	d9bd      	bls.n	80006ae <HAL_ADC_ConfigChannel+0x21a>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000732:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000736:	6999      	ldr	r1, [r3, #24]
 8000738:	3a1b      	subs	r2, #27
 800073a:	2007      	movs	r0, #7
 800073c:	4090      	lsls	r0, r2
 800073e:	ea21 0100 	bic.w	r1, r1, r0
 8000742:	fa06 f202 	lsl.w	r2, r6, r2
 8000746:	430a      	orrs	r2, r1
 8000748:	619a      	str	r2, [r3, #24]
 800074a:	e789      	b.n	8000660 <HAL_ADC_ConfigChannel+0x1cc>
 800074c:	83fff000 	.word	0x83fff000
 8000750:	50000300 	.word	0x50000300
 8000754:	20000008 	.word	0x20000008
 8000758:	000f4240 	.word	0x000f4240

0800075c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800075e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000760:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000764:	041b      	lsls	r3, r3, #16
 8000766:	0c1b      	lsrs	r3, r3, #16
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800076c:	0200      	lsls	r0, r0, #8
 800076e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000772:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000776:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000778:	60d3      	str	r3, [r2, #12]
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	68dc      	ldr	r4, [r3, #12]
 8000786:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800078a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	2b04      	cmp	r3, #4
 8000792:	bf28      	it	cs
 8000794:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000796:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	f04f 0501 	mov.w	r5, #1
 800079c:	fa05 f303 	lsl.w	r3, r5, r3
 80007a0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007a4:	bf8c      	ite	hi
 80007a6:	3c03      	subhi	r4, #3
 80007a8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007aa:	4019      	ands	r1, r3
 80007ac:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007ae:	fa05 f404 	lsl.w	r4, r5, r4
 80007b2:	3c01      	subs	r4, #1
 80007b4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80007b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	ea42 0201 	orr.w	r2, r2, r1
 80007bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c0:	bfaf      	iteee	ge
 80007c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c6:	f000 000f 	andlt.w	r0, r0, #15
 80007ca:	4b06      	ldrlt	r3, [pc, #24]	; (80007e4 <HAL_NVIC_SetPriority+0x64>)
 80007cc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ce:	bfa5      	ittet	ge
 80007d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80007d4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80007dc:	bd30      	pop	{r4, r5, pc}
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00
 80007e4:	e000ed14 	.word	0xe000ed14

080007e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80007e8:	0942      	lsrs	r2, r0, #5
 80007ea:	2301      	movs	r3, #1
 80007ec:	f000 001f 	and.w	r0, r0, #31
 80007f0:	fa03 f000 	lsl.w	r0, r3, r0
 80007f4:	4b01      	ldr	r3, [pc, #4]	; (80007fc <HAL_NVIC_EnableIRQ+0x14>)
 80007f6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80007fa:	4770      	bx	lr
 80007fc:	e000e100 	.word	0xe000e100

08000800 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000800:	3801      	subs	r0, #1
 8000802:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000806:	d20a      	bcs.n	800081e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080e:	21f0      	movs	r1, #240	; 0xf0
 8000810:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000814:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000816:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000818:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800081e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800082c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000830:	2a02      	cmp	r2, #2
{  
 8000832:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000834:	d003      	beq.n	800083e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000836:	2204      	movs	r2, #4
 8000838:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800083a:	2001      	movs	r0, #1
 800083c:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800083e:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000840:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000842:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000844:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000846:	f021 010e 	bic.w	r1, r1, #14
 800084a:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800084c:	6811      	ldr	r1, [r2, #0]
 800084e:	f021 0101 	bic.w	r1, r1, #1
 8000852:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000854:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800085e:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000860:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000864:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000868:	b113      	cbz	r3, 8000870 <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 800086a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800086c:	4620      	mov	r0, r4
 800086e:	bd10      	pop	{r4, pc}
 8000870:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000872:	bd10      	pop	{r4, pc}

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000878:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800087a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80009e4 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000880:	4a56      	ldr	r2, [pc, #344]	; (80009dc <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000882:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000884:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000888:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800088a:	9c01      	ldr	r4, [sp, #4]
 800088c:	40dc      	lsrs	r4, r3
 800088e:	d102      	bne.n	8000896 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000890:	b005      	add	sp, #20
 8000892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000896:	2401      	movs	r4, #1
 8000898:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 800089c:	9c01      	ldr	r4, [sp, #4]
 800089e:	ea14 050a 	ands.w	r5, r4, sl
 80008a2:	f000 8093 	beq.w	80009cc <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a6:	684c      	ldr	r4, [r1, #4]
 80008a8:	f024 0b10 	bic.w	fp, r4, #16
 80008ac:	f1bb 0f02 	cmp.w	fp, #2
 80008b0:	d111      	bne.n	80008d6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80008b2:	08df      	lsrs	r7, r3, #3
 80008b4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b8:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80008bc:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008c2:	fa09 fc0e 	lsl.w	ip, r9, lr
 80008c6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008ca:	690e      	ldr	r6, [r1, #16]
 80008cc:	fa06 f60e 	lsl.w	r6, r6, lr
 80008d0:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80008d4:	623e      	str	r6, [r7, #32]
 80008d6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008da:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80008dc:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008de:	fa07 f70c 	lsl.w	r7, r7, ip
 80008e2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008e4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008e8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ea:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ee:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008f2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80008fa:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fc:	d811      	bhi.n	8000922 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80008fe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000900:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000904:	68ce      	ldr	r6, [r1, #12]
 8000906:	fa06 fe0c 	lsl.w	lr, r6, ip
 800090a:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800090e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000910:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000912:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000916:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800091a:	409e      	lsls	r6, r3
 800091c:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000920:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000922:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000924:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000926:	688e      	ldr	r6, [r1, #8]
 8000928:	fa06 f60c 	lsl.w	r6, r6, ip
 800092c:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092e:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000930:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000932:	d54b      	bpl.n	80009cc <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000934:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000938:	f046 0601 	orr.w	r6, r6, #1
 800093c:	f8c8 6018 	str.w	r6, [r8, #24]
 8000940:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000944:	f023 0703 	bic.w	r7, r3, #3
 8000948:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800094c:	f006 0601 	and.w	r6, r6, #1
 8000950:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000954:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000956:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800095c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800095e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000962:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000966:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800096a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800096e:	d02f      	beq.n	80009d0 <HAL_GPIO_Init+0x15c>
 8000970:	4e1b      	ldr	r6, [pc, #108]	; (80009e0 <HAL_GPIO_Init+0x16c>)
 8000972:	42b0      	cmp	r0, r6
 8000974:	d02e      	beq.n	80009d4 <HAL_GPIO_Init+0x160>
 8000976:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800097a:	42b0      	cmp	r0, r6
 800097c:	d02c      	beq.n	80009d8 <HAL_GPIO_Init+0x164>
 800097e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000982:	42b0      	cmp	r0, r6
 8000984:	bf14      	ite	ne
 8000986:	2605      	movne	r6, #5
 8000988:	2603      	moveq	r6, #3
 800098a:	fa06 f60e 	lsl.w	r6, r6, lr
 800098e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000992:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000994:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000996:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000998:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800099c:	bf0c      	ite	eq
 800099e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009a0:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 80009a2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80009a4:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80009aa:	bf0c      	ite	eq
 80009ac:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009ae:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80009b0:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80009b2:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80009b8:	bf0c      	ite	eq
 80009ba:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009bc:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80009be:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80009c0:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80009c4:	bf54      	ite	pl
 80009c6:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80009c8:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80009ca:	60d6      	str	r6, [r2, #12]
    position++;
 80009cc:	3301      	adds	r3, #1
 80009ce:	e75c      	b.n	800088a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009d0:	2600      	movs	r6, #0
 80009d2:	e7da      	b.n	800098a <HAL_GPIO_Init+0x116>
 80009d4:	2601      	movs	r6, #1
 80009d6:	e7d8      	b.n	800098a <HAL_GPIO_Init+0x116>
 80009d8:	2602      	movs	r6, #2
 80009da:	e7d6      	b.n	800098a <HAL_GPIO_Init+0x116>
 80009dc:	40010400 	.word	0x40010400
 80009e0:	48000400 	.word	0x48000400
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009e8:	6903      	ldr	r3, [r0, #16]
 80009ea:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80009ec:	bf14      	ite	ne
 80009ee:	2001      	movne	r0, #1
 80009f0:	2000      	moveq	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009f4:	b10a      	cbz	r2, 80009fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009f6:	6181      	str	r1, [r0, #24]
 80009f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009fa:	6281      	str	r1, [r0, #40]	; 0x28
 80009fc:	4770      	bx	lr

080009fe <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009fe:	6943      	ldr	r3, [r0, #20]
 8000a00:	4059      	eors	r1, r3
 8000a02:	6141      	str	r1, [r0, #20]
 8000a04:	4770      	bx	lr
	...

08000a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a08:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	b918      	cbnz	r0, 8000a18 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000a10:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000a12:	b002      	add	sp, #8
 8000a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a18:	6803      	ldr	r3, [r0, #0]
 8000a1a:	07da      	lsls	r2, r3, #31
 8000a1c:	d411      	bmi.n	8000a42 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a1e:	682b      	ldr	r3, [r5, #0]
 8000a20:	079b      	lsls	r3, r3, #30
 8000a22:	f100 8085 	bmi.w	8000b30 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a26:	682b      	ldr	r3, [r5, #0]
 8000a28:	071c      	lsls	r4, r3, #28
 8000a2a:	f100 80f6 	bmi.w	8000c1a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a2e:	682b      	ldr	r3, [r5, #0]
 8000a30:	0758      	lsls	r0, r3, #29
 8000a32:	f100 813f 	bmi.w	8000cb4 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a36:	69ea      	ldr	r2, [r5, #28]
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	f040 81d6 	bne.w	8000dea <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000a3e:	2000      	movs	r0, #0
 8000a40:	e7e7      	b.n	8000a12 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a42:	4cba      	ldr	r4, [pc, #744]	; (8000d2c <HAL_RCC_OscConfig+0x324>)
 8000a44:	6863      	ldr	r3, [r4, #4]
 8000a46:	f003 030c 	and.w	r3, r3, #12
 8000a4a:	2b04      	cmp	r3, #4
 8000a4c:	d007      	beq.n	8000a5e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	f003 030c 	and.w	r3, r3, #12
 8000a54:	2b08      	cmp	r3, #8
 8000a56:	d116      	bne.n	8000a86 <HAL_RCC_OscConfig+0x7e>
 8000a58:	6863      	ldr	r3, [r4, #4]
 8000a5a:	03df      	lsls	r7, r3, #15
 8000a5c:	d513      	bpl.n	8000a86 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a5e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a62:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a66:	6821      	ldr	r1, [r4, #0]
 8000a68:	fa93 f3a3 	rbit	r3, r3
 8000a6c:	fab3 f383 	clz	r3, r3
 8000a70:	f003 031f 	and.w	r3, r3, #31
 8000a74:	2201      	movs	r2, #1
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	420b      	tst	r3, r1
 8000a7c:	d0cf      	beq.n	8000a1e <HAL_RCC_OscConfig+0x16>
 8000a7e:	686b      	ldr	r3, [r5, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1cc      	bne.n	8000a1e <HAL_RCC_OscConfig+0x16>
 8000a84:	e7c4      	b.n	8000a10 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a86:	686a      	ldr	r2, [r5, #4]
 8000a88:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000a8c:	d125      	bne.n	8000ada <HAL_RCC_OscConfig+0xd2>
 8000a8e:	6823      	ldr	r3, [r4, #0]
 8000a90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a94:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a98:	68a9      	ldr	r1, [r5, #8]
 8000a9a:	f023 030f 	bic.w	r3, r3, #15
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000aa2:	b352      	cbz	r2, 8000afa <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000aa4:	f7ff fbd2 	bl	800024c <HAL_GetTick>
 8000aa8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000aac:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aae:	2701      	movs	r7, #1
 8000ab0:	fa96 f3a6 	rbit	r3, r6
 8000ab4:	6822      	ldr	r2, [r4, #0]
 8000ab6:	fa96 f3a6 	rbit	r3, r6
 8000aba:	fab3 f383 	clz	r3, r3
 8000abe:	f003 031f 	and.w	r3, r3, #31
 8000ac2:	fa07 f303 	lsl.w	r3, r7, r3
 8000ac6:	4213      	tst	r3, r2
 8000ac8:	d1a9      	bne.n	8000a1e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aca:	f7ff fbbf 	bl	800024c <HAL_GetTick>
 8000ace:	eba0 0008 	sub.w	r0, r0, r8
 8000ad2:	2864      	cmp	r0, #100	; 0x64
 8000ad4:	d9ec      	bls.n	8000ab0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	e79b      	b.n	8000a12 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	b932      	cbnz	r2, 8000aec <HAL_RCC_OscConfig+0xe4>
 8000ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ae2:	6023      	str	r3, [r4, #0]
 8000ae4:	6823      	ldr	r3, [r4, #0]
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	e7d3      	b.n	8000a94 <HAL_RCC_OscConfig+0x8c>
 8000aec:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000af0:	d1f5      	bne.n	8000ade <HAL_RCC_OscConfig+0xd6>
 8000af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af6:	6023      	str	r3, [r4, #0]
 8000af8:	e7c9      	b.n	8000a8e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000afa:	f7ff fba7 	bl	800024c <HAL_GetTick>
 8000afe:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000b02:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b04:	2701      	movs	r7, #1
 8000b06:	fa96 f3a6 	rbit	r3, r6
 8000b0a:	6822      	ldr	r2, [r4, #0]
 8000b0c:	fa96 f3a6 	rbit	r3, r6
 8000b10:	fab3 f383 	clz	r3, r3
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	fa07 f303 	lsl.w	r3, r7, r3
 8000b1c:	4213      	tst	r3, r2
 8000b1e:	f43f af7e 	beq.w	8000a1e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b22:	f7ff fb93 	bl	800024c <HAL_GetTick>
 8000b26:	eba0 0008 	sub.w	r0, r0, r8
 8000b2a:	2864      	cmp	r0, #100	; 0x64
 8000b2c:	d9eb      	bls.n	8000b06 <HAL_RCC_OscConfig+0xfe>
 8000b2e:	e7d2      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b30:	4c7e      	ldr	r4, [pc, #504]	; (8000d2c <HAL_RCC_OscConfig+0x324>)
 8000b32:	6863      	ldr	r3, [r4, #4]
 8000b34:	f013 0f0c 	tst.w	r3, #12
 8000b38:	d007      	beq.n	8000b4a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b3a:	6863      	ldr	r3, [r4, #4]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d122      	bne.n	8000b8a <HAL_RCC_OscConfig+0x182>
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	03de      	lsls	r6, r3, #15
 8000b48:	d41f      	bmi.n	8000b8a <HAL_RCC_OscConfig+0x182>
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b50:	6821      	ldr	r1, [r4, #0]
 8000b52:	fa93 f3a3 	rbit	r3, r3
 8000b56:	fab3 f383 	clz	r3, r3
 8000b5a:	f003 031f 	and.w	r3, r3, #31
 8000b5e:	2201      	movs	r2, #1
 8000b60:	fa02 f303 	lsl.w	r3, r2, r3
 8000b64:	420b      	tst	r3, r1
 8000b66:	d003      	beq.n	8000b70 <HAL_RCC_OscConfig+0x168>
 8000b68:	692b      	ldr	r3, [r5, #16]
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	f47f af50 	bne.w	8000a10 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b70:	6821      	ldr	r1, [r4, #0]
 8000b72:	23f8      	movs	r3, #248	; 0xf8
 8000b74:	fa93 f3a3 	rbit	r3, r3
 8000b78:	fab3 f283 	clz	r2, r3
 8000b7c:	696b      	ldr	r3, [r5, #20]
 8000b7e:	4093      	lsls	r3, r2
 8000b80:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000b84:	4313      	orrs	r3, r2
 8000b86:	6023      	str	r3, [r4, #0]
 8000b88:	e74d      	b.n	8000a26 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b8a:	692a      	ldr	r2, [r5, #16]
 8000b8c:	2601      	movs	r6, #1
 8000b8e:	b30a      	cbz	r2, 8000bd4 <HAL_RCC_OscConfig+0x1cc>
 8000b90:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000b94:	fab3 f383 	clz	r3, r3
 8000b98:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b9c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	2702      	movs	r7, #2
 8000ba4:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000ba6:	f7ff fb51 	bl	800024c <HAL_GetTick>
 8000baa:	4680      	mov	r8, r0
 8000bac:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb0:	6822      	ldr	r2, [r4, #0]
 8000bb2:	fa97 f3a7 	rbit	r3, r7
 8000bb6:	fab3 f383 	clz	r3, r3
 8000bba:	f003 031f 	and.w	r3, r3, #31
 8000bbe:	fa06 f303 	lsl.w	r3, r6, r3
 8000bc2:	4213      	tst	r3, r2
 8000bc4:	d1d4      	bne.n	8000b70 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bc6:	f7ff fb41 	bl	800024c <HAL_GetTick>
 8000bca:	eba0 0008 	sub.w	r0, r0, r8
 8000bce:	2802      	cmp	r0, #2
 8000bd0:	d9ec      	bls.n	8000bac <HAL_RCC_OscConfig+0x1a4>
 8000bd2:	e780      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
 8000bd4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000bd8:	fab3 f383 	clz	r3, r3
 8000bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	2702      	movs	r7, #2
 8000be8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fb2f 	bl	800024c <HAL_GetTick>
 8000bee:	4680      	mov	r8, r0
 8000bf0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf4:	6822      	ldr	r2, [r4, #0]
 8000bf6:	fa97 f3a7 	rbit	r3, r7
 8000bfa:	fab3 f383 	clz	r3, r3
 8000bfe:	f003 031f 	and.w	r3, r3, #31
 8000c02:	fa06 f303 	lsl.w	r3, r6, r3
 8000c06:	4213      	tst	r3, r2
 8000c08:	f43f af0d 	beq.w	8000a26 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0c:	f7ff fb1e 	bl	800024c <HAL_GetTick>
 8000c10:	eba0 0008 	sub.w	r0, r0, r8
 8000c14:	2802      	cmp	r0, #2
 8000c16:	d9eb      	bls.n	8000bf0 <HAL_RCC_OscConfig+0x1e8>
 8000c18:	e75d      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c1a:	69aa      	ldr	r2, [r5, #24]
 8000c1c:	4e43      	ldr	r6, [pc, #268]	; (8000d2c <HAL_RCC_OscConfig+0x324>)
 8000c1e:	4944      	ldr	r1, [pc, #272]	; (8000d30 <HAL_RCC_OscConfig+0x328>)
 8000c20:	2401      	movs	r4, #1
 8000c22:	b31a      	cbz	r2, 8000c6c <HAL_RCC_OscConfig+0x264>
 8000c24:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000c28:	fab3 f383 	clz	r3, r3
 8000c2c:	440b      	add	r3, r1
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	2702      	movs	r7, #2
 8000c32:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000c34:	f7ff fb0a 	bl	800024c <HAL_GetTick>
 8000c38:	4680      	mov	r8, r0
 8000c3a:	fa97 f3a7 	rbit	r3, r7
 8000c3e:	fa97 f3a7 	rbit	r3, r7
 8000c42:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c46:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c48:	fa97 f3a7 	rbit	r3, r7
 8000c4c:	fab3 f383 	clz	r3, r3
 8000c50:	f003 031f 	and.w	r3, r3, #31
 8000c54:	fa04 f303 	lsl.w	r3, r4, r3
 8000c58:	4213      	tst	r3, r2
 8000c5a:	f47f aee8 	bne.w	8000a2e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c5e:	f7ff faf5 	bl	800024c <HAL_GetTick>
 8000c62:	eba0 0008 	sub.w	r0, r0, r8
 8000c66:	2802      	cmp	r0, #2
 8000c68:	d9e7      	bls.n	8000c3a <HAL_RCC_OscConfig+0x232>
 8000c6a:	e734      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
 8000c6c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	440b      	add	r3, r1
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	2702      	movs	r7, #2
 8000c7a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c7c:	f7ff fae6 	bl	800024c <HAL_GetTick>
 8000c80:	4680      	mov	r8, r0
 8000c82:	fa97 f3a7 	rbit	r3, r7
 8000c86:	fa97 f3a7 	rbit	r3, r7
 8000c8a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000c90:	fa97 f3a7 	rbit	r3, r7
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	f003 031f 	and.w	r3, r3, #31
 8000c9c:	fa04 f303 	lsl.w	r3, r4, r3
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	f43f aec4 	beq.w	8000a2e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fad1 	bl	800024c <HAL_GetTick>
 8000caa:	eba0 0008 	sub.w	r0, r0, r8
 8000cae:	2802      	cmp	r0, #2
 8000cb0:	d9e7      	bls.n	8000c82 <HAL_RCC_OscConfig+0x27a>
 8000cb2:	e710      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb4:	4c1d      	ldr	r4, [pc, #116]	; (8000d2c <HAL_RCC_OscConfig+0x324>)
 8000cb6:	69e3      	ldr	r3, [r4, #28]
 8000cb8:	00d9      	lsls	r1, r3, #3
 8000cba:	d434      	bmi.n	8000d26 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	69e3      	ldr	r3, [r4, #28]
 8000cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	61e3      	str	r3, [r4, #28]
 8000cc4:	69e3      	ldr	r3, [r4, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cce:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd0:	4f18      	ldr	r7, [pc, #96]	; (8000d34 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	05da      	lsls	r2, r3, #23
 8000cd6:	d52f      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd8:	68eb      	ldr	r3, [r5, #12]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d13d      	bne.n	8000d5a <HAL_RCC_OscConfig+0x352>
 8000cde:	6a23      	ldr	r3, [r4, #32]
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ce6:	f7ff fab1 	bl	800024c <HAL_GetTick>
 8000cea:	2702      	movs	r7, #2
 8000cec:	4682      	mov	sl, r0
 8000cee:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf0:	f04f 0801 	mov.w	r8, #1
 8000cf4:	fa97 f3a7 	rbit	r3, r7
 8000cf8:	fa97 f3a7 	rbit	r3, r7
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d06c      	beq.n	8000dda <HAL_RCC_OscConfig+0x3d2>
 8000d00:	6a22      	ldr	r2, [r4, #32]
 8000d02:	fa99 f3a9 	rbit	r3, r9
 8000d06:	fab3 f383 	clz	r3, r3
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	fa08 f303 	lsl.w	r3, r8, r3
 8000d12:	4213      	tst	r3, r2
 8000d14:	d058      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	f43f ae8d 	beq.w	8000a36 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d1c:	69e3      	ldr	r3, [r4, #28]
 8000d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d22:	61e3      	str	r3, [r4, #28]
 8000d24:	e687      	b.n	8000a36 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000d26:	2600      	movs	r6, #0
 8000d28:	e7d2      	b.n	8000cd0 <HAL_RCC_OscConfig+0x2c8>
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	10908120 	.word	0x10908120
 8000d34:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000d40:	f7ff fa84 	bl	800024c <HAL_GetTick>
 8000d44:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	d4c5      	bmi.n	8000cd8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d4c:	f7ff fa7e 	bl	800024c <HAL_GetTick>
 8000d50:	eba0 0008 	sub.w	r0, r0, r8
 8000d54:	2864      	cmp	r0, #100	; 0x64
 8000d56:	d9f6      	bls.n	8000d46 <HAL_RCC_OscConfig+0x33e>
 8000d58:	e6bd      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d5a:	bb3b      	cbnz	r3, 8000dac <HAL_RCC_OscConfig+0x3a4>
 8000d5c:	6a23      	ldr	r3, [r4, #32]
 8000d5e:	f023 0301 	bic.w	r3, r3, #1
 8000d62:	6223      	str	r3, [r4, #32]
 8000d64:	6a23      	ldr	r3, [r4, #32]
 8000d66:	f023 0304 	bic.w	r3, r3, #4
 8000d6a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fa6e 	bl	800024c <HAL_GetTick>
 8000d70:	2702      	movs	r7, #2
 8000d72:	4682      	mov	sl, r0
 8000d74:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d76:	f04f 0801 	mov.w	r8, #1
 8000d7a:	fa97 f3a7 	rbit	r3, r7
 8000d7e:	fa97 f3a7 	rbit	r3, r7
 8000d82:	b373      	cbz	r3, 8000de2 <HAL_RCC_OscConfig+0x3da>
 8000d84:	6a22      	ldr	r2, [r4, #32]
 8000d86:	fa99 f3a9 	rbit	r3, r9
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	fa08 f303 	lsl.w	r3, r8, r3
 8000d96:	4213      	tst	r3, r2
 8000d98:	d0bd      	beq.n	8000d16 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d9a:	f7ff fa57 	bl	800024c <HAL_GetTick>
 8000d9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000da2:	eba0 000a 	sub.w	r0, r0, sl
 8000da6:	4298      	cmp	r0, r3
 8000da8:	d9e7      	bls.n	8000d7a <HAL_RCC_OscConfig+0x372>
 8000daa:	e694      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dac:	2b05      	cmp	r3, #5
 8000dae:	6a23      	ldr	r3, [r4, #32]
 8000db0:	d103      	bne.n	8000dba <HAL_RCC_OscConfig+0x3b2>
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6223      	str	r3, [r4, #32]
 8000db8:	e791      	b.n	8000cde <HAL_RCC_OscConfig+0x2d6>
 8000dba:	f023 0301 	bic.w	r3, r3, #1
 8000dbe:	6223      	str	r3, [r4, #32]
 8000dc0:	6a23      	ldr	r3, [r4, #32]
 8000dc2:	f023 0304 	bic.w	r3, r3, #4
 8000dc6:	e78d      	b.n	8000ce4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fa40 	bl	800024c <HAL_GetTick>
 8000dcc:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dd0:	eba0 000a 	sub.w	r0, r0, sl
 8000dd4:	4298      	cmp	r0, r3
 8000dd6:	d98d      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x2ec>
 8000dd8:	e67d      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
 8000dda:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dde:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000de0:	e78f      	b.n	8000d02 <HAL_RCC_OscConfig+0x2fa>
 8000de2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000de6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000de8:	e7cd      	b.n	8000d86 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dea:	4c41      	ldr	r4, [pc, #260]	; (8000ef0 <HAL_RCC_OscConfig+0x4e8>)
 8000dec:	6863      	ldr	r3, [r4, #4]
 8000dee:	f003 030c 	and.w	r3, r3, #12
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	f43f ae0c 	beq.w	8000a10 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000df8:	2a02      	cmp	r2, #2
 8000dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dfe:	d152      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x49e>
 8000e00:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000e04:	fab3 f383 	clz	r3, r3
 8000e08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e16:	f7ff fa19 	bl	800024c <HAL_GetTick>
 8000e1a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000e1e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e20:	2601      	movs	r6, #1
 8000e22:	fa97 f3a7 	rbit	r3, r7
 8000e26:	6822      	ldr	r2, [r4, #0]
 8000e28:	fa97 f3a7 	rbit	r3, r7
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa06 f303 	lsl.w	r3, r6, r3
 8000e38:	4213      	tst	r3, r2
 8000e3a:	d12d      	bne.n	8000e98 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e3c:	6862      	ldr	r2, [r4, #4]
 8000e3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000e40:	6a29      	ldr	r1, [r5, #32]
 8000e42:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000e46:	430b      	orrs	r3, r1
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	6063      	str	r3, [r4, #4]
 8000e4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e50:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000e54:	fab3 f383 	clz	r3, r3
 8000e58:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e5c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000e66:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000e68:	f7ff f9f0 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e6c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000e6e:	4607      	mov	r7, r0
 8000e70:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e74:	6822      	ldr	r2, [r4, #0]
 8000e76:	fa95 f3a5 	rbit	r3, r5
 8000e7a:	fab3 f383 	clz	r3, r3
 8000e7e:	f003 031f 	and.w	r3, r3, #31
 8000e82:	fa06 f303 	lsl.w	r3, r6, r3
 8000e86:	4213      	tst	r3, r2
 8000e88:	f47f add9 	bne.w	8000a3e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8c:	f7ff f9de 	bl	800024c <HAL_GetTick>
 8000e90:	1bc0      	subs	r0, r0, r7
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9ec      	bls.n	8000e70 <HAL_RCC_OscConfig+0x468>
 8000e96:	e61e      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e98:	f7ff f9d8 	bl	800024c <HAL_GetTick>
 8000e9c:	eba0 0008 	sub.w	r0, r0, r8
 8000ea0:	2802      	cmp	r0, #2
 8000ea2:	d9be      	bls.n	8000e22 <HAL_RCC_OscConfig+0x41a>
 8000ea4:	e617      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
 8000ea6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ebc:	f7ff f9c6 	bl	800024c <HAL_GetTick>
 8000ec0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ec4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec6:	2601      	movs	r6, #1
 8000ec8:	fa95 f3a5 	rbit	r3, r5
 8000ecc:	6822      	ldr	r2, [r4, #0]
 8000ece:	fa95 f3a5 	rbit	r3, r5
 8000ed2:	fab3 f383 	clz	r3, r3
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	fa06 f303 	lsl.w	r3, r6, r3
 8000ede:	4213      	tst	r3, r2
 8000ee0:	f43f adad 	beq.w	8000a3e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee4:	f7ff f9b2 	bl	800024c <HAL_GetTick>
 8000ee8:	1bc0      	subs	r0, r0, r7
 8000eea:	2802      	cmp	r0, #2
 8000eec:	d9ec      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x4c0>
 8000eee:	e5f2      	b.n	8000ad6 <HAL_RCC_OscConfig+0xce>
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ef4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000ef6:	4c13      	ldr	r4, [pc, #76]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ef8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000efa:	f001 030c 	and.w	r3, r1, #12
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d11e      	bne.n	8000f40 <HAL_RCC_GetSysClockFreq+0x4c>
 8000f02:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000f06:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f0a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000f0e:	fab3 f383 	clz	r3, r3
 8000f12:	fa22 f303 	lsr.w	r3, r2, r3
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x54>)
 8000f18:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f1c:	220f      	movs	r2, #15
 8000f1e:	fa92 f2a2 	rbit	r2, r2
 8000f22:	fab2 f282 	clz	r2, r2
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	40d3      	lsrs	r3, r2
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x58>)
 8000f2e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000f30:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000f32:	bf4a      	itet	mi
 8000f34:	4b06      	ldrmi	r3, [pc, #24]	; (8000f50 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000f36:	4b07      	ldrpl	r3, [pc, #28]	; (8000f54 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000f38:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000f3c:	4358      	muls	r0, r3
 8000f3e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000f40:	4803      	ldr	r0, [pc, #12]	; (8000f50 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f42:	bd10      	pop	{r4, pc}
 8000f44:	40021000 	.word	0x40021000
 8000f48:	080021f8 	.word	0x080021f8
 8000f4c:	08002208 	.word	0x08002208
 8000f50:	007a1200 	.word	0x007a1200
 8000f54:	003d0900 	.word	0x003d0900

08000f58 <HAL_RCC_ClockConfig>:
{
 8000f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f5c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f5e:	4604      	mov	r4, r0
 8000f60:	b910      	cbnz	r0, 8000f68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000f62:	2001      	movs	r0, #1
 8000f64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_RCC_ClockConfig+0x144>)
 8000f6a:	6813      	ldr	r3, [r2, #0]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	428b      	cmp	r3, r1
 8000f72:	d32e      	bcc.n	8000fd2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f74:	6822      	ldr	r2, [r4, #0]
 8000f76:	0791      	lsls	r1, r2, #30
 8000f78:	d436      	bmi.n	8000fe8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f7a:	07d2      	lsls	r2, r2, #31
 8000f7c:	d43c      	bmi.n	8000ff8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f7e:	4a47      	ldr	r2, [pc, #284]	; (800109c <HAL_RCC_ClockConfig+0x144>)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	429d      	cmp	r5, r3
 8000f88:	d375      	bcc.n	8001076 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f8a:	6822      	ldr	r2, [r4, #0]
 8000f8c:	4d44      	ldr	r5, [pc, #272]	; (80010a0 <HAL_RCC_ClockConfig+0x148>)
 8000f8e:	f012 0f04 	tst.w	r2, #4
 8000f92:	d17c      	bne.n	800108e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f94:	0713      	lsls	r3, r2, #28
 8000f96:	d506      	bpl.n	8000fa6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f98:	686b      	ldr	r3, [r5, #4]
 8000f9a:	6922      	ldr	r2, [r4, #16]
 8000f9c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000fa0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000fa4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fa6:	f7ff ffa5 	bl	8000ef4 <HAL_RCC_GetSysClockFreq>
 8000faa:	686b      	ldr	r3, [r5, #4]
 8000fac:	22f0      	movs	r2, #240	; 0xf0
 8000fae:	fa92 f2a2 	rbit	r2, r2
 8000fb2:	fab2 f282 	clz	r2, r2
 8000fb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000fba:	40d3      	lsrs	r3, r2
 8000fbc:	4a39      	ldr	r2, [pc, #228]	; (80010a4 <HAL_RCC_ClockConfig+0x14c>)
 8000fbe:	5cd3      	ldrb	r3, [r2, r3]
 8000fc0:	40d8      	lsrs	r0, r3
 8000fc2:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <HAL_RCC_ClockConfig+0x150>)
 8000fc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f7ff f8fe 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000fcc:	2000      	movs	r0, #0
 8000fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fd2:	6813      	ldr	r3, [r2, #0]
 8000fd4:	f023 0307 	bic.w	r3, r3, #7
 8000fd8:	430b      	orrs	r3, r1
 8000fda:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fdc:	6813      	ldr	r3, [r2, #0]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	d1bd      	bne.n	8000f62 <HAL_RCC_ClockConfig+0xa>
 8000fe6:	e7c5      	b.n	8000f74 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fe8:	492d      	ldr	r1, [pc, #180]	; (80010a0 <HAL_RCC_ClockConfig+0x148>)
 8000fea:	68a0      	ldr	r0, [r4, #8]
 8000fec:	684b      	ldr	r3, [r1, #4]
 8000fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ff2:	4303      	orrs	r3, r0
 8000ff4:	604b      	str	r3, [r1, #4]
 8000ff6:	e7c0      	b.n	8000f7a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ff8:	6862      	ldr	r2, [r4, #4]
 8000ffa:	4e29      	ldr	r6, [pc, #164]	; (80010a0 <HAL_RCC_ClockConfig+0x148>)
 8000ffc:	2a01      	cmp	r2, #1
 8000ffe:	d127      	bne.n	8001050 <HAL_RCC_ClockConfig+0xf8>
 8001000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001004:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001008:	6831      	ldr	r1, [r6, #0]
 800100a:	fa93 f3a3 	rbit	r3, r3
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101c:	d0a1      	beq.n	8000f62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800101e:	6873      	ldr	r3, [r6, #4]
 8001020:	f023 0303 	bic.w	r3, r3, #3
 8001024:	431a      	orrs	r2, r3
 8001026:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8001028:	f7ff f910 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800102c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001030:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001032:	6873      	ldr	r3, [r6, #4]
 8001034:	6862      	ldr	r2, [r4, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800103e:	d09e      	beq.n	8000f7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001040:	f7ff f904 	bl	800024c <HAL_GetTick>
 8001044:	1bc0      	subs	r0, r0, r7
 8001046:	4540      	cmp	r0, r8
 8001048:	d9f3      	bls.n	8001032 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
}
 800104c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001050:	2a02      	cmp	r2, #2
 8001052:	bf0c      	ite	eq
 8001054:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001058:	2302      	movne	r3, #2
 800105a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105e:	6830      	ldr	r0, [r6, #0]
 8001060:	fa93 f3a3 	rbit	r3, r3
 8001064:	fab3 f383 	clz	r3, r3
 8001068:	f003 031f 	and.w	r3, r3, #31
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	4203      	tst	r3, r0
 8001074:	e7d2      	b.n	800101c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	f023 0307 	bic.w	r3, r3, #7
 800107c:	432b      	orrs	r3, r5
 800107e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001080:	6813      	ldr	r3, [r2, #0]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	429d      	cmp	r5, r3
 8001088:	f47f af6b 	bne.w	8000f62 <HAL_RCC_ClockConfig+0xa>
 800108c:	e77d      	b.n	8000f8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800108e:	686b      	ldr	r3, [r5, #4]
 8001090:	68e1      	ldr	r1, [r4, #12]
 8001092:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001096:	430b      	orrs	r3, r1
 8001098:	606b      	str	r3, [r5, #4]
 800109a:	e77b      	b.n	8000f94 <HAL_RCC_ClockConfig+0x3c>
 800109c:	40022000 	.word	0x40022000
 80010a0:	40021000 	.word	0x40021000
 80010a4:	0800222d 	.word	0x0800222d
 80010a8:	20000008 	.word	0x20000008

080010ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	fa92 f2a2 	rbit	r2, r2
 80010b8:	fab2 f282 	clz	r2, r2
 80010bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010c0:	40d3      	lsrs	r3, r2
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80010c4:	5cd3      	ldrb	r3, [r2, r3]
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80010c8:	6810      	ldr	r0, [r2, #0]
}    
 80010ca:	40d8      	lsrs	r0, r3
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000
 80010d4:	0800223d 	.word	0x0800223d
 80010d8:	20000008 	.word	0x20000008

080010dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80010dc:	4b08      	ldr	r3, [pc, #32]	; (8001100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	fa92 f2a2 	rbit	r2, r2
 80010e8:	fab2 f282 	clz	r2, r2
 80010ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80010f0:	40d3      	lsrs	r3, r2
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_RCC_GetPCLK2Freq+0x28>)
 80010f4:	5cd3      	ldrb	r3, [r2, r3]
 80010f6:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80010f8:	6810      	ldr	r0, [r2, #0]
} 
 80010fa:	40d8      	lsrs	r0, r3
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000
 8001104:	0800223d 	.word	0x0800223d
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800110c:	6803      	ldr	r3, [r0, #0]
{
 800110e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001112:	03dd      	lsls	r5, r3, #15
{
 8001114:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001116:	d522      	bpl.n	800115e <HAL_RCCEx_PeriphCLKConfig+0x52>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001118:	4d72      	ldr	r5, [pc, #456]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800111a:	69eb      	ldr	r3, [r5, #28]
 800111c:	00d8      	lsls	r0, r3, #3
 800111e:	f100 8085 	bmi.w	800122c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	69eb      	ldr	r3, [r5, #28]
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	61eb      	str	r3, [r5, #28]
 800112a:	69eb      	ldr	r3, [r5, #28]
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001134:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001136:	4f6c      	ldr	r7, [pc, #432]	; (80012e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	05d9      	lsls	r1, r3, #23
 800113c:	d578      	bpl.n	8001230 <HAL_RCCEx_PeriphCLKConfig+0x124>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800113e:	6a2b      	ldr	r3, [r5, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001140:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001144:	f040 8089 	bne.w	800125a <HAL_RCCEx_PeriphCLKConfig+0x14e>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001148:	6a2b      	ldr	r3, [r5, #32]
 800114a:	6862      	ldr	r2, [r4, #4]
 800114c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001150:	4313      	orrs	r3, r2
 8001152:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001154:	b11e      	cbz	r6, 800115e <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001156:	69eb      	ldr	r3, [r5, #28]
 8001158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800115c:	61eb      	str	r3, [r5, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800115e:	6820      	ldr	r0, [r4, #0]
 8001160:	07c5      	lsls	r5, r0, #31
 8001162:	d506      	bpl.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001164:	4a5f      	ldr	r2, [pc, #380]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001166:	68a1      	ldr	r1, [r4, #8]
 8001168:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800116a:	f023 0303 	bic.w	r3, r3, #3
 800116e:	430b      	orrs	r3, r1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001172:	0681      	lsls	r1, r0, #26
 8001174:	d506      	bpl.n	8001184 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001176:	4a5b      	ldr	r2, [pc, #364]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001178:	68e1      	ldr	r1, [r4, #12]
 800117a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800117c:	f023 0310 	bic.w	r3, r3, #16
 8001180:	430b      	orrs	r3, r1
 8001182:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001184:	0382      	lsls	r2, r0, #14
 8001186:	d506      	bpl.n	8001196 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001188:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800118a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800118c:	6853      	ldr	r3, [r2, #4]
 800118e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001192:	430b      	orrs	r3, r1
 8001194:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001196:	0643      	lsls	r3, r0, #25
 8001198:	d506      	bpl.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800119c:	6921      	ldr	r1, [r4, #16]
 800119e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011a0:	f023 0320 	bic.w	r3, r3, #32
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80011a8:	0407      	lsls	r7, r0, #16
 80011aa:	d506      	bpl.n	80011ba <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80011ac:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80011ae:	6961      	ldr	r1, [r4, #20]
 80011b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80011ba:	0586      	lsls	r6, r0, #22
 80011bc:	d506      	bpl.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011be:	4a49      	ldr	r2, [pc, #292]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80011c0:	69e1      	ldr	r1, [r4, #28]
 80011c2:	6853      	ldr	r3, [r2, #4]
 80011c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011c8:	430b      	orrs	r3, r1
 80011ca:	6053      	str	r3, [r2, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80011cc:	0605      	lsls	r5, r0, #24
 80011ce:	d506      	bpl.n	80011de <HAL_RCCEx_PeriphCLKConfig+0xd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80011d0:	4a44      	ldr	r2, [pc, #272]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80011d2:	69a1      	ldr	r1, [r4, #24]
 80011d4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80011d6:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80011da:	430b      	orrs	r3, r1
 80011dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80011de:	04c1      	lsls	r1, r0, #19
 80011e0:	d506      	bpl.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80011e2:	4a40      	ldr	r2, [pc, #256]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80011e4:	6a21      	ldr	r1, [r4, #32]
 80011e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80011f0:	0342      	lsls	r2, r0, #13
 80011f2:	d506      	bpl.n	8001202 <HAL_RCCEx_PeriphCLKConfig+0xf6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80011f4:	4a3b      	ldr	r2, [pc, #236]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80011f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011f8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80011fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011fe:	430b      	orrs	r3, r1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8001202:	0303      	lsls	r3, r0, #12
 8001204:	d506      	bpl.n	8001214 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8001206:	4a37      	ldr	r2, [pc, #220]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001208:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800120a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800120c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001210:	430b      	orrs	r3, r1
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8001214:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
 8001218:	d01c      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800121c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800121e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001220:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001224:	430b      	orrs	r3, r1
 8001226:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001228:	2000      	movs	r0, #0
 800122a:	e013      	b.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x148>
    FlagStatus       pwrclkchanged = RESET;
 800122c:	2600      	movs	r6, #0
 800122e:	e782      	b.n	8001136 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001238:	f7ff f808 	bl	800024c <HAL_GetTick>
 800123c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	05da      	lsls	r2, r3, #23
 8001242:	f53f af7c 	bmi.w	800113e <HAL_RCCEx_PeriphCLKConfig+0x32>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001246:	f7ff f801 	bl	800024c <HAL_GetTick>
 800124a:	eba0 0008 	sub.w	r0, r0, r8
 800124e:	2864      	cmp	r0, #100	; 0x64
 8001250:	d9f5      	bls.n	800123e <HAL_RCCEx_PeriphCLKConfig+0x132>
          return HAL_TIMEOUT;
 8001252:	2003      	movs	r0, #3
}
 8001254:	b002      	add	sp, #8
 8001256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800125a:	6862      	ldr	r2, [r4, #4]
 800125c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001260:	4293      	cmp	r3, r2
 8001262:	f43f af71 	beq.w	8001148 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001266:	6a29      	ldr	r1, [r5, #32]
 8001268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800126c:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001270:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001274:	f8df e074 	ldr.w	lr, [pc, #116]	; 80012ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 8001278:	fab2 f282 	clz	r2, r2
 800127c:	4472      	add	r2, lr
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	2701      	movs	r7, #1
 8001282:	6017      	str	r7, [r2, #0]
 8001284:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	4473      	add	r3, lr
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001294:	07cb      	lsls	r3, r1, #31
      RCC->BDCR = temp_reg;
 8001296:	6228      	str	r0, [r5, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001298:	f57f af56 	bpl.w	8001148 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        tickstart = HAL_GetTick();
 800129c:	f7fe ffd6 	bl	800024c <HAL_GetTick>
 80012a0:	f04f 0802 	mov.w	r8, #2
 80012a4:	4682      	mov	sl, r0
 80012a6:	46c1      	mov	r9, r8
 80012a8:	fa98 f3a8 	rbit	r3, r8
 80012ac:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b0:	b1a3      	cbz	r3, 80012dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
 80012b2:	6a2a      	ldr	r2, [r5, #32]
 80012b4:	fa99 f3a9 	rbit	r3, r9
 80012b8:	fab3 f383 	clz	r3, r3
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa07 f303 	lsl.w	r3, r7, r3
 80012c4:	4213      	tst	r3, r2
 80012c6:	f47f af3f 	bne.w	8001148 <HAL_RCCEx_PeriphCLKConfig+0x3c>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7fe ffbf 	bl	800024c <HAL_GetTick>
 80012ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d2:	eba0 000a 	sub.w	r0, r0, sl
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d9e6      	bls.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80012da:	e7ba      	b.n	8001252 <HAL_RCCEx_PeriphCLKConfig+0x146>
 80012dc:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80012e2:	e7e7      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40007000 	.word	0x40007000
 80012ec:	10908100 	.word	0x10908100

080012f0 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80012f0:	6803      	ldr	r3, [r0, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	f042 0201 	orr.w	r2, r2, #1
 8001300:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001302:	2000      	movs	r0, #0
 8001304:	4770      	bx	lr

08001306 <HAL_TIM_PeriodElapsedCallback>:
 8001306:	4770      	bx	lr

08001308 <HAL_TIM_OC_DelayElapsedCallback>:
 8001308:	4770      	bx	lr

0800130a <HAL_TIM_IC_CaptureCallback>:
 800130a:	4770      	bx	lr

0800130c <HAL_TIM_PWM_PulseFinishedCallback>:
 800130c:	4770      	bx	lr

0800130e <HAL_TIM_TriggerCallback>:
 800130e:	4770      	bx	lr

08001310 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001310:	6803      	ldr	r3, [r0, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	0791      	lsls	r1, r2, #30
{
 8001316:	b510      	push	{r4, lr}
 8001318:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800131a:	d50f      	bpl.n	800133c <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	0792      	lsls	r2, r2, #30
 8001320:	d50c      	bpl.n	800133c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001322:	f06f 0202 	mvn.w	r2, #2
 8001326:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001328:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800132a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800132c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800132e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001330:	f000 8085 	beq.w	800143e <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001334:	f7ff ffe9 	bl	800130a <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001338:	2300      	movs	r3, #0
 800133a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	691a      	ldr	r2, [r3, #16]
 8001340:	0752      	lsls	r2, r2, #29
 8001342:	d510      	bpl.n	8001366 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	0750      	lsls	r0, r2, #29
 8001348:	d50d      	bpl.n	8001366 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800134a:	f06f 0204 	mvn.w	r2, #4
 800134e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001350:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001352:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001354:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001358:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800135a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800135c:	d075      	beq.n	800144a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800135e:	f7ff ffd4 	bl	800130a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001362:	2300      	movs	r3, #0
 8001364:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001366:	6823      	ldr	r3, [r4, #0]
 8001368:	691a      	ldr	r2, [r3, #16]
 800136a:	0711      	lsls	r1, r2, #28
 800136c:	d50f      	bpl.n	800138e <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800136e:	68da      	ldr	r2, [r3, #12]
 8001370:	0712      	lsls	r2, r2, #28
 8001372:	d50c      	bpl.n	800138e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001374:	f06f 0208 	mvn.w	r2, #8
 8001378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800137a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800137c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800137e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001380:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001382:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001384:	d067      	beq.n	8001456 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001386:	f7ff ffc0 	bl	800130a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800138a:	2300      	movs	r3, #0
 800138c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	06d0      	lsls	r0, r2, #27
 8001394:	d510      	bpl.n	80013b8 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	06d1      	lsls	r1, r2, #27
 800139a:	d50d      	bpl.n	80013b8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800139c:	f06f 0210 	mvn.w	r2, #16
 80013a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013a2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013a4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013a6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013aa:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80013ac:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013ae:	d058      	beq.n	8001462 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80013b0:	f7ff ffab 	bl	800130a <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013b4:	2300      	movs	r3, #0
 80013b6:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80013b8:	6823      	ldr	r3, [r4, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	07d2      	lsls	r2, r2, #31
 80013be:	d508      	bpl.n	80013d2 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	07d0      	lsls	r0, r2, #31
 80013c4:	d505      	bpl.n	80013d2 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80013c6:	f06f 0201 	mvn.w	r2, #1
 80013ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013cc:	4620      	mov	r0, r4
 80013ce:	f7ff ff9a 	bl	8001306 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	0611      	lsls	r1, r2, #24
 80013d8:	d508      	bpl.n	80013ec <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	0612      	lsls	r2, r2, #24
 80013de:	d505      	bpl.n	80013ec <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80013e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80013e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 f981 	bl	80016ee <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80013ec:	6823      	ldr	r3, [r4, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	05d0      	lsls	r0, r2, #23
 80013f2:	d508      	bpl.n	8001406 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	0611      	lsls	r1, r2, #24
 80013f8:	d505      	bpl.n	8001406 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80013fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80013fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001400:	4620      	mov	r0, r4
 8001402:	f000 f975 	bl	80016f0 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	691a      	ldr	r2, [r3, #16]
 800140a:	0652      	lsls	r2, r2, #25
 800140c:	d508      	bpl.n	8001420 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	0650      	lsls	r0, r2, #25
 8001412:	d505      	bpl.n	8001420 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001418:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff ff77 	bl	800130e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	0691      	lsls	r1, r2, #26
 8001426:	d522      	bpl.n	800146e <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001428:	68da      	ldr	r2, [r3, #12]
 800142a:	0692      	lsls	r2, r2, #26
 800142c:	d51f      	bpl.n	800146e <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800142e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001432:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001434:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800143a:	f000 b957 	b.w	80016ec <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800143e:	f7ff ff63 	bl	8001308 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001442:	4620      	mov	r0, r4
 8001444:	f7ff ff62 	bl	800130c <HAL_TIM_PWM_PulseFinishedCallback>
 8001448:	e776      	b.n	8001338 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800144a:	f7ff ff5d 	bl	8001308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800144e:	4620      	mov	r0, r4
 8001450:	f7ff ff5c 	bl	800130c <HAL_TIM_PWM_PulseFinishedCallback>
 8001454:	e785      	b.n	8001362 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001456:	f7ff ff57 	bl	8001308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff ff56 	bl	800130c <HAL_TIM_PWM_PulseFinishedCallback>
 8001460:	e793      	b.n	800138a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001462:	f7ff ff51 	bl	8001308 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001466:	4620      	mov	r0, r4
 8001468:	f7ff ff50 	bl	800130c <HAL_TIM_PWM_PulseFinishedCallback>
 800146c:	e7a2      	b.n	80013b4 <HAL_TIM_IRQHandler+0xa4>
 800146e:	bd10      	pop	{r4, pc}

08001470 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001470:	4a1e      	ldr	r2, [pc, #120]	; (80014ec <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8001472:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001474:	4290      	cmp	r0, r2
{
 8001476:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001478:	d002      	beq.n	8001480 <TIM_Base_SetConfig+0x10>
 800147a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800147e:	d109      	bne.n	8001494 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001480:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001486:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001488:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800148c:	d00d      	beq.n	80014aa <TIM_Base_SetConfig+0x3a>
 800148e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001492:	d00a      	beq.n	80014aa <TIM_Base_SetConfig+0x3a>
 8001494:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <TIM_Base_SetConfig+0x80>)
 8001496:	4290      	cmp	r0, r2
 8001498:	d007      	beq.n	80014aa <TIM_Base_SetConfig+0x3a>
 800149a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800149e:	4290      	cmp	r0, r2
 80014a0:	d003      	beq.n	80014aa <TIM_Base_SetConfig+0x3a>
 80014a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014a6:	4290      	cmp	r0, r2
 80014a8:	d103      	bne.n	80014b2 <TIM_Base_SetConfig+0x42>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014aa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80014ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80014b0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80014b2:	694a      	ldr	r2, [r1, #20]
 80014b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014b8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80014ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80014bc:	688b      	ldr	r3, [r1, #8]
 80014be:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80014c0:	680b      	ldr	r3, [r1, #0]
 80014c2:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <TIM_Base_SetConfig+0x7c>)
 80014c6:	4298      	cmp	r0, r3
 80014c8:	d00b      	beq.n	80014e2 <TIM_Base_SetConfig+0x72>
 80014ca:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80014ce:	4298      	cmp	r0, r3
 80014d0:	d007      	beq.n	80014e2 <TIM_Base_SetConfig+0x72>
 80014d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d6:	4298      	cmp	r0, r3
 80014d8:	d003      	beq.n	80014e2 <TIM_Base_SetConfig+0x72>
 80014da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014de:	4298      	cmp	r0, r3
 80014e0:	d101      	bne.n	80014e6 <TIM_Base_SetConfig+0x76>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014e2:	690b      	ldr	r3, [r1, #16]
 80014e4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80014e6:	2301      	movs	r3, #1
 80014e8:	6143      	str	r3, [r0, #20]
 80014ea:	bd10      	pop	{r4, pc}
 80014ec:	40012c00 	.word	0x40012c00
 80014f0:	40014000 	.word	0x40014000

080014f4 <HAL_TIM_Base_Init>:
{ 
 80014f4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014f6:	4604      	mov	r4, r0
 80014f8:	b1a0      	cbz	r0, 8001524 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001502:	b91b      	cbnz	r3, 800150c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001504:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001508:	f000 fd7c 	bl	8002004 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800150c:	2302      	movs	r3, #2
 800150e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001512:	6820      	ldr	r0, [r4, #0]
 8001514:	1d21      	adds	r1, r4, #4
 8001516:	f7ff ffab 	bl	8001470 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800151a:	2301      	movs	r3, #1
 800151c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001520:	2000      	movs	r0, #0
 8001522:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
}
 8001526:	bd10      	pop	{r4, pc}

08001528 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001528:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800152a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800152c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800152e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001532:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001536:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001538:	6083      	str	r3, [r0, #8]
 800153a:	bd10      	pop	{r4, pc}

0800153c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800153c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001540:	2b01      	cmp	r3, #1
{
 8001542:	b570      	push	{r4, r5, r6, lr}
 8001544:	4604      	mov	r4, r0
 8001546:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800154a:	d01a      	beq.n	8001582 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800154c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001550:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001552:	2301      	movs	r3, #1
 8001554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001558:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <HAL_TIM_ConfigClockSource+0x168>)
 800155c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800155e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001560:	680b      	ldr	r3, [r1, #0]
 8001562:	2b40      	cmp	r3, #64	; 0x40
 8001564:	d075      	beq.n	8001652 <HAL_TIM_ConfigClockSource+0x116>
 8001566:	d818      	bhi.n	800159a <HAL_TIM_ConfigClockSource+0x5e>
 8001568:	2b10      	cmp	r3, #16
 800156a:	f000 808f 	beq.w	800168c <HAL_TIM_ConfigClockSource+0x150>
 800156e:	d809      	bhi.n	8001584 <HAL_TIM_ConfigClockSource+0x48>
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8085 	beq.w	8001680 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001576:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001578:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800157a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800157e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001582:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001584:	2b20      	cmp	r3, #32
 8001586:	f000 8087 	beq.w	8001698 <HAL_TIM_ConfigClockSource+0x15c>
 800158a:	2b30      	cmp	r3, #48	; 0x30
 800158c:	d1f3      	bne.n	8001576 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800158e:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001594:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001598:	e033      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800159a:	2b70      	cmp	r3, #112	; 0x70
 800159c:	d033      	beq.n	8001606 <HAL_TIM_ConfigClockSource+0xca>
 800159e:	d81b      	bhi.n	80015d8 <HAL_TIM_ConfigClockSource+0x9c>
 80015a0:	2b50      	cmp	r3, #80	; 0x50
 80015a2:	d03f      	beq.n	8001624 <HAL_TIM_ConfigClockSource+0xe8>
 80015a4:	2b60      	cmp	r3, #96	; 0x60
 80015a6:	d1e6      	bne.n	8001576 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80015a8:	684d      	ldr	r5, [r1, #4]
 80015aa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ac:	6a01      	ldr	r1, [r0, #32]
 80015ae:	f021 0110 	bic.w	r1, r1, #16
 80015b2:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015b4:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80015b6:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015b8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80015c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015c4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80015c8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80015ca:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80015cc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015d2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80015d6:	e014      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80015d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015dc:	d00c      	beq.n	80015f8 <HAL_TIM_ConfigClockSource+0xbc>
 80015de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015e2:	d1c8      	bne.n	8001576 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80015e4:	68cb      	ldr	r3, [r1, #12]
 80015e6:	684a      	ldr	r2, [r1, #4]
 80015e8:	6889      	ldr	r1, [r1, #8]
 80015ea:	f7ff ff9d 	bl	8001528 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	6893      	ldr	r3, [r2, #8]
 80015f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f6:	e013      	b.n	8001620 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80015f8:	6883      	ldr	r3, [r0, #8]
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001602:	6083      	str	r3, [r0, #8]
 8001604:	e7b7      	b.n	8001576 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001606:	68cb      	ldr	r3, [r1, #12]
 8001608:	684a      	ldr	r2, [r1, #4]
 800160a:	6889      	ldr	r1, [r1, #8]
 800160c:	f7ff ff8c 	bl	8001528 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001610:	6822      	ldr	r2, [r4, #0]
 8001612:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001614:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001618:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800161c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001620:	6093      	str	r3, [r2, #8]
    break;
 8001622:	e7a8      	b.n	8001576 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001624:	684a      	ldr	r2, [r1, #4]
 8001626:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001628:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800162a:	6a05      	ldr	r5, [r0, #32]
 800162c:	f025 0501 	bic.w	r5, r5, #1
 8001630:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001632:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001634:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001638:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800163c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001640:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001642:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001644:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001646:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800164c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001650:	e7d7      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001652:	684a      	ldr	r2, [r1, #4]
 8001654:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001656:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001658:	6a05      	ldr	r5, [r0, #32]
 800165a:	f025 0501 	bic.w	r5, r5, #1
 800165e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001660:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001662:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001666:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800166a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800166e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001670:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001672:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001674:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800167a:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800167e:	e7c0      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001680:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001686:	f043 0307 	orr.w	r3, r3, #7
 800168a:	e7ba      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800168c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800168e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001692:	f043 0317 	orr.w	r3, r3, #23
 8001696:	e7b4      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001698:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800169a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800169e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80016a2:	e7ae      	b.n	8001602 <HAL_TIM_ConfigClockSource+0xc6>
 80016a4:	fffe0088 	.word	0xfffe0088

080016a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80016a8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80016ac:	2b01      	cmp	r3, #1
{
 80016ae:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80016b0:	d018      	beq.n	80016e4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80016b2:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80016b4:	4d0c      	ldr	r5, [pc, #48]	; (80016e8 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 80016b6:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80016b8:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80016ba:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80016bc:	bf02      	ittt	eq
 80016be:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80016c0:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80016c4:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016c6:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016c8:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80016ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016ce:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80016d0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80016d4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80016d6:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80016d8:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80016da:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80016dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 80016e0:	4618      	mov	r0, r3
 80016e2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80016e4:	2002      	movs	r0, #2
} 
 80016e6:	bd30      	pop	{r4, r5, pc}
 80016e8:	40012c00 	.word	0x40012c00

080016ec <HAL_TIMEx_CommutationCallback>:
 80016ec:	4770      	bx	lr

080016ee <HAL_TIMEx_BreakCallback>:
 80016ee:	4770      	bx	lr

080016f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80016f0:	4770      	bx	lr

080016f2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016f2:	6803      	ldr	r3, [r0, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80016fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016fc:	689a      	ldr	r2, [r3, #8]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001704:	2320      	movs	r3, #32
 8001706:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 800170a:	4770      	bx	lr

0800170c <HAL_UART_TxCpltCallback>:
 800170c:	4770      	bx	lr

0800170e <HAL_UART_RxCpltCallback>:
 800170e:	4770      	bx	lr

08001710 <HAL_UART_ErrorCallback>:
 8001710:	4770      	bx	lr

08001712 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001712:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001714:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800171c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8001720:	f7ff fff6 	bl	8001710 <HAL_UART_ErrorCallback>
 8001724:	bd08      	pop	{r3, pc}
	...

08001728 <UART_SetConfig>:
{
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800172c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800172e:	6921      	ldr	r1, [r4, #16]
 8001730:	68a3      	ldr	r3, [r4, #8]
 8001732:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001734:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001736:	430b      	orrs	r3, r1
 8001738:	6961      	ldr	r1, [r4, #20]
 800173a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800173c:	4949      	ldr	r1, [pc, #292]	; (8001864 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800173e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001740:	4001      	ands	r1, r0
 8001742:	430b      	orrs	r3, r1
 8001744:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001746:	686b      	ldr	r3, [r5, #4]
 8001748:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800174a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800174c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001750:	430b      	orrs	r3, r1
 8001752:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001754:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001756:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001758:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800175c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800175e:	430b      	orrs	r3, r1
 8001760:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <UART_SetConfig+0x140>)
 8001764:	429d      	cmp	r5, r3
 8001766:	d112      	bne.n	800178e <UART_SetConfig+0x66>
 8001768:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800176c:	493f      	ldr	r1, [pc, #252]	; (800186c <UART_SetConfig+0x144>)
 800176e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001770:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001774:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	d13b      	bne.n	80017f4 <UART_SetConfig+0xcc>
    switch (clocksource)
 800177c:	2b08      	cmp	r3, #8
 800177e:	d836      	bhi.n	80017ee <UART_SetConfig+0xc6>
 8001780:	e8df f003 	tbb	[pc, r3]
 8001784:	3524210f 	.word	0x3524210f
 8001788:	3535352d 	.word	0x3535352d
 800178c:	30          	.byte	0x30
 800178d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800178e:	4b38      	ldr	r3, [pc, #224]	; (8001870 <UART_SetConfig+0x148>)
 8001790:	429d      	cmp	r5, r3
 8001792:	d003      	beq.n	800179c <UART_SetConfig+0x74>
 8001794:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001798:	429d      	cmp	r5, r3
 800179a:	d15e      	bne.n	800185a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800179c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80017a0:	d131      	bne.n	8001806 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80017a2:	f7ff fc83 	bl	80010ac <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017a6:	6861      	ldr	r1, [r4, #4]
 80017a8:	084a      	lsrs	r2, r1, #1
 80017aa:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80017b4:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80017b6:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 80017ba:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80017bc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
 80017c4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80017c6:	f7ff fc89 	bl	80010dc <HAL_RCC_GetPCLK2Freq>
 80017ca:	e7ec      	b.n	80017a6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80017cc:	6860      	ldr	r0, [r4, #4]
 80017ce:	0843      	lsrs	r3, r0, #1
 80017d0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80017d4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017d8:	fbb3 f3f0 	udiv	r3, r3, r0
 80017dc:	e7e9      	b.n	80017b2 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80017de:	f7ff fb89 	bl	8000ef4 <HAL_RCC_GetSysClockFreq>
 80017e2:	e7e0      	b.n	80017a6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80017e4:	6860      	ldr	r0, [r4, #4]
 80017e6:	0843      	lsrs	r3, r0, #1
 80017e8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80017ec:	e7f4      	b.n	80017d8 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e7e0      	b.n	80017b6 <UART_SetConfig+0x8e>
    switch (clocksource)
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d833      	bhi.n	8001860 <UART_SetConfig+0x138>
 80017f8:	e8df f003 	tbb	[pc, r3]
 80017fc:	321b1005 	.word	0x321b1005
 8001800:	32323227 	.word	0x32323227
 8001804:	2a          	.byte	0x2a
 8001805:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001806:	f7ff fc51 	bl	80010ac <HAL_RCC_GetPCLK1Freq>
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001810:	fbb0 f0f3 	udiv	r0, r0, r3
 8001814:	b280      	uxth	r0, r0
 8001816:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001818:	2000      	movs	r0, #0
        break;
 800181a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800181c:	f7ff fc5e 	bl	80010dc <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001820:	6863      	ldr	r3, [r4, #4]
 8001822:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001826:	fbb0 f0f3 	udiv	r0, r0, r3
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <UART_SetConfig+0x140>)
 800182c:	b280      	uxth	r0, r0
 800182e:	60d8      	str	r0, [r3, #12]
 8001830:	e7f2      	b.n	8001818 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001832:	6862      	ldr	r2, [r4, #4]
 8001834:	0853      	lsrs	r3, r2, #1
 8001836:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800183a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800183e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <UART_SetConfig+0x140>)
 8001844:	b29b      	uxth	r3, r3
 8001846:	60d3      	str	r3, [r2, #12]
 8001848:	e7e6      	b.n	8001818 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800184a:	f7ff fb53 	bl	8000ef4 <HAL_RCC_GetSysClockFreq>
 800184e:	e7e7      	b.n	8001820 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001850:	6862      	ldr	r2, [r4, #4]
 8001852:	0853      	lsrs	r3, r2, #1
 8001854:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001858:	e7f1      	b.n	800183e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800185a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800185e:	d0c6      	beq.n	80017ee <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001860:	2001      	movs	r0, #1
  return ret;
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	efff69f3 	.word	0xefff69f3
 8001868:	40013800 	.word	0x40013800
 800186c:	08002218 	.word	0x08002218
 8001870:	40004400 	.word	0x40004400

08001874 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001874:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001876:	07da      	lsls	r2, r3, #31
{
 8001878:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800187a:	d506      	bpl.n	800188a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800187c:	6801      	ldr	r1, [r0, #0]
 800187e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001880:	684a      	ldr	r2, [r1, #4]
 8001882:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001886:	4322      	orrs	r2, r4
 8001888:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800188a:	079c      	lsls	r4, r3, #30
 800188c:	d506      	bpl.n	800189c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800188e:	6801      	ldr	r1, [r0, #0]
 8001890:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001892:	684a      	ldr	r2, [r1, #4]
 8001894:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001898:	4322      	orrs	r2, r4
 800189a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800189c:	0759      	lsls	r1, r3, #29
 800189e:	d506      	bpl.n	80018ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80018a0:	6801      	ldr	r1, [r0, #0]
 80018a2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80018a4:	684a      	ldr	r2, [r1, #4]
 80018a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018aa:	4322      	orrs	r2, r4
 80018ac:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018ae:	071a      	lsls	r2, r3, #28
 80018b0:	d506      	bpl.n	80018c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018b2:	6801      	ldr	r1, [r0, #0]
 80018b4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80018b6:	684a      	ldr	r2, [r1, #4]
 80018b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018bc:	4322      	orrs	r2, r4
 80018be:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80018c0:	06dc      	lsls	r4, r3, #27
 80018c2:	d506      	bpl.n	80018d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80018c4:	6801      	ldr	r1, [r0, #0]
 80018c6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80018c8:	688a      	ldr	r2, [r1, #8]
 80018ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018ce:	4322      	orrs	r2, r4
 80018d0:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80018d2:	0699      	lsls	r1, r3, #26
 80018d4:	d506      	bpl.n	80018e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80018d6:	6801      	ldr	r1, [r0, #0]
 80018d8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80018da:	688a      	ldr	r2, [r1, #8]
 80018dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018e0:	4322      	orrs	r2, r4
 80018e2:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80018e4:	065a      	lsls	r2, r3, #25
 80018e6:	d50f      	bpl.n	8001908 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018e8:	6801      	ldr	r1, [r0, #0]
 80018ea:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80018ec:	684a      	ldr	r2, [r1, #4]
 80018ee:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80018f2:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80018f8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80018fa:	d105      	bne.n	8001908 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80018fc:	684a      	ldr	r2, [r1, #4]
 80018fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001900:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001904:	4322      	orrs	r2, r4
 8001906:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	d506      	bpl.n	800191a <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800190c:	6802      	ldr	r2, [r0, #0]
 800190e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001910:	6853      	ldr	r3, [r2, #4]
 8001912:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001916:	430b      	orrs	r3, r1
 8001918:	6053      	str	r3, [r2, #4]
 800191a:	bd10      	pop	{r4, pc}

0800191c <UART_WaitOnFlagUntilTimeout>:
{
 800191c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001920:	9d06      	ldr	r5, [sp, #24]
 8001922:	4604      	mov	r4, r0
 8001924:	460f      	mov	r7, r1
 8001926:	4616      	mov	r6, r2
 8001928:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800192a:	6821      	ldr	r1, [r4, #0]
 800192c:	69ca      	ldr	r2, [r1, #28]
 800192e:	ea37 0302 	bics.w	r3, r7, r2
 8001932:	bf0c      	ite	eq
 8001934:	2201      	moveq	r2, #1
 8001936:	2200      	movne	r2, #0
 8001938:	42b2      	cmp	r2, r6
 800193a:	d002      	beq.n	8001942 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800193c:	2000      	movs	r0, #0
}
 800193e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001942:	1c6b      	adds	r3, r5, #1
 8001944:	d0f2      	beq.n	800192c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001946:	b99d      	cbnz	r5, 8001970 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001948:	6823      	ldr	r3, [r4, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001950:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800195a:	2320      	movs	r3, #32
 800195c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001960:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001964:	2300      	movs	r3, #0
 8001966:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800196a:	2003      	movs	r0, #3
 800196c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001970:	f7fe fc6c 	bl	800024c <HAL_GetTick>
 8001974:	eba0 0008 	sub.w	r0, r0, r8
 8001978:	4285      	cmp	r5, r0
 800197a:	d2d6      	bcs.n	800192a <UART_WaitOnFlagUntilTimeout+0xe>
 800197c:	e7e4      	b.n	8001948 <UART_WaitOnFlagUntilTimeout+0x2c>

0800197e <HAL_UART_Transmit>:
{
 800197e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001982:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001984:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001988:	2b20      	cmp	r3, #32
{
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001990:	d14c      	bne.n	8001a2c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001992:	2900      	cmp	r1, #0
 8001994:	d048      	beq.n	8001a28 <HAL_UART_Transmit+0xaa>
 8001996:	2a00      	cmp	r2, #0
 8001998:	d046      	beq.n	8001a28 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800199a:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d044      	beq.n	8001a2c <HAL_UART_Transmit+0xae>
 80019a2:	2301      	movs	r3, #1
 80019a4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019ac:	2321      	movs	r3, #33	; 0x21
 80019ae:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80019b2:	f7fe fc4b 	bl	800024c <HAL_GetTick>
    huart->TxXferSize = Size;
 80019b6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80019ba:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80019bc:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80019c0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80019c4:	b292      	uxth	r2, r2
 80019c6:	b962      	cbnz	r2, 80019e2 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019c8:	9700      	str	r7, [sp, #0]
 80019ca:	4633      	mov	r3, r6
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff ffa4 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 80019d4:	b998      	cbnz	r0, 80019fe <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80019d6:	2320      	movs	r3, #32
 80019d8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80019dc:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80019e0:	e00e      	b.n	8001a00 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80019e2:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019e6:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019f0:	2200      	movs	r2, #0
 80019f2:	4633      	mov	r3, r6
 80019f4:	2180      	movs	r1, #128	; 0x80
 80019f6:	4620      	mov	r0, r4
 80019f8:	f7ff ff90 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 80019fc:	b118      	cbz	r0, 8001a06 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80019fe:	2003      	movs	r0, #3
}
 8001a00:	b002      	add	sp, #8
 8001a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a06:	68a3      	ldr	r3, [r4, #8]
 8001a08:	6822      	ldr	r2, [r4, #0]
 8001a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0e:	d107      	bne.n	8001a20 <HAL_UART_Transmit+0xa2>
 8001a10:	6923      	ldr	r3, [r4, #16]
 8001a12:	b92b      	cbnz	r3, 8001a20 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001a14:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a1c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8001a1e:	e7cf      	b.n	80019c0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001a20:	782b      	ldrb	r3, [r5, #0]
 8001a22:	8513      	strh	r3, [r2, #40]	; 0x28
 8001a24:	3501      	adds	r5, #1
 8001a26:	e7cb      	b.n	80019c0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001a28:	2001      	movs	r0, #1
 8001a2a:	e7e9      	b.n	8001a00 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	e7e7      	b.n	8001a00 <HAL_UART_Transmit+0x82>

08001a30 <UART_CheckIdleState>:
{
 8001a30:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a32:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a34:	2600      	movs	r6, #0
 8001a36:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001a38:	f7fe fc08 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001a42:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a44:	d417      	bmi.n	8001a76 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	075b      	lsls	r3, r3, #29
 8001a4c:	d50a      	bpl.n	8001a64 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2200      	movs	r2, #0
 8001a56:	462b      	mov	r3, r5
 8001a58:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	f7ff ff5d 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 8001a62:	b9a0      	cbnz	r0, 8001a8e <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001a64:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001a66:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001a68:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001a6c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001a70:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001a74:	e00c      	b.n	8001a90 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	4632      	mov	r2, r6
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff ff49 	bl	800191c <UART_WaitOnFlagUntilTimeout>
 8001a8a:	2800      	cmp	r0, #0
 8001a8c:	d0db      	beq.n	8001a46 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001a8e:	2003      	movs	r0, #3
}
 8001a90:	b002      	add	sp, #8
 8001a92:	bd70      	pop	{r4, r5, r6, pc}

08001a94 <HAL_UART_Init>:
{
 8001a94:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a96:	4604      	mov	r4, r0
 8001a98:	b360      	cbz	r0, 8001af4 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a9a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001a9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001aa2:	b91b      	cbnz	r3, 8001aac <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001aa4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001aa8:	f000 fac0 	bl	800202c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001aac:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001aae:	2324      	movs	r3, #36	; 0x24
 8001ab0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001ab4:	6813      	ldr	r3, [r2, #0]
 8001ab6:	f023 0301 	bic.w	r3, r3, #1
 8001aba:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001abc:	4620      	mov	r0, r4
 8001abe:	f7ff fe33 	bl	8001728 <UART_SetConfig>
 8001ac2:	2801      	cmp	r0, #1
 8001ac4:	d016      	beq.n	8001af4 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ac8:	b113      	cbz	r3, 8001ad0 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001aca:	4620      	mov	r0, r4
 8001acc:	f7ff fed2 	bl	8001874 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001ae8:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001aea:	601a      	str	r2, [r3, #0]
}
 8001aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001af0:	f7ff bf9e 	b.w	8001a30 <UART_CheckIdleState>
}
 8001af4:	2001      	movs	r0, #1
 8001af6:	bd10      	pop	{r4, pc}

08001af8 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001af8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001afc:	2b21      	cmp	r3, #33	; 0x21
 8001afe:	d127      	bne.n	8001b50 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8001b00:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001b04:	6802      	ldr	r2, [r0, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	b94b      	cbnz	r3, 8001b1e <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001b0a:	6811      	ldr	r1, [r2, #0]
 8001b0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8001b10:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b12:	6811      	ldr	r1, [r2, #0]
 8001b14:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001b18:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b1e:	6883      	ldr	r3, [r0, #8]
 8001b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b24:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001b26:	d10e      	bne.n	8001b46 <UART_Transmit_IT+0x4e>
 8001b28:	6901      	ldr	r1, [r0, #16]
 8001b2a:	b961      	cbnz	r1, 8001b46 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001b2c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001b30:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001b34:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001b36:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001b38:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001b44:	e7e9      	b.n	8001b1a <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	8513      	strh	r3, [r2, #40]	; 0x28
 8001b4e:	e7f3      	b.n	8001b38 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001b50:	2002      	movs	r0, #2
  }
}
 8001b52:	4770      	bx	lr

08001b54 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b54:	6801      	ldr	r1, [r0, #0]
{
 8001b56:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001b58:	680b      	ldr	r3, [r1, #0]
 8001b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b5e:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001b60:	2320      	movs	r3, #32
 8001b62:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001b66:	f7ff fdd1 	bl	800170c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	bd08      	pop	{r3, pc}

08001b6e <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b6e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001b72:	2b22      	cmp	r3, #34	; 0x22
{
 8001b74:	b510      	push	{r4, lr}
 8001b76:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001b78:	d129      	bne.n	8001bce <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001b7a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b7c:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8001b7e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b86:	ea02 0201 	and.w	r2, r2, r1
 8001b8a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001b8c:	d11b      	bne.n	8001bc6 <UART_Receive_IT+0x58>
 8001b8e:	6901      	ldr	r1, [r0, #16]
 8001b90:	b9c9      	cbnz	r1, 8001bc6 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8001b92:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8001b96:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001b98:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001b9c:	3c01      	subs	r4, #1
 8001b9e:	b2a4      	uxth	r4, r4
 8001ba0:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001ba4:	b96c      	cbnz	r4, 8001bc2 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001bae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	f022 0201 	bic.w	r2, r2, #1
 8001bb6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001bb8:	2320      	movs	r3, #32
 8001bba:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8001bbe:	f7ff fda6 	bl	800170e <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001bc4:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001bc6:	1c59      	adds	r1, r3, #1
 8001bc8:	6541      	str	r1, [r0, #84]	; 0x54
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	e7e4      	b.n	8001b98 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	f042 0208 	orr.w	r2, r2, #8
 8001bd4:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	bd10      	pop	{r4, pc}
	...

08001bdc <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001be0:	6811      	ldr	r1, [r2, #0]
{
 8001be2:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001be4:	f013 050f 	ands.w	r5, r3, #15
{
 8001be8:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001bea:	d107      	bne.n	8001bfc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001bec:	069e      	lsls	r6, r3, #26
 8001bee:	d505      	bpl.n	8001bfc <HAL_UART_IRQHandler+0x20>
 8001bf0:	068e      	lsls	r6, r1, #26
 8001bf2:	d503      	bpl.n	8001bfc <HAL_UART_IRQHandler+0x20>
}
 8001bf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001bf8:	f7ff bfb9 	b.w	8001b6e <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001bfc:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8001bfe:	2d00      	cmp	r5, #0
 8001c00:	d05c      	beq.n	8001cbc <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001c02:	f010 0501 	ands.w	r5, r0, #1
 8001c06:	d102      	bne.n	8001c0e <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001c08:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001c0c:	d056      	beq.n	8001cbc <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c0e:	07d8      	lsls	r0, r3, #31
 8001c10:	d507      	bpl.n	8001c22 <HAL_UART_IRQHandler+0x46>
 8001c12:	05ce      	lsls	r6, r1, #23
 8001c14:	d505      	bpl.n	8001c22 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001c16:	2001      	movs	r0, #1
 8001c18:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c1a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c1c:	f040 0001 	orr.w	r0, r0, #1
 8001c20:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c22:	0798      	lsls	r0, r3, #30
 8001c24:	d506      	bpl.n	8001c34 <HAL_UART_IRQHandler+0x58>
 8001c26:	b12d      	cbz	r5, 8001c34 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001c28:	2002      	movs	r0, #2
 8001c2a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c2c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c2e:	f040 0004 	orr.w	r0, r0, #4
 8001c32:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c34:	075e      	lsls	r6, r3, #29
 8001c36:	d506      	bpl.n	8001c46 <HAL_UART_IRQHandler+0x6a>
 8001c38:	b12d      	cbz	r5, 8001c46 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001c3a:	2004      	movs	r0, #4
 8001c3c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c3e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c40:	f040 0002 	orr.w	r0, r0, #2
 8001c44:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001c46:	0718      	lsls	r0, r3, #28
 8001c48:	d507      	bpl.n	8001c5a <HAL_UART_IRQHandler+0x7e>
 8001c4a:	068e      	lsls	r6, r1, #26
 8001c4c:	d400      	bmi.n	8001c50 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c4e:	b125      	cbz	r5, 8001c5a <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001c50:	2008      	movs	r0, #8
 8001c52:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c54:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001c56:	4302      	orrs	r2, r0
 8001c58:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c5a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001c5c:	2a00      	cmp	r2, #0
 8001c5e:	d050      	beq.n	8001d02 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c60:	0698      	lsls	r0, r3, #26
 8001c62:	d504      	bpl.n	8001c6e <HAL_UART_IRQHandler+0x92>
 8001c64:	068a      	lsls	r2, r1, #26
 8001c66:	d502      	bpl.n	8001c6e <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff ff80 	bl	8001b6e <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001c6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001c70:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8001c72:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001c74:	d404      	bmi.n	8001c80 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001c7a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001c7e:	d019      	beq.n	8001cb4 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8001c80:	f7ff fd37 	bl	80016f2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	0656      	lsls	r6, r2, #25
 8001c8a:	d50f      	bpl.n	8001cac <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c8c:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001c8e:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c94:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001c96:	b148      	cbz	r0, 8001cac <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_UART_IRQHandler+0x128>)
 8001c9a:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001c9c:	f7fe fdc6 	bl	800082c <HAL_DMA_Abort_IT>
 8001ca0:	b378      	cbz	r0, 8001d02 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ca2:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ca8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001caa:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f7ff fd2f 	bl	8001710 <HAL_UART_ErrorCallback>
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001cb4:	f7ff fd2c 	bl	8001710 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb8:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001cbc:	02dd      	lsls	r5, r3, #11
 8001cbe:	d50e      	bpl.n	8001cde <HAL_UART_IRQHandler+0x102>
 8001cc0:	0246      	lsls	r6, r0, #9
 8001cc2:	d50c      	bpl.n	8001cde <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001cc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001cc8:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8001cd0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001cda:	f000 b815 	b.w	8001d08 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001cde:	061d      	lsls	r5, r3, #24
 8001ce0:	d506      	bpl.n	8001cf0 <HAL_UART_IRQHandler+0x114>
 8001ce2:	0608      	lsls	r0, r1, #24
 8001ce4:	d504      	bpl.n	8001cf0 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8001ce6:	4620      	mov	r0, r4
}
 8001ce8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8001cec:	f7ff bf04 	b.w	8001af8 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cf0:	065a      	lsls	r2, r3, #25
 8001cf2:	d506      	bpl.n	8001d02 <HAL_UART_IRQHandler+0x126>
 8001cf4:	064b      	lsls	r3, r1, #25
 8001cf6:	d504      	bpl.n	8001d02 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8001cf8:	4620      	mov	r0, r4
}
 8001cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8001cfe:	f7ff bf29 	b.w	8001b54 <UART_EndTransmit_IT>
 8001d02:	bd70      	pop	{r4, r5, r6, pc}
 8001d04:	08001713 	.word	0x08001713

08001d08 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001d08:	4770      	bx	lr
	...

08001d0c <TIM2_IRQHandler>:
  * @retval None
  */

void TIM2_IRQHandler(void)
{
	if( (++millisecondi / 1000) - TimerSecondi == 1) TimerSecondi++;
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <TIM2_IRQHandler+0x24>)
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <TIM2_IRQHandler+0x28>)
 8001d16:	6811      	ldr	r1, [r2, #0]
 8001d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d1c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d20:	1a5b      	subs	r3, r3, r1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	bf02      	ittt	eq
 8001d26:	6813      	ldreq	r3, [r2, #0]
 8001d28:	3301      	addeq	r3, #1
 8001d2a:	6013      	streq	r3, [r2, #0]
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000030 	.word	0x20000030
 8001d34:	20000028 	.word	0x20000028

08001d38 <SystemClock_Config>:
}
uint32_t millis(void) { return millisecondi; }
uint32_t secondi(void) { return TimerSecondi; }
void SystemClock_Config(void)
{
 8001d38:	b510      	push	{r4, lr}
 8001d3a:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3c:	2228      	movs	r2, #40	; 0x28
 8001d3e:	2100      	movs	r1, #0
 8001d40:	a805      	add	r0, sp, #20
 8001d42:	f000 fa45 	bl	80021d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d46:	2214      	movs	r2, #20
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4668      	mov	r0, sp
 8001d4c:	f000 fa40 	bl	80021d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d50:	2100      	movs	r1, #0
 8001d52:	2234      	movs	r2, #52	; 0x34
 8001d54:	a80f      	add	r0, sp, #60	; 0x3c
 8001d56:	f000 fa3b 	bl	80021d0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d5a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d5c:	2201      	movs	r2, #1
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d5e:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d60:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d62:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d64:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d66:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001d68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d6c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d6e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001d70:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d72:	f7fe fe49 	bl	8000a08 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d76:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d78:	4621      	mov	r1, r4
 8001d7a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d7c:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d80:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d82:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d84:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d86:	f7ff f8e7 	bl	8000f58 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 8001d8a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8001d8e:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d90:	a80f      	add	r0, sp, #60	; 0x3c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001d92:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001d96:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001d98:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9a:	f7ff f9b7 	bl	800110c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001d9e:	b01c      	add	sp, #112	; 0x70
 8001da0:	bd10      	pop	{r4, pc}
	...

08001da4 <main>:
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001da8:	f7fe fa32 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001dac:	f7ff ffc4 	bl	8001d38 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	2214      	movs	r2, #20
 8001db2:	2100      	movs	r1, #0
 8001db4:	a806      	add	r0, sp, #24
 8001db6:	f000 fa0b 	bl	80021d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dba:	4b66      	ldr	r3, [pc, #408]	; (8001f54 <main+0x1b0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(userLED_GPIO_Port, userLED_Pin, GPIO_PIN_SET);
 8001dbc:	4866      	ldr	r0, [pc, #408]	; (8001f58 <main+0x1b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001dc4:	615a      	str	r2, [r3, #20]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001dcc:	9200      	str	r2, [sp, #0]
 8001dce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001dde:	9201      	str	r2, [sp, #4]
 8001de0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(userLED_GPIO_Port, userLED_Pin, GPIO_PIN_SET);
 8001df0:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df2:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(userLED_GPIO_Port, userLED_Pin, GPIO_PIN_SET);
 8001df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000

  /*Configure GPIO pin : userButtorn_Pin */
  GPIO_InitStruct.Pin = userButtorn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df8:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = userButtorn_Pin;
 8001dfa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfe:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(userLED_GPIO_Port, userLED_Pin, GPIO_PIN_SET);
 8001e00:	f7fe fdf8 	bl	80009f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e04:	2302      	movs	r3, #2
  HAL_GPIO_Init(userButtorn_GPIO_Port, &GPIO_InitStruct);
 8001e06:	a906      	add	r1, sp, #24
 8001e08:	4854      	ldr	r0, [pc, #336]	; (8001f5c <main+0x1b8>)
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e0a:	9308      	str	r3, [sp, #32]

  /*Configure GPIO pin : userLED_Pin */
  GPIO_InitStruct.Pin = userLED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0c:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = userButtorn_Pin;
 8001e0e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e10:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(userButtorn_GPIO_Port, &GPIO_InitStruct);
 8001e12:	f7fe fd2f 	bl	8000874 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(userLED_GPIO_Port, &GPIO_InitStruct);
 8001e16:	a906      	add	r1, sp, #24
 8001e18:	484f      	ldr	r0, [pc, #316]	; (8001f58 <main+0x1b4>)
  GPIO_InitStruct.Pin = userLED_Pin;
 8001e1a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(userLED_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f7fe fd27 	bl	8000874 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	2218      	movs	r2, #24
  hadc1.Instance = ADC1;
 8001e28:	4d4d      	ldr	r5, [pc, #308]	; (8001f60 <main+0x1bc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	eb0d 0002 	add.w	r0, sp, r2
 8001e2e:	4621      	mov	r1, r4
 8001e30:	f000 f9ce 	bl	80021d0 <memset>
  hadc1.Instance = ADC1;
 8001e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001e38:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e3c:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	616b      	str	r3, [r5, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e42:	62ee      	str	r6, [r5, #44]	; 0x2c
  hadc1.Init.NbrOfConversion = 1;
 8001e44:	622e      	str	r6, [r5, #32]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e46:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e48:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e4a:	61ec      	str	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e4c:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e4e:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e50:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e52:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e54:	61ac      	str	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001e56:	63ac      	str	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e58:	f7fe fa36 	bl	80002c8 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e5c:	a906      	add	r1, sp, #24
 8001e5e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001e60:	9606      	str	r6, [sp, #24]
  htim1.Instance = TIM2;
 8001e62:	4d40      	ldr	r5, [pc, #256]	; (8001f64 <main+0x1c0>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e64:	9607      	str	r6, [sp, #28]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e66:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001e68:	9408      	str	r4, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e6a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8001e6c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e6e:	f7fe fb11 	bl	8000494 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	4621      	mov	r1, r4
 8001e74:	2210      	movs	r2, #16
 8001e76:	a806      	add	r0, sp, #24
 8001e78:	f000 f9aa 	bl	80021d0 <memset>
  htim1.Init.Prescaler = 8;
 8001e7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e80:	2308      	movs	r3, #8
 8001e82:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e86:	4628      	mov	r0, r5
  htim1.Init.Period = 999;
 8001e88:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e8c:	60eb      	str	r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e8e:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e90:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e92:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e96:	9403      	str	r4, [sp, #12]
 8001e98:	9404      	str	r4, [sp, #16]
 8001e9a:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e9c:	f7ff fb2a 	bl	80014f4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea4:	a906      	add	r1, sp, #24
 8001ea6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ea8:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eaa:	f7ff fb47 	bl	800153c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eae:	a903      	add	r1, sp, #12
 8001eb0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb2:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001eb4:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eb6:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001eb8:	f7ff fbf6 	bl	80016a8 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim1);
 8001ebc:	4628      	mov	r0, r5
 8001ebe:	f7ff fa17 	bl	80012f0 <HAL_TIM_Base_Start_IT>
  huart2.Instance = USART2;
 8001ec2:	4829      	ldr	r0, [pc, #164]	; (8001f68 <main+0x1c4>)
  huart2.Init.BaudRate = 38400;
 8001ec4:	4929      	ldr	r1, [pc, #164]	; (8001f6c <main+0x1c8>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8001ec8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001ecc:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ed0:	230c      	movs	r3, #12
 8001ed2:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ed6:	6104      	str	r4, [r0, #16]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ed8:	f7ff fddc 	bl	8001a94 <HAL_UART_Init>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001edc:	4622      	mov	r2, r4
 8001ede:	4621      	mov	r1, r4
 8001ee0:	201c      	movs	r0, #28
 8001ee2:	f7fe fc4d 	bl	8000780 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee6:	201c      	movs	r0, #28
	      	  if(buttonState != oldButtonStatus) { // Bottone Premuto, oppure rilasciato
 8001ee8:	4d21      	ldr	r5, [pc, #132]	; (8001f70 <main+0x1cc>)
	  buttonState = HAL_GPIO_ReadPin(userButtorn_GPIO_Port, userButtorn_Pin);
 8001eea:	4e1c      	ldr	r6, [pc, #112]	; (8001f5c <main+0x1b8>)
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001eec:	f7fe fc7c 	bl	80007e8 <HAL_NVIC_EnableIRQ>
 8001ef0:	462f      	mov	r7, r5
	  buttonState = HAL_GPIO_ReadPin(userButtorn_GPIO_Port, userButtorn_Pin);
 8001ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f7fe fd76 	bl	80009e8 <HAL_GPIO_ReadPin>
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <main+0x1d0>)
 8001efe:	7018      	strb	r0, [r3, #0]
	      	  if(buttonState != oldButtonStatus) { // Bottone Premuto, oppure rilasciato
 8001f00:	782b      	ldrb	r3, [r5, #0]
 8001f02:	4298      	cmp	r0, r3
 8001f04:	d0f5      	beq.n	8001ef2 <main+0x14e>
	      		  if(!oldButtonStatus) { // User Button Pressed
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f3      	bne.n	8001ef2 <main+0x14e>
	      			  HAL_GPIO_TogglePin(userLED_GPIO_Port, userLED_Pin);
 8001f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <main+0x1b4>)
 8001f10:	f7fe fd75 	bl	80009fe <HAL_GPIO_TogglePin>
	      			  oldButtonStatus = 1;
 8001f14:	2301      	movs	r3, #1
 8001f16:	702b      	strb	r3, [r5, #0]
	      			  uint8_t msg[] = "Bottone Premuto;";
 8001f18:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <main+0x1d4>)
 8001f1a:	aa06      	add	r2, sp, #24
 8001f1c:	f103 0e10 	add.w	lr, r3, #16
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	4614      	mov	r4, r2
 8001f26:	c403      	stmia	r4!, {r0, r1}
 8001f28:	3308      	adds	r3, #8
 8001f2a:	4573      	cmp	r3, lr
 8001f2c:	4622      	mov	r2, r4
 8001f2e:	d1f7      	bne.n	8001f20 <main+0x17c>
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	7023      	strb	r3, [r4, #0]
	      			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, 20, 1000);
 8001f34:	2214      	movs	r2, #20
 8001f36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f3a:	a906      	add	r1, sp, #24
 8001f3c:	480a      	ldr	r0, [pc, #40]	; (8001f68 <main+0x1c4>)
 8001f3e:	f7ff fd1e 	bl	800197e <HAL_UART_Transmit>
	      			  while (HAL_GPIO_ReadPin(userButtorn_GPIO_Port, userButtorn_Pin)) {} // WAIT UNTIL UNPRESSED
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	4630      	mov	r0, r6
 8001f48:	f7fe fd4e 	bl	80009e8 <HAL_GPIO_ReadPin>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d1f8      	bne.n	8001f42 <main+0x19e>
	      			  oldButtonStatus = 0;
 8001f50:	7038      	strb	r0, [r7, #0]
 8001f52:	e7ce      	b.n	8001ef2 <main+0x14e>
 8001f54:	40021000 	.word	0x40021000
 8001f58:	48000400 	.word	0x48000400
 8001f5c:	48000800 	.word	0x48000800
 8001f60:	2000003c 	.word	0x2000003c
 8001f64:	20000090 	.word	0x20000090
 8001f68:	200000d0 	.word	0x200000d0
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	20000034 	.word	0x20000034
 8001f74:	2000002c 	.word	0x2000002c
 8001f78:	0800221c 	.word	0x0800221c

08001f7c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_MspInit+0x2c>)
 8001f7e:	699a      	ldr	r2, [r3, #24]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	699a      	ldr	r2, [r3, #24]
{
 8001f88:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8a:	f002 0201 	and.w	r2, r2, #1
 8001f8e:	9200      	str	r2, [sp, #0]
 8001f90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	9301      	str	r3, [sp, #4]
 8001fa2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fa4:	b002      	add	sp, #8
 8001fa6:	4770      	bx	lr
 8001fa8:	40021000 	.word	0x40021000

08001fac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fac:	b510      	push	{r4, lr}
 8001fae:	4604      	mov	r4, r0
 8001fb0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	2214      	movs	r2, #20
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	a803      	add	r0, sp, #12
 8001fb8:	f000 f90a 	bl	80021d0 <memset>
  if(hadc->Instance==ADC1)
 8001fbc:	6823      	ldr	r3, [r4, #0]
 8001fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fc2:	d11d      	bne.n	8002000 <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fc4:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001fc8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ffa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f7fe fc3a 	bl	8000874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002000:	b008      	add	sp, #32
 8002002:	bd10      	pop	{r4, pc}

08002004 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8002004:	6802      	ldr	r2, [r0, #0]
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_TIM_Base_MspInit+0x24>)
 8002008:	429a      	cmp	r2, r3
{
 800200a:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 800200c:	d10a      	bne.n	8002024 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800200e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002018:	619a      	str	r2, [r3, #24]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002024:	b002      	add	sp, #8
 8002026:	4770      	bx	lr
 8002028:	40012c00 	.word	0x40012c00

0800202c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
 8002030:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002032:	2214      	movs	r2, #20
 8002034:	2100      	movs	r1, #0
 8002036:	a803      	add	r0, sp, #12
 8002038:	f000 f8ca 	bl	80021d0 <memset>
  if(huart->Instance==USART2)
 800203c:	6822      	ldr	r2, [r4, #0]
 800203e:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_UART_MspInit+0x70>)
 8002040:	429a      	cmp	r2, r3
 8002042:	d128      	bne.n	8002096 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002044:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2402      	movs	r4, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002050:	61da      	str	r2, [r3, #28]
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002058:	9201      	str	r2, [sp, #4]
 800205a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800205c:	695a      	ldr	r2, [r3, #20]
 800205e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002062:	615a      	str	r2, [r3, #20]
 8002064:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002070:	230c      	movs	r3, #12
 8002072:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800207a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002080:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f7fe fbf7 	bl	8000874 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002086:	2026      	movs	r0, #38	; 0x26
 8002088:	2200      	movs	r2, #0
 800208a:	4621      	mov	r1, r4
 800208c:	f7fe fb78 	bl	8000780 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002090:	2026      	movs	r0, #38	; 0x26
 8002092:	f7fe fba9 	bl	80007e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002096:	b008      	add	sp, #32
 8002098:	bd10      	pop	{r4, pc}
 800209a:	bf00      	nop
 800209c:	40004400 	.word	0x40004400

080020a0 <NMI_Handler>:
 80020a0:	4770      	bx	lr

080020a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	e7fe      	b.n	80020a4 <MemManage_Handler>

080020a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a6:	e7fe      	b.n	80020a6 <BusFault_Handler>

080020a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020a8:	e7fe      	b.n	80020a8 <UsageFault_Handler>

080020aa <SVC_Handler>:
 80020aa:	4770      	bx	lr

080020ac <DebugMon_Handler>:
 80020ac:	4770      	bx	lr

080020ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b0:	f7fe b8c0 	b.w	8000234 <HAL_IncTick>

080020b4 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b4:	4801      	ldr	r0, [pc, #4]	; (80020bc <TIM1_UP_TIM16_IRQHandler+0x8>)
 80020b6:	f7ff b92b 	b.w	8001310 <HAL_TIM_IRQHandler>
 80020ba:	bf00      	nop
 80020bc:	20000090 	.word	0x20000090

080020c0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020c0:	4801      	ldr	r0, [pc, #4]	; (80020c8 <USART2_IRQHandler+0x8>)
 80020c2:	f7ff bd8b 	b.w	8001bdc <HAL_UART_IRQHandler>
 80020c6:	bf00      	nop
 80020c8:	200000d0 	.word	0x200000d0

080020cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4915      	ldr	r1, [pc, #84]	; (8002124 <SystemInit+0x58>)
 80020ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <SystemInit+0x5c>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80020e4:	6858      	ldr	r0, [r3, #4]
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <SystemInit+0x60>)
 80020e8:	4002      	ands	r2, r0
 80020ea:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020f6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002106:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800210a:	f022 020f 	bic.w	r2, r2, #15
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002110:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002112:	4a07      	ldr	r2, [pc, #28]	; (8002130 <SystemInit+0x64>)
 8002114:	4002      	ands	r2, r0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002118:	2200      	movs	r2, #0
 800211a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800211c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002120:	608b      	str	r3, [r1, #8]
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00
 8002128:	40021000 	.word	0x40021000
 800212c:	f87fc00c 	.word	0xf87fc00c
 8002130:	ff00fccc 	.word	0xff00fccc

08002134 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800216c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002138:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800213a:	e003      	b.n	8002144 <LoopCopyDataInit>

0800213c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800213e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002140:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002142:	3104      	adds	r1, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002144:	480b      	ldr	r0, [pc, #44]	; (8002174 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002148:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800214a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800214c:	d3f6      	bcc.n	800213c <CopyDataInit>
	ldr	r2, =_sbss
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002150:	e002      	b.n	8002158 <LoopFillZerobss>

08002152 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002152:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002154:	f842 3b04 	str.w	r3, [r2], #4

08002158 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <LoopForever+0x16>)
	cmp	r2, r3
 800215a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800215c:	d3f9      	bcc.n	8002152 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800215e:	f7ff ffb5 	bl	80020cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002162:	f000 f811 	bl	8002188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002166:	f7ff fe1d 	bl	8001da4 <main>

0800216a <LoopForever>:

LoopForever:
    b LoopForever
 800216a:	e7fe      	b.n	800216a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800216c:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8002170:	08002250 	.word	0x08002250
	ldr	r0, =_sdata
 8002174:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002178:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800217c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002180:	20000140 	.word	0x20000140

08002184 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002184:	e7fe      	b.n	8002184 <ADC1_IRQHandler>
	...

08002188 <__libc_init_array>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4e0d      	ldr	r6, [pc, #52]	; (80021c0 <__libc_init_array+0x38>)
 800218c:	4c0d      	ldr	r4, [pc, #52]	; (80021c4 <__libc_init_array+0x3c>)
 800218e:	1ba4      	subs	r4, r4, r6
 8002190:	10a4      	asrs	r4, r4, #2
 8002192:	2500      	movs	r5, #0
 8002194:	42a5      	cmp	r5, r4
 8002196:	d109      	bne.n	80021ac <__libc_init_array+0x24>
 8002198:	4e0b      	ldr	r6, [pc, #44]	; (80021c8 <__libc_init_array+0x40>)
 800219a:	4c0c      	ldr	r4, [pc, #48]	; (80021cc <__libc_init_array+0x44>)
 800219c:	f000 f820 	bl	80021e0 <_init>
 80021a0:	1ba4      	subs	r4, r4, r6
 80021a2:	10a4      	asrs	r4, r4, #2
 80021a4:	2500      	movs	r5, #0
 80021a6:	42a5      	cmp	r5, r4
 80021a8:	d105      	bne.n	80021b6 <__libc_init_array+0x2e>
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021b0:	4798      	blx	r3
 80021b2:	3501      	adds	r5, #1
 80021b4:	e7ee      	b.n	8002194 <__libc_init_array+0xc>
 80021b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021ba:	4798      	blx	r3
 80021bc:	3501      	adds	r5, #1
 80021be:	e7f2      	b.n	80021a6 <__libc_init_array+0x1e>
 80021c0:	08002248 	.word	0x08002248
 80021c4:	08002248 	.word	0x08002248
 80021c8:	08002248 	.word	0x08002248
 80021cc:	0800224c 	.word	0x0800224c

080021d0 <memset>:
 80021d0:	4402      	add	r2, r0
 80021d2:	4603      	mov	r3, r0
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d100      	bne.n	80021da <memset+0xa>
 80021d8:	4770      	bx	lr
 80021da:	f803 1b01 	strb.w	r1, [r3], #1
 80021de:	e7f9      	b.n	80021d4 <memset+0x4>

080021e0 <_init>:
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	bf00      	nop
 80021e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e6:	bc08      	pop	{r3}
 80021e8:	469e      	mov	lr, r3
 80021ea:	4770      	bx	lr

080021ec <_fini>:
 80021ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ee:	bf00      	nop
 80021f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021f2:	bc08      	pop	{r3}
 80021f4:	469e      	mov	lr, r3
 80021f6:	4770      	bx	lr
