
CANProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003698  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800385c  0800385c  0001385c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000030  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e0  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08003984  08003984  00013984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000037c  20000000  0800398c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00009e60  2000037c  08003d08  0002037c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000a1dc  08003d08  0002a1dc  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002037c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000155e4  00000000  00000000  000203ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003213  00000000  00000000  00035990  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000092fc  00000000  00000000  00038ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000da0  00000000  00000000  00041ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001010  00000000  00000000  00042c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000071b9  00000000  00000000  00043c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000050b7  00000000  00000000  0004ae09  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004fec0  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a00  00000000  00000000  0004ff3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000037c 	.word	0x2000037c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003844 	.word	0x08003844

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000380 	.word	0x20000380
 8000200:	08003844 	.word	0x08003844

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f001 b8f6 	b.w	8001408 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <selfrel_offset31>:
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	005a      	lsls	r2, r3, #1
 8000514:	bf4c      	ite	mi
 8000516:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800051a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800051e:	4418      	add	r0, r3
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <search_EIT_table>:
 8000524:	b361      	cbz	r1, 8000580 <search_EIT_table+0x5c>
 8000526:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800052a:	f101 3aff 	add.w	sl, r1, #4294967295
 800052e:	4690      	mov	r8, r2
 8000530:	4606      	mov	r6, r0
 8000532:	46d1      	mov	r9, sl
 8000534:	2700      	movs	r7, #0
 8000536:	eb07 0409 	add.w	r4, r7, r9
 800053a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800053e:	1064      	asrs	r4, r4, #1
 8000540:	00e5      	lsls	r5, r4, #3
 8000542:	1971      	adds	r1, r6, r5
 8000544:	4608      	mov	r0, r1
 8000546:	f7ff ffe3 	bl	8000510 <selfrel_offset31>
 800054a:	45a2      	cmp	sl, r4
 800054c:	4683      	mov	fp, r0
 800054e:	f105 0008 	add.w	r0, r5, #8
 8000552:	4430      	add	r0, r6
 8000554:	d009      	beq.n	800056a <search_EIT_table+0x46>
 8000556:	f7ff ffdb 	bl	8000510 <selfrel_offset31>
 800055a:	45c3      	cmp	fp, r8
 800055c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000560:	d805      	bhi.n	800056e <search_EIT_table+0x4a>
 8000562:	4540      	cmp	r0, r8
 8000564:	d209      	bcs.n	800057a <search_EIT_table+0x56>
 8000566:	1c67      	adds	r7, r4, #1
 8000568:	e7e5      	b.n	8000536 <search_EIT_table+0x12>
 800056a:	45c3      	cmp	fp, r8
 800056c:	d905      	bls.n	800057a <search_EIT_table+0x56>
 800056e:	42a7      	cmp	r7, r4
 8000570:	d002      	beq.n	8000578 <search_EIT_table+0x54>
 8000572:	f104 39ff 	add.w	r9, r4, #4294967295
 8000576:	e7de      	b.n	8000536 <search_EIT_table+0x12>
 8000578:	2100      	movs	r1, #0
 800057a:	4608      	mov	r0, r1
 800057c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000580:	4608      	mov	r0, r1
 8000582:	4770      	bx	lr

08000584 <__gnu_unwind_get_pr_addr>:
 8000584:	2801      	cmp	r0, #1
 8000586:	d007      	beq.n	8000598 <__gnu_unwind_get_pr_addr+0x14>
 8000588:	2802      	cmp	r0, #2
 800058a:	d007      	beq.n	800059c <__gnu_unwind_get_pr_addr+0x18>
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <__gnu_unwind_get_pr_addr+0x1c>)
 800058e:	2800      	cmp	r0, #0
 8000590:	bf0c      	ite	eq
 8000592:	4618      	moveq	r0, r3
 8000594:	2000      	movne	r0, #0
 8000596:	4770      	bx	lr
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <__gnu_unwind_get_pr_addr+0x20>)
 800059a:	4770      	bx	lr
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <__gnu_unwind_get_pr_addr+0x24>)
 800059e:	4770      	bx	lr
 80005a0:	08000c89 	.word	0x08000c89
 80005a4:	08000c8d 	.word	0x08000c8d
 80005a8:	08000c91 	.word	0x08000c91

080005ac <get_eit_entry>:
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	4b24      	ldr	r3, [pc, #144]	; (8000640 <get_eit_entry+0x94>)
 80005b0:	b083      	sub	sp, #12
 80005b2:	4604      	mov	r4, r0
 80005b4:	1e8d      	subs	r5, r1, #2
 80005b6:	b37b      	cbz	r3, 8000618 <get_eit_entry+0x6c>
 80005b8:	a901      	add	r1, sp, #4
 80005ba:	4628      	mov	r0, r5
 80005bc:	f3af 8000 	nop.w
 80005c0:	b320      	cbz	r0, 800060c <get_eit_entry+0x60>
 80005c2:	9901      	ldr	r1, [sp, #4]
 80005c4:	462a      	mov	r2, r5
 80005c6:	f7ff ffad 	bl	8000524 <search_EIT_table>
 80005ca:	4601      	mov	r1, r0
 80005cc:	b1f0      	cbz	r0, 800060c <get_eit_entry+0x60>
 80005ce:	f7ff ff9f 	bl	8000510 <selfrel_offset31>
 80005d2:	684b      	ldr	r3, [r1, #4]
 80005d4:	64a0      	str	r0, [r4, #72]	; 0x48
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d012      	beq.n	8000600 <get_eit_entry+0x54>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	f101 0004 	add.w	r0, r1, #4
 80005e0:	db20      	blt.n	8000624 <get_eit_entry+0x78>
 80005e2:	f7ff ff95 	bl	8000510 <selfrel_offset31>
 80005e6:	2300      	movs	r3, #0
 80005e8:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005ea:	6523      	str	r3, [r4, #80]	; 0x50
 80005ec:	6803      	ldr	r3, [r0, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	db1c      	blt.n	800062c <get_eit_entry+0x80>
 80005f2:	f7ff ff8d 	bl	8000510 <selfrel_offset31>
 80005f6:	2300      	movs	r3, #0
 80005f8:	6120      	str	r0, [r4, #16]
 80005fa:	4618      	mov	r0, r3
 80005fc:	b003      	add	sp, #12
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	2300      	movs	r3, #0
 8000602:	6123      	str	r3, [r4, #16]
 8000604:	2305      	movs	r3, #5
 8000606:	4618      	mov	r0, r3
 8000608:	b003      	add	sp, #12
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	2300      	movs	r3, #0
 800060e:	6123      	str	r3, [r4, #16]
 8000610:	2309      	movs	r3, #9
 8000612:	4618      	mov	r0, r3
 8000614:	b003      	add	sp, #12
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	490a      	ldr	r1, [pc, #40]	; (8000644 <get_eit_entry+0x98>)
 800061a:	480b      	ldr	r0, [pc, #44]	; (8000648 <get_eit_entry+0x9c>)
 800061c:	1a09      	subs	r1, r1, r0
 800061e:	10c9      	asrs	r1, r1, #3
 8000620:	9101      	str	r1, [sp, #4]
 8000622:	e7cf      	b.n	80005c4 <get_eit_entry+0x18>
 8000624:	2301      	movs	r3, #1
 8000626:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000628:	6523      	str	r3, [r4, #80]	; 0x50
 800062a:	e7df      	b.n	80005ec <get_eit_entry+0x40>
 800062c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000630:	f7ff ffa8 	bl	8000584 <__gnu_unwind_get_pr_addr>
 8000634:	2800      	cmp	r0, #0
 8000636:	6120      	str	r0, [r4, #16]
 8000638:	bf14      	ite	ne
 800063a:	2300      	movne	r3, #0
 800063c:	2309      	moveq	r3, #9
 800063e:	e7dc      	b.n	80005fa <get_eit_entry+0x4e>
 8000640:	00000000 	.word	0x00000000
 8000644:	08003984 	.word	0x08003984
 8000648:	080038a4 	.word	0x080038a4

0800064c <restore_non_core_regs>:
 800064c:	6803      	ldr	r3, [r0, #0]
 800064e:	07da      	lsls	r2, r3, #31
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
 8000654:	d406      	bmi.n	8000664 <restore_non_core_regs+0x18>
 8000656:	079b      	lsls	r3, r3, #30
 8000658:	f100 0048 	add.w	r0, r0, #72	; 0x48
 800065c:	d509      	bpl.n	8000672 <restore_non_core_regs+0x26>
 800065e:	f000 fc51 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D>
 8000662:	6823      	ldr	r3, [r4, #0]
 8000664:	0759      	lsls	r1, r3, #29
 8000666:	d509      	bpl.n	800067c <restore_non_core_regs+0x30>
 8000668:	071a      	lsls	r2, r3, #28
 800066a:	d50e      	bpl.n	800068a <restore_non_core_regs+0x3e>
 800066c:	06db      	lsls	r3, r3, #27
 800066e:	d513      	bpl.n	8000698 <restore_non_core_regs+0x4c>
 8000670:	bd10      	pop	{r4, pc}
 8000672:	f000 fc3f 	bl	8000ef4 <__gnu_Unwind_Restore_VFP>
 8000676:	6823      	ldr	r3, [r4, #0]
 8000678:	0759      	lsls	r1, r3, #29
 800067a:	d4f5      	bmi.n	8000668 <restore_non_core_regs+0x1c>
 800067c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000680:	f000 fc48 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000684:	6823      	ldr	r3, [r4, #0]
 8000686:	071a      	lsls	r2, r3, #28
 8000688:	d4f0      	bmi.n	800066c <restore_non_core_regs+0x20>
 800068a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800068e:	f000 fc49 	bl	8000f24 <__gnu_Unwind_Restore_WMMXD>
 8000692:	6823      	ldr	r3, [r4, #0]
 8000694:	06db      	lsls	r3, r3, #27
 8000696:	d4eb      	bmi.n	8000670 <restore_non_core_regs+0x24>
 8000698:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f000 bc84 	b.w	8000fac <__gnu_Unwind_Restore_WMMXC>

080006a4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 80006a4:	6803      	ldr	r3, [r0, #0]
 80006a6:	b103      	cbz	r3, 80006aa <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 80006a8:	4403      	add	r3, r0
 80006aa:	4618      	mov	r0, r3
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <__gnu_unwind_24bit.isra.1>:
 80006b0:	2009      	movs	r0, #9
 80006b2:	4770      	bx	lr

080006b4 <_Unwind_DebugHook>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <unwind_phase2>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	4604      	mov	r4, r0
 80006bc:	460d      	mov	r5, r1
 80006be:	e008      	b.n	80006d2 <unwind_phase2+0x1a>
 80006c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80006c2:	6163      	str	r3, [r4, #20]
 80006c4:	462a      	mov	r2, r5
 80006c6:	6923      	ldr	r3, [r4, #16]
 80006c8:	4621      	mov	r1, r4
 80006ca:	2001      	movs	r0, #1
 80006cc:	4798      	blx	r3
 80006ce:	2808      	cmp	r0, #8
 80006d0:	d108      	bne.n	80006e4 <unwind_phase2+0x2c>
 80006d2:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006d4:	4620      	mov	r0, r4
 80006d6:	f7ff ff69 	bl	80005ac <get_eit_entry>
 80006da:	4606      	mov	r6, r0
 80006dc:	2800      	cmp	r0, #0
 80006de:	d0ef      	beq.n	80006c0 <unwind_phase2+0x8>
 80006e0:	f003 f85a 	bl	8003798 <abort>
 80006e4:	2807      	cmp	r0, #7
 80006e6:	d1fb      	bne.n	80006e0 <unwind_phase2+0x28>
 80006e8:	4630      	mov	r0, r6
 80006ea:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006ec:	f7ff ffe2 	bl	80006b4 <_Unwind_DebugHook>
 80006f0:	1d28      	adds	r0, r5, #4
 80006f2:	f000 fbf3 	bl	8000edc <__restore_core_regs>
 80006f6:	bf00      	nop

080006f8 <unwind_phase2_forced>:
 80006f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fc:	1d0c      	adds	r4, r1, #4
 80006fe:	4605      	mov	r5, r0
 8000700:	4692      	mov	sl, r2
 8000702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000704:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000708:	ae03      	add	r6, sp, #12
 800070a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800070c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800070e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000710:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000712:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000714:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000718:	ac02      	add	r4, sp, #8
 800071a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800071e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000722:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000726:	2300      	movs	r3, #0
 8000728:	4628      	mov	r0, r5
 800072a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800072c:	6023      	str	r3, [r4, #0]
 800072e:	f7ff ff3d 	bl	80005ac <get_eit_entry>
 8000732:	f1ba 0f00 	cmp.w	sl, #0
 8000736:	4607      	mov	r7, r0
 8000738:	bf14      	ite	ne
 800073a:	260a      	movne	r6, #10
 800073c:	2609      	moveq	r6, #9
 800073e:	b17f      	cbz	r7, 8000760 <unwind_phase2_forced+0x68>
 8000740:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000742:	f046 0110 	orr.w	r1, r6, #16
 8000746:	e88d 0210 	stmia.w	sp, {r4, r9}
 800074a:	462a      	mov	r2, r5
 800074c:	6463      	str	r3, [r4, #68]	; 0x44
 800074e:	2001      	movs	r0, #1
 8000750:	462b      	mov	r3, r5
 8000752:	47c0      	blx	r8
 8000754:	bb78      	cbnz	r0, 80007b6 <unwind_phase2_forced+0xbe>
 8000756:	4638      	mov	r0, r7
 8000758:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800075c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000762:	616b      	str	r3, [r5, #20]
 8000764:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000768:	4621      	mov	r1, r4
 800076a:	a87a      	add	r0, sp, #488	; 0x1e8
 800076c:	f003 f81b 	bl	80037a6 <memcpy>
 8000770:	692b      	ldr	r3, [r5, #16]
 8000772:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000774:	4629      	mov	r1, r5
 8000776:	4630      	mov	r0, r6
 8000778:	4798      	blx	r3
 800077a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800077c:	4682      	mov	sl, r0
 800077e:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000782:	4631      	mov	r1, r6
 8000784:	6463      	str	r3, [r4, #68]	; 0x44
 8000786:	462a      	mov	r2, r5
 8000788:	462b      	mov	r3, r5
 800078a:	2001      	movs	r0, #1
 800078c:	47c0      	blx	r8
 800078e:	b990      	cbnz	r0, 80007b6 <unwind_phase2_forced+0xbe>
 8000790:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000794:	a97a      	add	r1, sp, #488	; 0x1e8
 8000796:	4620      	mov	r0, r4
 8000798:	f003 f805 	bl	80037a6 <memcpy>
 800079c:	f1ba 0f08 	cmp.w	sl, #8
 80007a0:	d106      	bne.n	80007b0 <unwind_phase2_forced+0xb8>
 80007a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007a4:	4628      	mov	r0, r5
 80007a6:	f7ff ff01 	bl	80005ac <get_eit_entry>
 80007aa:	2609      	movs	r6, #9
 80007ac:	4607      	mov	r7, r0
 80007ae:	e7c6      	b.n	800073e <unwind_phase2_forced+0x46>
 80007b0:	f1ba 0f07 	cmp.w	sl, #7
 80007b4:	d005      	beq.n	80007c2 <unwind_phase2_forced+0xca>
 80007b6:	2709      	movs	r7, #9
 80007b8:	4638      	mov	r0, r7
 80007ba:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c2:	4638      	mov	r0, r7
 80007c4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007c6:	f7ff ff75 	bl	80006b4 <_Unwind_DebugHook>
 80007ca:	a803      	add	r0, sp, #12
 80007cc:	f000 fb86 	bl	8000edc <__restore_core_regs>

080007d0 <_Unwind_GetCFA>:
 80007d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80007d2:	4770      	bx	lr

080007d4 <__gnu_Unwind_RaiseException>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007d8:	640b      	str	r3, [r1, #64]	; 0x40
 80007da:	1d0e      	adds	r6, r1, #4
 80007dc:	460f      	mov	r7, r1
 80007de:	4604      	mov	r4, r0
 80007e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007e2:	b0f9      	sub	sp, #484	; 0x1e4
 80007e4:	ad01      	add	r5, sp, #4
 80007e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007f4:	f04f 36ff 	mov.w	r6, #4294967295
 80007f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007fc:	9600      	str	r6, [sp, #0]
 80007fe:	e006      	b.n	800080e <__gnu_Unwind_RaiseException+0x3a>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	466a      	mov	r2, sp
 8000804:	4621      	mov	r1, r4
 8000806:	4798      	blx	r3
 8000808:	2808      	cmp	r0, #8
 800080a:	4605      	mov	r5, r0
 800080c:	d108      	bne.n	8000820 <__gnu_Unwind_RaiseException+0x4c>
 800080e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000810:	4620      	mov	r0, r4
 8000812:	f7ff fecb 	bl	80005ac <get_eit_entry>
 8000816:	2800      	cmp	r0, #0
 8000818:	d0f2      	beq.n	8000800 <__gnu_Unwind_RaiseException+0x2c>
 800081a:	2009      	movs	r0, #9
 800081c:	b079      	add	sp, #484	; 0x1e4
 800081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000820:	4668      	mov	r0, sp
 8000822:	f7ff ff13 	bl	800064c <restore_non_core_regs>
 8000826:	2d06      	cmp	r5, #6
 8000828:	d1f7      	bne.n	800081a <__gnu_Unwind_RaiseException+0x46>
 800082a:	4639      	mov	r1, r7
 800082c:	4620      	mov	r0, r4
 800082e:	f7ff ff43 	bl	80006b8 <unwind_phase2>
 8000832:	bf00      	nop

08000834 <__gnu_Unwind_ForcedUnwind>:
 8000834:	b430      	push	{r4, r5}
 8000836:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000838:	60c1      	str	r1, [r0, #12]
 800083a:	6182      	str	r2, [r0, #24]
 800083c:	4619      	mov	r1, r3
 800083e:	641d      	str	r5, [r3, #64]	; 0x40
 8000840:	2200      	movs	r2, #0
 8000842:	bc30      	pop	{r4, r5}
 8000844:	e758      	b.n	80006f8 <unwind_phase2_forced>
 8000846:	bf00      	nop

08000848 <__gnu_Unwind_Resume>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	68c6      	ldr	r6, [r0, #12]
 800084c:	6943      	ldr	r3, [r0, #20]
 800084e:	640b      	str	r3, [r1, #64]	; 0x40
 8000850:	b126      	cbz	r6, 800085c <__gnu_Unwind_Resume+0x14>
 8000852:	2201      	movs	r2, #1
 8000854:	f7ff ff50 	bl	80006f8 <unwind_phase2_forced>
 8000858:	f002 ff9e 	bl	8003798 <abort>
 800085c:	6903      	ldr	r3, [r0, #16]
 800085e:	460a      	mov	r2, r1
 8000860:	4604      	mov	r4, r0
 8000862:	460d      	mov	r5, r1
 8000864:	4601      	mov	r1, r0
 8000866:	2002      	movs	r0, #2
 8000868:	4798      	blx	r3
 800086a:	2807      	cmp	r0, #7
 800086c:	d007      	beq.n	800087e <__gnu_Unwind_Resume+0x36>
 800086e:	2808      	cmp	r0, #8
 8000870:	d103      	bne.n	800087a <__gnu_Unwind_Resume+0x32>
 8000872:	4629      	mov	r1, r5
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff ff1f 	bl	80006b8 <unwind_phase2>
 800087a:	f002 ff8d 	bl	8003798 <abort>
 800087e:	4630      	mov	r0, r6
 8000880:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000882:	f7ff ff17 	bl	80006b4 <_Unwind_DebugHook>
 8000886:	1d28      	adds	r0, r5, #4
 8000888:	f000 fb28 	bl	8000edc <__restore_core_regs>

0800088c <__gnu_Unwind_Resume_or_Rethrow>:
 800088c:	68c2      	ldr	r2, [r0, #12]
 800088e:	b11a      	cbz	r2, 8000898 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000890:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000892:	640a      	str	r2, [r1, #64]	; 0x40
 8000894:	2200      	movs	r2, #0
 8000896:	e72f      	b.n	80006f8 <unwind_phase2_forced>
 8000898:	e79c      	b.n	80007d4 <__gnu_Unwind_RaiseException>
 800089a:	bf00      	nop

0800089c <_Unwind_Complete>:
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop

080008a0 <_Unwind_DeleteException>:
 80008a0:	6883      	ldr	r3, [r0, #8]
 80008a2:	b113      	cbz	r3, 80008aa <_Unwind_DeleteException+0xa>
 80008a4:	4601      	mov	r1, r0
 80008a6:	2001      	movs	r0, #1
 80008a8:	4718      	bx	r3
 80008aa:	4770      	bx	lr

080008ac <_Unwind_VRS_Get>:
 80008ac:	b500      	push	{lr}
 80008ae:	2904      	cmp	r1, #4
 80008b0:	d807      	bhi.n	80008c2 <_Unwind_VRS_Get+0x16>
 80008b2:	e8df f001 	tbb	[pc, r1]
 80008b6:	0903      	.short	0x0903
 80008b8:	0906      	.short	0x0906
 80008ba:	09          	.byte	0x09
 80008bb:	00          	.byte	0x00
 80008bc:	b90b      	cbnz	r3, 80008c2 <_Unwind_VRS_Get+0x16>
 80008be:	2a0f      	cmp	r2, #15
 80008c0:	d905      	bls.n	80008ce <_Unwind_VRS_Get+0x22>
 80008c2:	2002      	movs	r0, #2
 80008c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c8:	2001      	movs	r0, #1
 80008ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80008ce:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008d2:	4618      	mov	r0, r3
 80008d4:	6853      	ldr	r3, [r2, #4]
 80008d6:	9a01      	ldr	r2, [sp, #4]
 80008d8:	6013      	str	r3, [r2, #0]
 80008da:	f85d fb04 	ldr.w	pc, [sp], #4
 80008de:	bf00      	nop

080008e0 <_Unwind_GetGR>:
 80008e0:	b510      	push	{r4, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	2300      	movs	r3, #0
 80008e6:	ac03      	add	r4, sp, #12
 80008e8:	460a      	mov	r2, r1
 80008ea:	9400      	str	r4, [sp, #0]
 80008ec:	4619      	mov	r1, r3
 80008ee:	f7ff ffdd 	bl	80008ac <_Unwind_VRS_Get>
 80008f2:	9803      	ldr	r0, [sp, #12]
 80008f4:	b004      	add	sp, #16
 80008f6:	bd10      	pop	{r4, pc}

080008f8 <_Unwind_VRS_Set>:
 80008f8:	b500      	push	{lr}
 80008fa:	2904      	cmp	r1, #4
 80008fc:	d807      	bhi.n	800090e <_Unwind_VRS_Set+0x16>
 80008fe:	e8df f001 	tbb	[pc, r1]
 8000902:	0903      	.short	0x0903
 8000904:	0906      	.short	0x0906
 8000906:	09          	.byte	0x09
 8000907:	00          	.byte	0x00
 8000908:	b90b      	cbnz	r3, 800090e <_Unwind_VRS_Set+0x16>
 800090a:	2a0f      	cmp	r2, #15
 800090c:	d905      	bls.n	800091a <_Unwind_VRS_Set+0x22>
 800090e:	2002      	movs	r0, #2
 8000910:	f85d fb04 	ldr.w	pc, [sp], #4
 8000914:	2001      	movs	r0, #1
 8000916:	f85d fb04 	ldr.w	pc, [sp], #4
 800091a:	9901      	ldr	r1, [sp, #4]
 800091c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000920:	6809      	ldr	r1, [r1, #0]
 8000922:	6051      	str	r1, [r2, #4]
 8000924:	4618      	mov	r0, r3
 8000926:	f85d fb04 	ldr.w	pc, [sp], #4
 800092a:	bf00      	nop

0800092c <_Unwind_SetGR>:
 800092c:	b510      	push	{r4, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	ac04      	add	r4, sp, #16
 8000932:	2300      	movs	r3, #0
 8000934:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000938:	460a      	mov	r2, r1
 800093a:	9400      	str	r4, [sp, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f7ff ffdb 	bl	80008f8 <_Unwind_VRS_Set>
 8000942:	b004      	add	sp, #16
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop

08000948 <__gnu_Unwind_Backtrace>:
 8000948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800094a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	1d15      	adds	r5, r2, #4
 8000950:	4607      	mov	r7, r0
 8000952:	460e      	mov	r6, r1
 8000954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000956:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800095a:	ac17      	add	r4, sp, #92	; 0x5c
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000966:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800096a:	f04f 35ff 	mov.w	r5, #4294967295
 800096e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000972:	9516      	str	r5, [sp, #88]	; 0x58
 8000974:	e010      	b.n	8000998 <__gnu_Unwind_Backtrace+0x50>
 8000976:	a816      	add	r0, sp, #88	; 0x58
 8000978:	f7ff ffd8 	bl	800092c <_Unwind_SetGR>
 800097c:	4631      	mov	r1, r6
 800097e:	a816      	add	r0, sp, #88	; 0x58
 8000980:	47b8      	blx	r7
 8000982:	aa16      	add	r2, sp, #88	; 0x58
 8000984:	4669      	mov	r1, sp
 8000986:	b978      	cbnz	r0, 80009a8 <__gnu_Unwind_Backtrace+0x60>
 8000988:	9b04      	ldr	r3, [sp, #16]
 800098a:	2008      	movs	r0, #8
 800098c:	4798      	blx	r3
 800098e:	2805      	cmp	r0, #5
 8000990:	4604      	mov	r4, r0
 8000992:	d00a      	beq.n	80009aa <__gnu_Unwind_Backtrace+0x62>
 8000994:	2809      	cmp	r0, #9
 8000996:	d007      	beq.n	80009a8 <__gnu_Unwind_Backtrace+0x60>
 8000998:	9926      	ldr	r1, [sp, #152]	; 0x98
 800099a:	4668      	mov	r0, sp
 800099c:	f7ff fe06 	bl	80005ac <get_eit_entry>
 80009a0:	466a      	mov	r2, sp
 80009a2:	210c      	movs	r1, #12
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d0e6      	beq.n	8000976 <__gnu_Unwind_Backtrace+0x2e>
 80009a8:	2409      	movs	r4, #9
 80009aa:	a816      	add	r0, sp, #88	; 0x58
 80009ac:	f7ff fe4e 	bl	800064c <restore_non_core_regs>
 80009b0:	4620      	mov	r0, r4
 80009b2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80009b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009b8 <__gnu_unwind_pr_common>:
 80009b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009bc:	460d      	mov	r5, r1
 80009be:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80009c0:	b08b      	sub	sp, #44	; 0x2c
 80009c2:	1d0c      	adds	r4, r1, #4
 80009c4:	6809      	ldr	r1, [r1, #0]
 80009c6:	9107      	str	r1, [sp, #28]
 80009c8:	4691      	mov	r9, r2
 80009ca:	9408      	str	r4, [sp, #32]
 80009cc:	f000 0b03 	and.w	fp, r0, #3
 80009d0:	461e      	mov	r6, r3
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d160      	bne.n	8000a98 <__gnu_unwind_pr_common+0xe0>
 80009d6:	0209      	lsls	r1, r1, #8
 80009d8:	2303      	movs	r3, #3
 80009da:	9107      	str	r1, [sp, #28]
 80009dc:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009e0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009e4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009e6:	f1bb 0f02 	cmp.w	fp, #2
 80009ea:	bf08      	it	eq
 80009ec:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009ee:	f013 0301 	ands.w	r3, r3, #1
 80009f2:	d140      	bne.n	8000a76 <__gnu_unwind_pr_common+0xbe>
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	f000 0308 	and.w	r3, r0, #8
 80009fa:	9303      	str	r3, [sp, #12]
 80009fc:	f8d4 8000 	ldr.w	r8, [r4]
 8000a00:	f1b8 0f00 	cmp.w	r8, #0
 8000a04:	d039      	beq.n	8000a7a <__gnu_unwind_pr_common+0xc2>
 8000a06:	2e02      	cmp	r6, #2
 8000a08:	d043      	beq.n	8000a92 <__gnu_unwind_pr_common+0xda>
 8000a0a:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a0e:	8867      	ldrh	r7, [r4, #2]
 8000a10:	3404      	adds	r4, #4
 8000a12:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a14:	f027 0a01 	bic.w	sl, r7, #1
 8000a18:	210f      	movs	r1, #15
 8000a1a:	4648      	mov	r0, r9
 8000a1c:	449a      	add	sl, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <_Unwind_GetGR>
 8000a22:	4582      	cmp	sl, r0
 8000a24:	d833      	bhi.n	8000a8e <__gnu_unwind_pr_common+0xd6>
 8000a26:	f028 0301 	bic.w	r3, r8, #1
 8000a2a:	449a      	add	sl, r3
 8000a2c:	4550      	cmp	r0, sl
 8000a2e:	bf2c      	ite	cs
 8000a30:	2000      	movcs	r0, #0
 8000a32:	2001      	movcc	r0, #1
 8000a34:	007f      	lsls	r7, r7, #1
 8000a36:	f007 0702 	and.w	r7, r7, #2
 8000a3a:	f008 0801 	and.w	r8, r8, #1
 8000a3e:	ea47 0708 	orr.w	r7, r7, r8
 8000a42:	2f01      	cmp	r7, #1
 8000a44:	d03e      	beq.n	8000ac4 <__gnu_unwind_pr_common+0x10c>
 8000a46:	d335      	bcc.n	8000ab4 <__gnu_unwind_pr_common+0xfc>
 8000a48:	2f02      	cmp	r7, #2
 8000a4a:	d11c      	bne.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000a4c:	6823      	ldr	r3, [r4, #0]
 8000a4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a52:	9202      	str	r2, [sp, #8]
 8000a54:	f1bb 0f00 	cmp.w	fp, #0
 8000a58:	d176      	bne.n	8000b48 <__gnu_unwind_pr_common+0x190>
 8000a5a:	b128      	cbz	r0, 8000a68 <__gnu_unwind_pr_common+0xb0>
 8000a5c:	9903      	ldr	r1, [sp, #12]
 8000a5e:	2900      	cmp	r1, #0
 8000a60:	d07e      	beq.n	8000b60 <__gnu_unwind_pr_common+0x1a8>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	f000 80a6 	beq.w	8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db77      	blt.n	8000b5c <__gnu_unwind_pr_common+0x1a4>
 8000a6c:	9b02      	ldr	r3, [sp, #8]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a74:	e7c2      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000a76:	2300      	movs	r3, #0
 8000a78:	9301      	str	r3, [sp, #4]
 8000a7a:	2e02      	cmp	r6, #2
 8000a7c:	dd3e      	ble.n	8000afc <__gnu_unwind_pr_common+0x144>
 8000a7e:	f7ff fe17 	bl	80006b0 <__gnu_unwind_24bit.isra.1>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d040      	beq.n	8000b08 <__gnu_unwind_pr_common+0x150>
 8000a86:	2009      	movs	r0, #9
 8000a88:	b00b      	add	sp, #44	; 0x2c
 8000a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a8e:	2000      	movs	r0, #0
 8000a90:	e7d0      	b.n	8000a34 <__gnu_unwind_pr_common+0x7c>
 8000a92:	6867      	ldr	r7, [r4, #4]
 8000a94:	3408      	adds	r4, #8
 8000a96:	e7bc      	b.n	8000a12 <__gnu_unwind_pr_common+0x5a>
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	dca3      	bgt.n	80009e4 <__gnu_unwind_pr_common+0x2c>
 8000a9c:	0c0b      	lsrs	r3, r1, #16
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	0409      	lsls	r1, r1, #16
 8000aa2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000aac:	9107      	str	r1, [sp, #28]
 8000aae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000ab2:	e797      	b.n	80009e4 <__gnu_unwind_pr_common+0x2c>
 8000ab4:	f1bb 0f00 	cmp.w	fp, #0
 8000ab8:	d002      	beq.n	8000ac0 <__gnu_unwind_pr_common+0x108>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	f040 80bd 	bne.w	8000c3a <__gnu_unwind_pr_common+0x282>
 8000ac0:	3404      	adds	r4, #4
 8000ac2:	e79b      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000ac4:	f1bb 0f00 	cmp.w	fp, #0
 8000ac8:	d125      	bne.n	8000b16 <__gnu_unwind_pr_common+0x15e>
 8000aca:	b1a8      	cbz	r0, 8000af8 <__gnu_unwind_pr_common+0x140>
 8000acc:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000ad0:	1c99      	adds	r1, r3, #2
 8000ad2:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000ad6:	d0d6      	beq.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000ad8:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000adc:	3301      	adds	r3, #1
 8000ade:	9106      	str	r1, [sp, #24]
 8000ae0:	f000 80a3 	beq.w	8000c2a <__gnu_unwind_pr_common+0x272>
 8000ae4:	1d20      	adds	r0, r4, #4
 8000ae6:	f7ff fddd 	bl	80006a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000aea:	ab06      	add	r3, sp, #24
 8000aec:	4601      	mov	r1, r0
 8000aee:	4628      	mov	r0, r5
 8000af0:	f3af 8000 	nop.w
 8000af4:	2800      	cmp	r0, #0
 8000af6:	d177      	bne.n	8000be8 <__gnu_unwind_pr_common+0x230>
 8000af8:	3408      	adds	r4, #8
 8000afa:	e77f      	b.n	80009fc <__gnu_unwind_pr_common+0x44>
 8000afc:	a907      	add	r1, sp, #28
 8000afe:	4648      	mov	r0, r9
 8000b00:	f000 faee 	bl	80010e0 <__gnu_unwind_execute>
 8000b04:	2800      	cmp	r0, #0
 8000b06:	d1be      	bne.n	8000a86 <__gnu_unwind_pr_common+0xce>
 8000b08:	9b01      	ldr	r3, [sp, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d15c      	bne.n	8000bc8 <__gnu_unwind_pr_common+0x210>
 8000b0e:	2008      	movs	r0, #8
 8000b10:	b00b      	add	sp, #44	; 0x2c
 8000b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b16:	210d      	movs	r1, #13
 8000b18:	4648      	mov	r0, r9
 8000b1a:	6a2f      	ldr	r7, [r5, #32]
 8000b1c:	f7ff fee0 	bl	80008e0 <_Unwind_GetGR>
 8000b20:	4287      	cmp	r7, r0
 8000b22:	d1e9      	bne.n	8000af8 <__gnu_unwind_pr_common+0x140>
 8000b24:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b26:	429c      	cmp	r4, r3
 8000b28:	d1e6      	bne.n	8000af8 <__gnu_unwind_pr_common+0x140>
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff fcf0 	bl	8000510 <selfrel_offset31>
 8000b30:	210f      	movs	r1, #15
 8000b32:	4602      	mov	r2, r0
 8000b34:	4648      	mov	r0, r9
 8000b36:	f7ff fef9 	bl	800092c <_Unwind_SetGR>
 8000b3a:	4648      	mov	r0, r9
 8000b3c:	462a      	mov	r2, r5
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f7ff fef4 	bl	800092c <_Unwind_SetGR>
 8000b44:	2007      	movs	r0, #7
 8000b46:	e79f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000b48:	210d      	movs	r1, #13
 8000b4a:	4648      	mov	r0, r9
 8000b4c:	6a2f      	ldr	r7, [r5, #32]
 8000b4e:	f7ff fec7 	bl	80008e0 <_Unwind_GetGR>
 8000b52:	4287      	cmp	r7, r0
 8000b54:	d058      	beq.n	8000c08 <__gnu_unwind_pr_common+0x250>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da87      	bge.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000b5c:	3404      	adds	r4, #4
 8000b5e:	e785      	b.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000b60:	9b02      	ldr	r3, [sp, #8]
 8000b62:	b33b      	cbz	r3, 8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000b64:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b68:	1d27      	adds	r7, r4, #4
 8000b6a:	f8cd b010 	str.w	fp, [sp, #16]
 8000b6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b72:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b76:	9605      	str	r6, [sp, #20]
 8000b78:	46a3      	mov	fp, r4
 8000b7a:	461c      	mov	r4, r3
 8000b7c:	e002      	b.n	8000b84 <__gnu_unwind_pr_common+0x1cc>
 8000b7e:	45b2      	cmp	sl, r6
 8000b80:	46b0      	mov	r8, r6
 8000b82:	d016      	beq.n	8000bb2 <__gnu_unwind_pr_common+0x1fa>
 8000b84:	4638      	mov	r0, r7
 8000b86:	9406      	str	r4, [sp, #24]
 8000b88:	f7ff fd8c 	bl	80006a4 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b8c:	ab06      	add	r3, sp, #24
 8000b8e:	4601      	mov	r1, r0
 8000b90:	2200      	movs	r2, #0
 8000b92:	4628      	mov	r0, r5
 8000b94:	f3af 8000 	nop.w
 8000b98:	f108 0601 	add.w	r6, r8, #1
 8000b9c:	3704      	adds	r7, #4
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	d0ed      	beq.n	8000b7e <__gnu_unwind_pr_common+0x1c6>
 8000ba2:	9b02      	ldr	r3, [sp, #8]
 8000ba4:	9e05      	ldr	r6, [sp, #20]
 8000ba6:	4543      	cmp	r3, r8
 8000ba8:	465c      	mov	r4, fp
 8000baa:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000bae:	d1d2      	bne.n	8000b56 <__gnu_unwind_pr_common+0x19e>
 8000bb0:	e000      	b.n	8000bb4 <__gnu_unwind_pr_common+0x1fc>
 8000bb2:	465c      	mov	r4, fp
 8000bb4:	4648      	mov	r0, r9
 8000bb6:	210d      	movs	r1, #13
 8000bb8:	f7ff fe92 	bl	80008e0 <_Unwind_GetGR>
 8000bbc:	9b06      	ldr	r3, [sp, #24]
 8000bbe:	6228      	str	r0, [r5, #32]
 8000bc0:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bc2:	626b      	str	r3, [r5, #36]	; 0x24
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	e75f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000bc8:	210f      	movs	r1, #15
 8000bca:	4648      	mov	r0, r9
 8000bcc:	f7ff fe88 	bl	80008e0 <_Unwind_GetGR>
 8000bd0:	210e      	movs	r1, #14
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	4648      	mov	r0, r9
 8000bd6:	f7ff fea9 	bl	800092c <_Unwind_SetGR>
 8000bda:	4648      	mov	r0, r9
 8000bdc:	4a29      	ldr	r2, [pc, #164]	; (8000c84 <__gnu_unwind_pr_common+0x2cc>)
 8000bde:	210f      	movs	r1, #15
 8000be0:	f7ff fea4 	bl	800092c <_Unwind_SetGR>
 8000be4:	2007      	movs	r0, #7
 8000be6:	e74f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000be8:	4607      	mov	r7, r0
 8000bea:	210d      	movs	r1, #13
 8000bec:	4648      	mov	r0, r9
 8000bee:	f7ff fe77 	bl	80008e0 <_Unwind_GetGR>
 8000bf2:	2f02      	cmp	r7, #2
 8000bf4:	6228      	str	r0, [r5, #32]
 8000bf6:	d11d      	bne.n	8000c34 <__gnu_unwind_pr_common+0x27c>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	9a06      	ldr	r2, [sp, #24]
 8000bfc:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c00:	626b      	str	r3, [r5, #36]	; 0x24
 8000c02:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c04:	2006      	movs	r0, #6
 8000c06:	e73f      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c08:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c0a:	429c      	cmp	r4, r3
 8000c0c:	d1a3      	bne.n	8000b56 <__gnu_unwind_pr_common+0x19e>
 8000c0e:	2204      	movs	r2, #4
 8000c10:	2700      	movs	r7, #0
 8000c12:	18a3      	adds	r3, r4, r2
 8000c14:	9902      	ldr	r1, [sp, #8]
 8000c16:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c18:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c1a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c1c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	42bb      	cmp	r3, r7
 8000c22:	db1d      	blt.n	8000c60 <__gnu_unwind_pr_common+0x2a8>
 8000c24:	2301      	movs	r3, #1
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	e720      	b.n	8000a6c <__gnu_unwind_pr_common+0xb4>
 8000c2a:	4648      	mov	r0, r9
 8000c2c:	210d      	movs	r1, #13
 8000c2e:	f7ff fe57 	bl	80008e0 <_Unwind_GetGR>
 8000c32:	6228      	str	r0, [r5, #32]
 8000c34:	9b06      	ldr	r3, [sp, #24]
 8000c36:	626b      	str	r3, [r5, #36]	; 0x24
 8000c38:	e7e3      	b.n	8000c02 <__gnu_unwind_pr_common+0x24a>
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f7ff fc68 	bl	8000510 <selfrel_offset31>
 8000c40:	3404      	adds	r4, #4
 8000c42:	4606      	mov	r6, r0
 8000c44:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c46:	4628      	mov	r0, r5
 8000c48:	f3af 8000 	nop.w
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	f43f af1a 	beq.w	8000a86 <__gnu_unwind_pr_common+0xce>
 8000c52:	4648      	mov	r0, r9
 8000c54:	4632      	mov	r2, r6
 8000c56:	210f      	movs	r1, #15
 8000c58:	f7ff fe68 	bl	800092c <_Unwind_SetGR>
 8000c5c:	2007      	movs	r0, #7
 8000c5e:	e713      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c60:	4608      	mov	r0, r1
 8000c62:	3001      	adds	r0, #1
 8000c64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c68:	f7ff fc52 	bl	8000510 <selfrel_offset31>
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	4602      	mov	r2, r0
 8000c70:	4648      	mov	r0, r9
 8000c72:	f7ff fe5b 	bl	800092c <_Unwind_SetGR>
 8000c76:	4648      	mov	r0, r9
 8000c78:	462a      	mov	r2, r5
 8000c7a:	4639      	mov	r1, r7
 8000c7c:	f7ff fe56 	bl	800092c <_Unwind_SetGR>
 8000c80:	2007      	movs	r0, #7
 8000c82:	e701      	b.n	8000a88 <__gnu_unwind_pr_common+0xd0>
 8000c84:	00000000 	.word	0x00000000

08000c88 <__aeabi_unwind_cpp_pr0>:
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e695      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c8c <__aeabi_unwind_cpp_pr1>:
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e693      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c90 <__aeabi_unwind_cpp_pr2>:
 8000c90:	2302      	movs	r3, #2
 8000c92:	e691      	b.n	80009b8 <__gnu_unwind_pr_common>

08000c94 <_Unwind_VRS_Pop>:
 8000c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c96:	4604      	mov	r4, r0
 8000c98:	b0c5      	sub	sp, #276	; 0x114
 8000c9a:	2904      	cmp	r1, #4
 8000c9c:	d80d      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000c9e:	e8df f001 	tbb	[pc, r1]
 8000ca2:	0353      	.short	0x0353
 8000ca4:	310c      	.short	0x310c
 8000ca6:	0f          	.byte	0x0f
 8000ca7:	00          	.byte	0x00
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000cae:	b295      	uxth	r5, r2
 8000cb0:	d162      	bne.n	8000d78 <_Unwind_VRS_Pop+0xe4>
 8000cb2:	1972      	adds	r2, r6, r5
 8000cb4:	2a10      	cmp	r2, #16
 8000cb6:	f240 809b 	bls.w	8000df0 <_Unwind_VRS_Pop+0x15c>
 8000cba:	2002      	movs	r0, #2
 8000cbc:	b045      	add	sp, #276	; 0x114
 8000cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1fa      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000cc4:	2a10      	cmp	r2, #16
 8000cc6:	d8f8      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000cc8:	6823      	ldr	r3, [r4, #0]
 8000cca:	06d8      	lsls	r0, r3, #27
 8000ccc:	f100 80c6 	bmi.w	8000e5c <_Unwind_VRS_Pop+0x1c8>
 8000cd0:	ae22      	add	r6, sp, #136	; 0x88
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	9201      	str	r2, [sp, #4]
 8000cd6:	f000 f973 	bl	8000fc0 <__gnu_Unwind_Save_WMMXC>
 8000cda:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000cdc:	9a01      	ldr	r2, [sp, #4]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2501      	movs	r5, #1
 8000ce2:	fa05 f103 	lsl.w	r1, r5, r3
 8000ce6:	4211      	tst	r1, r2
 8000ce8:	d003      	beq.n	8000cf2 <_Unwind_VRS_Pop+0x5e>
 8000cea:	6801      	ldr	r1, [r0, #0]
 8000cec:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cf0:	3004      	adds	r0, #4
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d1f4      	bne.n	8000ce2 <_Unwind_VRS_Pop+0x4e>
 8000cf8:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f000 f956 	bl	8000fac <__gnu_Unwind_Restore_WMMXC>
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7db      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	d1d8      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d08:	0c15      	lsrs	r5, r2, #16
 8000d0a:	b297      	uxth	r7, r2
 8000d0c:	19eb      	adds	r3, r5, r7
 8000d0e:	2b10      	cmp	r3, #16
 8000d10:	d8d3      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	071e      	lsls	r6, r3, #28
 8000d16:	f100 80b5 	bmi.w	8000e84 <_Unwind_VRS_Pop+0x1f0>
 8000d1a:	ae22      	add	r6, sp, #136	; 0x88
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f923 	bl	8000f68 <__gnu_Unwind_Save_WMMXD>
 8000d22:	00ed      	lsls	r5, r5, #3
 8000d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d26:	b14f      	cbz	r7, 8000d3c <_Unwind_VRS_Pop+0xa8>
 8000d28:	3d04      	subs	r5, #4
 8000d2a:	1971      	adds	r1, r6, r5
 8000d2c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d30:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d34:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d38:	4283      	cmp	r3, r0
 8000d3a:	d1f9      	bne.n	8000d30 <_Unwind_VRS_Pop+0x9c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d40:	f000 f8f0 	bl	8000f24 <__gnu_Unwind_Restore_WMMXD>
 8000d44:	2000      	movs	r0, #0
 8000d46:	e7b9      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1b6      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d4c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d4e:	b297      	uxth	r7, r2
 8000d50:	1d20      	adds	r0, r4, #4
 8000d52:	2601      	movs	r6, #1
 8000d54:	fa06 f103 	lsl.w	r1, r6, r3
 8000d58:	4239      	tst	r1, r7
 8000d5a:	f103 0301 	add.w	r3, r3, #1
 8000d5e:	d002      	beq.n	8000d66 <_Unwind_VRS_Pop+0xd2>
 8000d60:	6829      	ldr	r1, [r5, #0]
 8000d62:	6001      	str	r1, [r0, #0]
 8000d64:	3504      	adds	r5, #4
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	f100 0004 	add.w	r0, r0, #4
 8000d6c:	d1f2      	bne.n	8000d54 <_Unwind_VRS_Pop+0xc0>
 8000d6e:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d72:	d13b      	bne.n	8000dec <_Unwind_VRS_Pop+0x158>
 8000d74:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d76:	e7a1      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000d78:	2b05      	cmp	r3, #5
 8000d7a:	d19e      	bne.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d7c:	1977      	adds	r7, r6, r5
 8000d7e:	2f20      	cmp	r7, #32
 8000d80:	d89b      	bhi.n	8000cba <_Unwind_VRS_Pop+0x26>
 8000d82:	2e0f      	cmp	r6, #15
 8000d84:	d966      	bls.n	8000e54 <_Unwind_VRS_Pop+0x1c0>
 8000d86:	462f      	mov	r7, r5
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d13a      	bne.n	8000e02 <_Unwind_VRS_Pop+0x16e>
 8000d8c:	462a      	mov	r2, r5
 8000d8e:	2700      	movs	r7, #0
 8000d90:	2a00      	cmp	r2, #0
 8000d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d94:	dd72      	ble.n	8000e7c <_Unwind_VRS_Pop+0x1e8>
 8000d96:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	a844      	add	r0, sp, #272	; 0x110
 8000d9e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000da2:	388c      	subs	r0, #140	; 0x8c
 8000da4:	f851 5b04 	ldr.w	r5, [r1], #4
 8000da8:	f840 5f04 	str.w	r5, [r0, #4]!
 8000dac:	4291      	cmp	r1, r2
 8000dae:	d1f9      	bne.n	8000da4 <_Unwind_VRS_Pop+0x110>
 8000db0:	4608      	mov	r0, r1
 8000db2:	b197      	cbz	r7, 8000dda <_Unwind_VRS_Pop+0x146>
 8000db4:	2e10      	cmp	r6, #16
 8000db6:	4632      	mov	r2, r6
 8000db8:	a944      	add	r1, sp, #272	; 0x110
 8000dba:	bf38      	it	cc
 8000dbc:	2210      	movcc	r2, #16
 8000dbe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000dc2:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000dc6:	0079      	lsls	r1, r7, #1
 8000dc8:	3a04      	subs	r2, #4
 8000dca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000dce:	f850 5b04 	ldr.w	r5, [r0], #4
 8000dd2:	f842 5f04 	str.w	r5, [r2, #4]!
 8000dd6:	4288      	cmp	r0, r1
 8000dd8:	d1f9      	bne.n	8000dce <_Unwind_VRS_Pop+0x13a>
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d048      	beq.n	8000e70 <_Unwind_VRS_Pop+0x1dc>
 8000dde:	2e0f      	cmp	r6, #15
 8000de0:	63a1      	str	r1, [r4, #56]	; 0x38
 8000de2:	d933      	bls.n	8000e4c <_Unwind_VRS_Pop+0x1b8>
 8000de4:	b117      	cbz	r7, 8000dec <_Unwind_VRS_Pop+0x158>
 8000de6:	a802      	add	r0, sp, #8
 8000de8:	f000 f894 	bl	8000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000dec:	2000      	movs	r0, #0
 8000dee:	e765      	b.n	8000cbc <_Unwind_VRS_Pop+0x28>
 8000df0:	2e0f      	cmp	r6, #15
 8000df2:	f63f af62 	bhi.w	8000cba <_Unwind_VRS_Pop+0x26>
 8000df6:	2700      	movs	r7, #0
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	07d1      	lsls	r1, r2, #31
 8000dfc:	d417      	bmi.n	8000e2e <_Unwind_VRS_Pop+0x19a>
 8000dfe:	2f00      	cmp	r7, #0
 8000e00:	d060      	beq.n	8000ec4 <_Unwind_VRS_Pop+0x230>
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	0751      	lsls	r1, r2, #29
 8000e06:	d445      	bmi.n	8000e94 <_Unwind_VRS_Pop+0x200>
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d04d      	beq.n	8000ea8 <_Unwind_VRS_Pop+0x214>
 8000e0c:	2e0f      	cmp	r6, #15
 8000e0e:	d806      	bhi.n	8000e1e <_Unwind_VRS_Pop+0x18a>
 8000e10:	a822      	add	r0, sp, #136	; 0x88
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	f000 f87a 	bl	8000f0c <__gnu_Unwind_Save_VFP_D>
 8000e18:	9b01      	ldr	r3, [sp, #4]
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d0b6      	beq.n	8000d8c <_Unwind_VRS_Pop+0xf8>
 8000e1e:	a802      	add	r0, sp, #8
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	f000 f87b 	bl	8000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e26:	9b01      	ldr	r3, [sp, #4]
 8000e28:	f1c6 0210 	rsb	r2, r6, #16
 8000e2c:	e7b0      	b.n	8000d90 <_Unwind_VRS_Pop+0xfc>
 8000e2e:	f022 0101 	bic.w	r1, r2, #1
 8000e32:	2b05      	cmp	r3, #5
 8000e34:	6021      	str	r1, [r4, #0]
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	4620      	mov	r0, r4
 8000e3a:	d03b      	beq.n	8000eb4 <_Unwind_VRS_Pop+0x220>
 8000e3c:	f022 0203 	bic.w	r2, r2, #3
 8000e40:	f840 2b48 	str.w	r2, [r0], #72
 8000e44:	f000 f85a 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000e48:	9b01      	ldr	r3, [sp, #4]
 8000e4a:	e7d8      	b.n	8000dfe <_Unwind_VRS_Pop+0x16a>
 8000e4c:	a822      	add	r0, sp, #136	; 0x88
 8000e4e:	f000 f859 	bl	8000f04 <__gnu_Unwind_Restore_VFP_D>
 8000e52:	e7c7      	b.n	8000de4 <_Unwind_VRS_Pop+0x150>
 8000e54:	2f10      	cmp	r7, #16
 8000e56:	d9ce      	bls.n	8000df6 <_Unwind_VRS_Pop+0x162>
 8000e58:	3f10      	subs	r7, #16
 8000e5a:	e7cd      	b.n	8000df8 <_Unwind_VRS_Pop+0x164>
 8000e5c:	f023 0310 	bic.w	r3, r3, #16
 8000e60:	6023      	str	r3, [r4, #0]
 8000e62:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e66:	9201      	str	r2, [sp, #4]
 8000e68:	f000 f8aa 	bl	8000fc0 <__gnu_Unwind_Save_WMMXC>
 8000e6c:	9a01      	ldr	r2, [sp, #4]
 8000e6e:	e72f      	b.n	8000cd0 <_Unwind_VRS_Pop+0x3c>
 8000e70:	3104      	adds	r1, #4
 8000e72:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	f000 f83d 	bl	8000ef4 <__gnu_Unwind_Restore_VFP>
 8000e7a:	e7b7      	b.n	8000dec <_Unwind_VRS_Pop+0x158>
 8000e7c:	2f00      	cmp	r7, #0
 8000e7e:	d199      	bne.n	8000db4 <_Unwind_VRS_Pop+0x120>
 8000e80:	4601      	mov	r1, r0
 8000e82:	e7aa      	b.n	8000dda <_Unwind_VRS_Pop+0x146>
 8000e84:	f023 0308 	bic.w	r3, r3, #8
 8000e88:	6023      	str	r3, [r4, #0]
 8000e8a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e8e:	f000 f86b 	bl	8000f68 <__gnu_Unwind_Save_WMMXD>
 8000e92:	e742      	b.n	8000d1a <_Unwind_VRS_Pop+0x86>
 8000e94:	4620      	mov	r0, r4
 8000e96:	f022 0204 	bic.w	r2, r2, #4
 8000e9a:	f840 2bd0 	str.w	r2, [r0], #208
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	f000 f83c 	bl	8000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ea4:	9b01      	ldr	r3, [sp, #4]
 8000ea6:	e7af      	b.n	8000e08 <_Unwind_VRS_Pop+0x174>
 8000ea8:	a822      	add	r0, sp, #136	; 0x88
 8000eaa:	9301      	str	r3, [sp, #4]
 8000eac:	f000 f826 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000eb0:	9b01      	ldr	r3, [sp, #4]
 8000eb2:	e7b9      	b.n	8000e28 <_Unwind_VRS_Pop+0x194>
 8000eb4:	f041 0102 	orr.w	r1, r1, #2
 8000eb8:	f840 1b48 	str.w	r1, [r0], #72
 8000ebc:	f000 f826 	bl	8000f0c <__gnu_Unwind_Save_VFP_D>
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	e79c      	b.n	8000dfe <_Unwind_VRS_Pop+0x16a>
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d003      	beq.n	8000ed0 <_Unwind_VRS_Pop+0x23c>
 8000ec8:	2e0f      	cmp	r6, #15
 8000eca:	f63f af5f 	bhi.w	8000d8c <_Unwind_VRS_Pop+0xf8>
 8000ece:	e79f      	b.n	8000e10 <_Unwind_VRS_Pop+0x17c>
 8000ed0:	a822      	add	r0, sp, #136	; 0x88
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f000 f812 	bl	8000efc <__gnu_Unwind_Save_VFP>
 8000ed8:	9b01      	ldr	r3, [sp, #4]
 8000eda:	e757      	b.n	8000d8c <_Unwind_VRS_Pop+0xf8>

08000edc <__restore_core_regs>:
 8000edc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000ee0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000ee4:	469c      	mov	ip, r3
 8000ee6:	46a6      	mov	lr, r4
 8000ee8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000eec:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ef0:	46e5      	mov	sp, ip
 8000ef2:	bd00      	pop	{pc}

08000ef4 <__gnu_Unwind_Restore_VFP>:
 8000ef4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <__gnu_Unwind_Save_VFP>:
 8000efc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <__gnu_Unwind_Restore_VFP_D>:
 8000f04:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop

08000f0c <__gnu_Unwind_Save_VFP_D>:
 8000f0c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f14:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f1c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <__gnu_Unwind_Restore_WMMXD>:
 8000f24:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f28:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f2c:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f30:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f34:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f38:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f3c:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f40:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f44:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f48:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f4c:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f50:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f54:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f58:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f5c:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f60:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_WMMXD>:
 8000f68:	ece0 0102 	stfe	f0, [r0], #8
 8000f6c:	ece0 1102 	stfe	f1, [r0], #8
 8000f70:	ece0 2102 	stfe	f2, [r0], #8
 8000f74:	ece0 3102 	stfe	f3, [r0], #8
 8000f78:	ece0 4102 	stfe	f4, [r0], #8
 8000f7c:	ece0 5102 	stfe	f5, [r0], #8
 8000f80:	ece0 6102 	stfe	f6, [r0], #8
 8000f84:	ece0 7102 	stfe	f7, [r0], #8
 8000f88:	ece0 8102 	stfp	f0, [r0], #8
 8000f8c:	ece0 9102 	stfp	f1, [r0], #8
 8000f90:	ece0 a102 	stfp	f2, [r0], #8
 8000f94:	ece0 b102 	stfp	f3, [r0], #8
 8000f98:	ece0 c102 	stfp	f4, [r0], #8
 8000f9c:	ece0 d102 	stfp	f5, [r0], #8
 8000fa0:	ece0 e102 	stfp	f6, [r0], #8
 8000fa4:	ece0 f102 	stfp	f7, [r0], #8
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <__gnu_Unwind_Restore_WMMXC>:
 8000fac:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fb0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fb4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fb8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <__gnu_Unwind_Save_WMMXC>:
 8000fc0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fc4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fc8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fcc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <_Unwind_RaiseException>:
 8000fd4:	46ec      	mov	ip, sp
 8000fd6:	b500      	push	{lr}
 8000fd8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fdc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fe0:	f04f 0300 	mov.w	r3, #0
 8000fe4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fe8:	a901      	add	r1, sp, #4
 8000fea:	f7ff fbf3 	bl	80007d4 <__gnu_Unwind_RaiseException>
 8000fee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ff2:	b012      	add	sp, #72	; 0x48
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <_Unwind_Resume>:
 8000ff8:	46ec      	mov	ip, sp
 8000ffa:	b500      	push	{lr}
 8000ffc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001000:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001004:	f04f 0300 	mov.w	r3, #0
 8001008:	e92d 000c 	stmdb	sp!, {r2, r3}
 800100c:	a901      	add	r1, sp, #4
 800100e:	f7ff fc1b 	bl	8000848 <__gnu_Unwind_Resume>
 8001012:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001016:	b012      	add	sp, #72	; 0x48
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <_Unwind_Resume_or_Rethrow>:
 800101c:	46ec      	mov	ip, sp
 800101e:	b500      	push	{lr}
 8001020:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001024:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001030:	a901      	add	r1, sp, #4
 8001032:	f7ff fc2b 	bl	800088c <__gnu_Unwind_Resume_or_Rethrow>
 8001036:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800103a:	b012      	add	sp, #72	; 0x48
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_ForcedUnwind>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	ab01      	add	r3, sp, #4
 8001056:	f7ff fbed 	bl	8000834 <__gnu_Unwind_ForcedUnwind>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Backtrace>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	aa01      	add	r2, sp, #4
 800107a:	f7ff fc65 	bl	8000948 <__gnu_Unwind_Backtrace>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <next_unwind_byte>:
 8001088:	7a02      	ldrb	r2, [r0, #8]
 800108a:	b91a      	cbnz	r2, 8001094 <next_unwind_byte+0xc>
 800108c:	7a43      	ldrb	r3, [r0, #9]
 800108e:	b943      	cbnz	r3, 80010a2 <next_unwind_byte+0x1a>
 8001090:	20b0      	movs	r0, #176	; 0xb0
 8001092:	4770      	bx	lr
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	3a01      	subs	r2, #1
 8001098:	7202      	strb	r2, [r0, #8]
 800109a:	021a      	lsls	r2, r3, #8
 800109c:	6002      	str	r2, [r0, #0]
 800109e:	0e18      	lsrs	r0, r3, #24
 80010a0:	4770      	bx	lr
 80010a2:	6842      	ldr	r2, [r0, #4]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b410      	push	{r4}
 80010a8:	7243      	strb	r3, [r0, #9]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	2103      	movs	r1, #3
 80010ae:	1d14      	adds	r4, r2, #4
 80010b0:	7201      	strb	r1, [r0, #8]
 80010b2:	021a      	lsls	r2, r3, #8
 80010b4:	6044      	str	r4, [r0, #4]
 80010b6:	6002      	str	r2, [r0, #0]
 80010b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010bc:	0e18      	lsrs	r0, r3, #24
 80010be:	4770      	bx	lr

080010c0 <_Unwind_GetGR.constprop.0>:
 80010c0:	b500      	push	{lr}
 80010c2:	b085      	sub	sp, #20
 80010c4:	aa03      	add	r2, sp, #12
 80010c6:	2300      	movs	r3, #0
 80010c8:	9200      	str	r2, [sp, #0]
 80010ca:	4619      	mov	r1, r3
 80010cc:	220c      	movs	r2, #12
 80010ce:	f7ff fbed 	bl	80008ac <_Unwind_VRS_Get>
 80010d2:	9803      	ldr	r0, [sp, #12]
 80010d4:	b005      	add	sp, #20
 80010d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80010da:	bf00      	nop

080010dc <unwind_UCB_from_context>:
 80010dc:	e7f0      	b.n	80010c0 <_Unwind_GetGR.constprop.0>
 80010de:	bf00      	nop

080010e0 <__gnu_unwind_execute>:
 80010e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e4:	4606      	mov	r6, r0
 80010e6:	b085      	sub	sp, #20
 80010e8:	460f      	mov	r7, r1
 80010ea:	f04f 0800 	mov.w	r8, #0
 80010ee:	4638      	mov	r0, r7
 80010f0:	f7ff ffca 	bl	8001088 <next_unwind_byte>
 80010f4:	28b0      	cmp	r0, #176	; 0xb0
 80010f6:	4604      	mov	r4, r0
 80010f8:	d023      	beq.n	8001142 <__gnu_unwind_execute+0x62>
 80010fa:	0605      	lsls	r5, r0, #24
 80010fc:	d427      	bmi.n	800114e <__gnu_unwind_execute+0x6e>
 80010fe:	2300      	movs	r3, #0
 8001100:	f10d 090c 	add.w	r9, sp, #12
 8001104:	4619      	mov	r1, r3
 8001106:	0085      	lsls	r5, r0, #2
 8001108:	220d      	movs	r2, #13
 800110a:	f8cd 9000 	str.w	r9, [sp]
 800110e:	4630      	mov	r0, r6
 8001110:	f7ff fbcc 	bl	80008ac <_Unwind_VRS_Get>
 8001114:	b2ed      	uxtb	r5, r5
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	f8cd 9000 	str.w	r9, [sp]
 800111c:	0660      	lsls	r0, r4, #25
 800111e:	f105 0504 	add.w	r5, r5, #4
 8001122:	bf4c      	ite	mi
 8001124:	1b5d      	submi	r5, r3, r5
 8001126:	18ed      	addpl	r5, r5, r3
 8001128:	2300      	movs	r3, #0
 800112a:	4619      	mov	r1, r3
 800112c:	220d      	movs	r2, #13
 800112e:	4630      	mov	r0, r6
 8001130:	9503      	str	r5, [sp, #12]
 8001132:	f7ff fbe1 	bl	80008f8 <_Unwind_VRS_Set>
 8001136:	4638      	mov	r0, r7
 8001138:	f7ff ffa6 	bl	8001088 <next_unwind_byte>
 800113c:	28b0      	cmp	r0, #176	; 0xb0
 800113e:	4604      	mov	r4, r0
 8001140:	d1db      	bne.n	80010fa <__gnu_unwind_execute+0x1a>
 8001142:	f1b8 0f00 	cmp.w	r8, #0
 8001146:	f000 8095 	beq.w	8001274 <__gnu_unwind_execute+0x194>
 800114a:	2000      	movs	r0, #0
 800114c:	e01c      	b.n	8001188 <__gnu_unwind_execute+0xa8>
 800114e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001152:	2b80      	cmp	r3, #128	; 0x80
 8001154:	d05d      	beq.n	8001212 <__gnu_unwind_execute+0x132>
 8001156:	2b90      	cmp	r3, #144	; 0x90
 8001158:	d019      	beq.n	800118e <__gnu_unwind_execute+0xae>
 800115a:	2ba0      	cmp	r3, #160	; 0xa0
 800115c:	d02c      	beq.n	80011b8 <__gnu_unwind_execute+0xd8>
 800115e:	2bb0      	cmp	r3, #176	; 0xb0
 8001160:	d03f      	beq.n	80011e2 <__gnu_unwind_execute+0x102>
 8001162:	2bc0      	cmp	r3, #192	; 0xc0
 8001164:	d06c      	beq.n	8001240 <__gnu_unwind_execute+0x160>
 8001166:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800116a:	2bd0      	cmp	r3, #208	; 0xd0
 800116c:	d10b      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 800116e:	f000 0207 	and.w	r2, r0, #7
 8001172:	3201      	adds	r2, #1
 8001174:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001178:	2305      	movs	r3, #5
 800117a:	2101      	movs	r1, #1
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff fd89 	bl	8000c94 <_Unwind_VRS_Pop>
 8001182:	2800      	cmp	r0, #0
 8001184:	d0b3      	beq.n	80010ee <__gnu_unwind_execute+0xe>
 8001186:	2009      	movs	r0, #9
 8001188:	b005      	add	sp, #20
 800118a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800118e:	f000 030d 	and.w	r3, r0, #13
 8001192:	2b0d      	cmp	r3, #13
 8001194:	d0f7      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 8001196:	ad03      	add	r5, sp, #12
 8001198:	2300      	movs	r3, #0
 800119a:	f000 020f 	and.w	r2, r0, #15
 800119e:	4619      	mov	r1, r3
 80011a0:	9500      	str	r5, [sp, #0]
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff fb82 	bl	80008ac <_Unwind_VRS_Get>
 80011a8:	2300      	movs	r3, #0
 80011aa:	9500      	str	r5, [sp, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	220d      	movs	r2, #13
 80011b0:	4630      	mov	r0, r6
 80011b2:	f7ff fba1 	bl	80008f8 <_Unwind_VRS_Set>
 80011b6:	e79a      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80011b8:	43c2      	mvns	r2, r0
 80011ba:	f002 0307 	and.w	r3, r2, #7
 80011be:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 80011c2:	411a      	asrs	r2, r3
 80011c4:	0701      	lsls	r1, r0, #28
 80011c6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 80011ca:	f04f 0300 	mov.w	r3, #0
 80011ce:	bf48      	it	mi
 80011d0:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011d4:	4619      	mov	r1, r3
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7ff fd5c 	bl	8000c94 <_Unwind_VRS_Pop>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d1d2      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 80011e0:	e785      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80011e2:	28b1      	cmp	r0, #177	; 0xb1
 80011e4:	d057      	beq.n	8001296 <__gnu_unwind_execute+0x1b6>
 80011e6:	28b2      	cmp	r0, #178	; 0xb2
 80011e8:	d068      	beq.n	80012bc <__gnu_unwind_execute+0x1dc>
 80011ea:	28b3      	cmp	r0, #179	; 0xb3
 80011ec:	f000 8095 	beq.w	800131a <__gnu_unwind_execute+0x23a>
 80011f0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011f4:	2bb4      	cmp	r3, #180	; 0xb4
 80011f6:	d0c6      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 80011f8:	f000 0207 	and.w	r2, r0, #7
 80011fc:	3201      	adds	r2, #1
 80011fe:	2301      	movs	r3, #1
 8001200:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001204:	4619      	mov	r1, r3
 8001206:	4630      	mov	r0, r6
 8001208:	f7ff fd44 	bl	8000c94 <_Unwind_VRS_Pop>
 800120c:	2800      	cmp	r0, #0
 800120e:	d1ba      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 8001210:	e76d      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001212:	4638      	mov	r0, r7
 8001214:	f7ff ff38 	bl	8001088 <next_unwind_byte>
 8001218:	0224      	lsls	r4, r4, #8
 800121a:	4304      	orrs	r4, r0
 800121c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001220:	d0b1      	beq.n	8001186 <__gnu_unwind_execute+0xa6>
 8001222:	0124      	lsls	r4, r4, #4
 8001224:	2300      	movs	r3, #0
 8001226:	b2a2      	uxth	r2, r4
 8001228:	4619      	mov	r1, r3
 800122a:	4630      	mov	r0, r6
 800122c:	f7ff fd32 	bl	8000c94 <_Unwind_VRS_Pop>
 8001230:	2800      	cmp	r0, #0
 8001232:	d1a8      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 8001234:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001238:	bf18      	it	ne
 800123a:	f04f 0801 	movne.w	r8, #1
 800123e:	e756      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001240:	28c6      	cmp	r0, #198	; 0xc6
 8001242:	d07d      	beq.n	8001340 <__gnu_unwind_execute+0x260>
 8001244:	28c7      	cmp	r0, #199	; 0xc7
 8001246:	f000 8086 	beq.w	8001356 <__gnu_unwind_execute+0x276>
 800124a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800124e:	2bc0      	cmp	r3, #192	; 0xc0
 8001250:	f000 8094 	beq.w	800137c <__gnu_unwind_execute+0x29c>
 8001254:	28c8      	cmp	r0, #200	; 0xc8
 8001256:	f000 809f 	beq.w	8001398 <__gnu_unwind_execute+0x2b8>
 800125a:	28c9      	cmp	r0, #201	; 0xc9
 800125c:	d193      	bne.n	8001186 <__gnu_unwind_execute+0xa6>
 800125e:	4638      	mov	r0, r7
 8001260:	f7ff ff12 	bl	8001088 <next_unwind_byte>
 8001264:	0302      	lsls	r2, r0, #12
 8001266:	f000 000f 	and.w	r0, r0, #15
 800126a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800126e:	3001      	adds	r0, #1
 8001270:	4302      	orrs	r2, r0
 8001272:	e781      	b.n	8001178 <__gnu_unwind_execute+0x98>
 8001274:	ac03      	add	r4, sp, #12
 8001276:	4643      	mov	r3, r8
 8001278:	220e      	movs	r2, #14
 800127a:	4641      	mov	r1, r8
 800127c:	9400      	str	r4, [sp, #0]
 800127e:	4630      	mov	r0, r6
 8001280:	f7ff fb14 	bl	80008ac <_Unwind_VRS_Get>
 8001284:	9400      	str	r4, [sp, #0]
 8001286:	4630      	mov	r0, r6
 8001288:	4643      	mov	r3, r8
 800128a:	220f      	movs	r2, #15
 800128c:	4641      	mov	r1, r8
 800128e:	f7ff fb33 	bl	80008f8 <_Unwind_VRS_Set>
 8001292:	4640      	mov	r0, r8
 8001294:	e778      	b.n	8001188 <__gnu_unwind_execute+0xa8>
 8001296:	4638      	mov	r0, r7
 8001298:	f7ff fef6 	bl	8001088 <next_unwind_byte>
 800129c:	2800      	cmp	r0, #0
 800129e:	f43f af72 	beq.w	8001186 <__gnu_unwind_execute+0xa6>
 80012a2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012a6:	f47f af6e 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4619      	mov	r1, r3
 80012ae:	4630      	mov	r0, r6
 80012b0:	f7ff fcf0 	bl	8000c94 <_Unwind_VRS_Pop>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	f47f af66 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 80012ba:	e718      	b.n	80010ee <__gnu_unwind_execute+0xe>
 80012bc:	2300      	movs	r3, #0
 80012be:	f10d 090c 	add.w	r9, sp, #12
 80012c2:	220d      	movs	r2, #13
 80012c4:	4619      	mov	r1, r3
 80012c6:	f8cd 9000 	str.w	r9, [sp]
 80012ca:	4630      	mov	r0, r6
 80012cc:	f7ff faee 	bl	80008ac <_Unwind_VRS_Get>
 80012d0:	4638      	mov	r0, r7
 80012d2:	f7ff fed9 	bl	8001088 <next_unwind_byte>
 80012d6:	0602      	lsls	r2, r0, #24
 80012d8:	f04f 0402 	mov.w	r4, #2
 80012dc:	d50c      	bpl.n	80012f8 <__gnu_unwind_execute+0x218>
 80012de:	9b03      	ldr	r3, [sp, #12]
 80012e0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012e4:	40a0      	lsls	r0, r4
 80012e6:	4403      	add	r3, r0
 80012e8:	4638      	mov	r0, r7
 80012ea:	9303      	str	r3, [sp, #12]
 80012ec:	f7ff fecc 	bl	8001088 <next_unwind_byte>
 80012f0:	0603      	lsls	r3, r0, #24
 80012f2:	f104 0407 	add.w	r4, r4, #7
 80012f6:	d4f2      	bmi.n	80012de <__gnu_unwind_execute+0x1fe>
 80012f8:	9b03      	ldr	r3, [sp, #12]
 80012fa:	f8cd 9000 	str.w	r9, [sp]
 80012fe:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001302:	40a2      	lsls	r2, r4
 8001304:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001308:	2300      	movs	r3, #0
 800130a:	4414      	add	r4, r2
 800130c:	4619      	mov	r1, r3
 800130e:	220d      	movs	r2, #13
 8001310:	4630      	mov	r0, r6
 8001312:	9403      	str	r4, [sp, #12]
 8001314:	f7ff faf0 	bl	80008f8 <_Unwind_VRS_Set>
 8001318:	e6e9      	b.n	80010ee <__gnu_unwind_execute+0xe>
 800131a:	4638      	mov	r0, r7
 800131c:	f7ff feb4 	bl	8001088 <next_unwind_byte>
 8001320:	0301      	lsls	r1, r0, #12
 8001322:	f000 000f 	and.w	r0, r0, #15
 8001326:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800132a:	1c42      	adds	r2, r0, #1
 800132c:	2301      	movs	r3, #1
 800132e:	430a      	orrs	r2, r1
 8001330:	4630      	mov	r0, r6
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fcae 	bl	8000c94 <_Unwind_VRS_Pop>
 8001338:	2800      	cmp	r0, #0
 800133a:	f47f af24 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800133e:	e6d6      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001340:	4638      	mov	r0, r7
 8001342:	f7ff fea1 	bl	8001088 <next_unwind_byte>
 8001346:	0301      	lsls	r1, r0, #12
 8001348:	f000 000f 	and.w	r0, r0, #15
 800134c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001350:	1c42      	adds	r2, r0, #1
 8001352:	2303      	movs	r3, #3
 8001354:	e7eb      	b.n	800132e <__gnu_unwind_execute+0x24e>
 8001356:	4638      	mov	r0, r7
 8001358:	f7ff fe96 	bl	8001088 <next_unwind_byte>
 800135c:	2800      	cmp	r0, #0
 800135e:	f43f af12 	beq.w	8001186 <__gnu_unwind_execute+0xa6>
 8001362:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001366:	f47f af0e 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800136a:	4602      	mov	r2, r0
 800136c:	2104      	movs	r1, #4
 800136e:	4630      	mov	r0, r6
 8001370:	f7ff fc90 	bl	8000c94 <_Unwind_VRS_Pop>
 8001374:	2800      	cmp	r0, #0
 8001376:	f47f af06 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 800137a:	e6b8      	b.n	80010ee <__gnu_unwind_execute+0xe>
 800137c:	f000 020f 	and.w	r2, r0, #15
 8001380:	3201      	adds	r2, #1
 8001382:	2303      	movs	r3, #3
 8001384:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001388:	4619      	mov	r1, r3
 800138a:	4630      	mov	r0, r6
 800138c:	f7ff fc82 	bl	8000c94 <_Unwind_VRS_Pop>
 8001390:	2800      	cmp	r0, #0
 8001392:	f47f aef8 	bne.w	8001186 <__gnu_unwind_execute+0xa6>
 8001396:	e6aa      	b.n	80010ee <__gnu_unwind_execute+0xe>
 8001398:	4638      	mov	r0, r7
 800139a:	f7ff fe75 	bl	8001088 <next_unwind_byte>
 800139e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80013a2:	f000 030f 	and.w	r3, r0, #15
 80013a6:	3210      	adds	r2, #16
 80013a8:	3301      	adds	r3, #1
 80013aa:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 80013ae:	e6e3      	b.n	8001178 <__gnu_unwind_execute+0x98>

080013b0 <__gnu_unwind_frame>:
 80013b0:	b510      	push	{r4, lr}
 80013b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013b4:	b084      	sub	sp, #16
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	2003      	movs	r0, #3
 80013ba:	f88d 000c 	strb.w	r0, [sp, #12]
 80013be:	79dc      	ldrb	r4, [r3, #7]
 80013c0:	f88d 400d 	strb.w	r4, [sp, #13]
 80013c4:	0212      	lsls	r2, r2, #8
 80013c6:	3308      	adds	r3, #8
 80013c8:	4608      	mov	r0, r1
 80013ca:	a901      	add	r1, sp, #4
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	f7ff fe86 	bl	80010e0 <__gnu_unwind_execute>
 80013d4:	b004      	add	sp, #16
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <_Unwind_GetRegionStart>:
 80013d8:	b508      	push	{r3, lr}
 80013da:	f7ff fe7f 	bl	80010dc <unwind_UCB_from_context>
 80013de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop

080013e4 <_Unwind_GetLanguageSpecificData>:
 80013e4:	b508      	push	{r3, lr}
 80013e6:	f7ff fe79 	bl	80010dc <unwind_UCB_from_context>
 80013ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013ec:	79c3      	ldrb	r3, [r0, #7]
 80013ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013f2:	3008      	adds	r0, #8
 80013f4:	bd08      	pop	{r3, pc}
 80013f6:	bf00      	nop

080013f8 <_Unwind_GetTextRelBase>:
 80013f8:	b508      	push	{r3, lr}
 80013fa:	f002 f9cd 	bl	8003798 <abort>
 80013fe:	bf00      	nop

08001400 <_Unwind_GetDataRelBase>:
 8001400:	b508      	push	{r3, lr}
 8001402:	f7ff fff9 	bl	80013f8 <_Unwind_GetTextRelBase>
 8001406:	bf00      	nop

08001408 <__aeabi_idiv0>:
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop

0800140c <MX_CAN2_Init>:

CAN_HandleTypeDef hcan2;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800140c:	b508      	push	{r3, lr}

  hcan2.Instance = CAN2;
 800140e:	480c      	ldr	r0, [pc, #48]	; (8001440 <MX_CAN2_Init+0x34>)
  hcan2.Init.Prescaler = 16;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_CAN2_Init+0x38>)
 8001412:	f04f 0e10 	mov.w	lr, #16
 8001416:	e880 4008 	stmia.w	r0, {r3, lr}
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800141a:	2300      	movs	r3, #0
 800141c:	6083      	str	r3, [r0, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800141e:	60c3      	str	r3, [r0, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001420:	6103      	str	r3, [r0, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001422:	6143      	str	r3, [r0, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001424:	7603      	strb	r3, [r0, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001426:	7643      	strb	r3, [r0, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001428:	7683      	strb	r3, [r0, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800142a:	76c3      	strb	r3, [r0, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800142c:	7703      	strb	r3, [r0, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800142e:	7743      	strb	r3, [r0, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001430:	f000 fdec 	bl	800200c <HAL_CAN_Init>
 8001434:	b118      	cbz	r0, 800143e <MX_CAN2_Init+0x32>
  {
    Error_Handler();
  }

}
 8001436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800143a:	f000 baf1 	b.w	8001a20 <Error_Handler>
 800143e:	bd08      	pop	{r3, pc}
 8001440:	2000a03c 	.word	0x2000a03c
 8001444:	40006800 	.word	0x40006800

08001448 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001448:	b510      	push	{r4, lr}
 800144a:	4604      	mov	r4, r0
 800144c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144e:	2214      	movs	r2, #20
 8001450:	2100      	movs	r1, #0
 8001452:	a803      	add	r0, sp, #12
 8001454:	f002 f998 	bl	8003788 <memset>
  if(canHandle->Instance==CAN2)
 8001458:	6822      	ldr	r2, [r4, #0]
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <HAL_CAN_MspInit+0x98>)
 800145c:	429a      	cmp	r2, r3
 800145e:	d13d      	bne.n	80014dc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001460:	f503 33e8 	add.w	r3, r3, #118784	; 0x1d000
 8001464:	2400      	movs	r4, #0
 8001466:	9400      	str	r4, [sp, #0]
 8001468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	481e      	ldr	r0, [pc, #120]	; (80014e4 <HAL_CAN_MspInit+0x9c>)
    __HAL_RCC_CAN2_CLK_ENABLE();
 800146c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
 8001472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001474:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8001478:	9200      	str	r2, [sp, #0]
 800147a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800147c:	9401      	str	r4, [sp, #4]
 800147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001480:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001484:	641a      	str	r2, [r3, #64]	; 0x40
 8001486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001488:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800148c:	9201      	str	r2, [sp, #4]
 800148e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001490:	9402      	str	r4, [sp, #8]
 8001492:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001494:	f042 0202 	orr.w	r2, r2, #2
 8001498:	631a      	str	r2, [r3, #48]	; 0x30
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80014a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80014b4:	2309      	movs	r3, #9
 80014b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f001 f864 	bl	8002584 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 80014bc:	4622      	mov	r2, r4
 80014be:	4621      	mov	r1, r4
 80014c0:	203f      	movs	r0, #63	; 0x3f
 80014c2:	f000 ffd3 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80014c6:	203f      	movs	r0, #63	; 0x3f
 80014c8:	f001 f804 	bl	80024d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80014cc:	2040      	movs	r0, #64	; 0x40
 80014ce:	4622      	mov	r2, r4
 80014d0:	4621      	mov	r1, r4
 80014d2:	f000 ffcb 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80014d6:	2040      	movs	r0, #64	; 0x40
 80014d8:	f000 fffc 	bl	80024d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80014dc:	b008      	add	sp, #32
 80014de:	bd10      	pop	{r4, pc}
 80014e0:	40006800 	.word	0x40006800
 80014e4:	40020400 	.word	0x40020400

080014e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014e8:	b510      	push	{r4, lr}
  HAL_CAN_DeactivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014ea:	2102      	movs	r1, #2
{
 80014ec:	4604      	mov	r4, r0
  HAL_CAN_DeactivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80014f0:	f000 fe8e 	bl	8002210 <HAL_CAN_DeactivateNotification>

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4620      	mov	r0, r4
 80014fc:	f000 fe01 	bl	8002102 <HAL_CAN_GetRxMessage>
 8001500:	b108      	cbz	r0, 8001506 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
    Error_Handler();
 8001502:	f000 fa8d 	bl	8001a20 <Error_Handler>
  // Start the Transmission process
  if (HAL_CAN_AddTxMessage(&CanHandle, &TxHeader, TxData, &TxMailbox) != HAL_OK)
	// Transmission request Error
	Error_Handler();
  */
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001506:	2102      	movs	r1, #2
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
}
 800150a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800150e:	f000 be6e 	b.w	80021ee <HAL_CAN_ActivateNotification>
 8001512:	bf00      	nop
 8001514:	2000a03c 	.word	0x2000a03c
 8001518:	200003d8 	.word	0x200003d8
 800151c:	200003b4 	.word	0x200003b4

08001520 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001520:	b513      	push	{r0, r1, r4, lr}
  DAC_ChannelConfTypeDef sConfig = {0};

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8001522:	480b      	ldr	r0, [pc, #44]	; (8001550 <MX_DAC_Init+0x30>)
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_DAC_Init+0x34>)
 8001526:	6003      	str	r3, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001528:	2400      	movs	r4, #0
 800152a:	9400      	str	r4, [sp, #0]
 800152c:	9401      	str	r4, [sp, #4]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800152e:	f000 fff5 	bl	800251c <HAL_DAC_Init>
 8001532:	b108      	cbz	r0, 8001538 <MX_DAC_Init+0x18>
  {
    Error_Handler();
 8001534:	f000 fa74 	bl	8001a20 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001538:	2200      	movs	r2, #0
 800153a:	4669      	mov	r1, sp
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_DAC_Init+0x30>)
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800153e:	9400      	str	r4, [sp, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001540:	9401      	str	r4, [sp, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001542:	f000 fffe 	bl	8002542 <HAL_DAC_ConfigChannel>
 8001546:	b108      	cbz	r0, 800154c <MX_DAC_Init+0x2c>
  {
    Error_Handler();
 8001548:	f000 fa6a 	bl	8001a20 <Error_Handler>
  }

}
 800154c:	b002      	add	sp, #8
 800154e:	bd10      	pop	{r4, pc}
 8001550:	2000a064 	.word	0x2000a064
 8001554:	40007400 	.word	0x40007400

08001558 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001558:	b510      	push	{r4, lr}
 800155a:	4604      	mov	r4, r0
 800155c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	2214      	movs	r2, #20
 8001560:	2100      	movs	r1, #0
 8001562:	a803      	add	r0, sp, #12
 8001564:	f002 f910 	bl	8003788 <memset>
  if(dacHandle->Instance==DAC)
 8001568:	6822      	ldr	r2, [r4, #0]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_DAC_MspInit+0x5c>)
 800156c:	429a      	cmp	r2, r3
 800156e:	d11e      	bne.n	80015ae <HAL_DAC_MspInit+0x56>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001570:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001574:	2100      	movs	r1, #0
 8001576:	9101      	str	r1, [sp, #4]
 8001578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	480f      	ldr	r0, [pc, #60]	; (80015b8 <HAL_DAC_MspInit+0x60>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800157c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
 8001582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001584:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001588:	9201      	str	r2, [sp, #4]
 800158a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158c:	9102      	str	r1, [sp, #8]
 800158e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	631a      	str	r2, [r3, #48]	; 0x30
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015a0:	2310      	movs	r3, #16
 80015a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a6:	2303      	movs	r3, #3
 80015a8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f000 ffeb 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80015ae:	b008      	add	sp, #32
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	40007400 	.word	0x40007400
 80015b8:	40020000 	.word	0x40020000

080015bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	2214      	movs	r2, #20
{
 80015c0:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	eb0d 0002 	add.w	r0, sp, r2
 80015c6:	2100      	movs	r1, #0
 80015c8:	f002 f8de 	bl	8003788 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	2400      	movs	r4, #0
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <MX_GPIO_Init+0xc0>)
 80015d0:	9400      	str	r4, [sp, #0]
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015d4:	4d2a      	ldr	r5, [pc, #168]	; (8001680 <MX_GPIO_Init+0xc4>)

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015d6:	4f2b      	ldr	r7, [pc, #172]	; (8001684 <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d8:	f042 0204 	orr.w	r2, r2, #4
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
 80015de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e0:	f002 0204 	and.w	r2, r2, #4
 80015e4:	9200      	str	r2, [sp, #0]
 80015e6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e8:	9401      	str	r4, [sp, #4]
 80015ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f0:	631a      	str	r2, [r3, #48]	; 0x30
 80015f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015f8:	9201      	str	r2, [sp, #4]
 80015fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	9402      	str	r4, [sp, #8]
 80015fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001600:	f042 0201 	orr.w	r2, r2, #1
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
 8001606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001608:	f002 0201 	and.w	r2, r2, #1
 800160c:	9202      	str	r2, [sp, #8]
 800160e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001610:	9403      	str	r4, [sp, #12]
 8001612:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001614:	f042 0202 	orr.w	r2, r2, #2
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
 800161a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800161c:	f002 0202 	and.w	r2, r2, #2
 8001620:	9203      	str	r2, [sp, #12]
 8001622:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001624:	9404      	str	r4, [sp, #16]
 8001626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001628:	f042 0208 	orr.w	r2, r2, #8
 800162c:	631a      	str	r2, [r3, #48]	; 0x30
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001634:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001638:	4628      	mov	r0, r5
 800163a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163c:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163e:	f001 f87b 	bl	8002738 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001646:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001648:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_GPIO_Init+0xcc>)
 800164c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800164e:	4638      	mov	r0, r7

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001650:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001654:	f000 ff96 	bl	8002584 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001658:	a905      	add	r1, sp, #20
 800165a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800165c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001662:	f000 ff8f 	bl	8002584 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001666:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001668:	a905      	add	r1, sp, #20
 800166a:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = LD2_Pin;
 800166c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001674:	f000 ff86 	bl	8002584 <HAL_GPIO_Init>

}
 8001678:	b00b      	add	sp, #44	; 0x2c
 800167a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020000 	.word	0x40020000
 8001684:	40020800 	.word	0x40020800
 8001688:	10210000 	.word	0x10210000

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001690:	f000 fc90 	bl	8001fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001694:	f000 f928 	bl	80018e8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001698:	f7ff ff90 	bl	80015bc <MX_GPIO_Init>
  MX_CAN2_Init();
 800169c:	f7ff feb6 	bl	800140c <MX_CAN2_Init>
  MX_DAC_Init();
 80016a0:	f7ff ff3e 	bl	8001520 <MX_DAC_Init>
  MX_SDIO_SD_Init();
 80016a4:	f000 f9c4 	bl	8001a30 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80016a8:	f000 f9d2 	bl	8001a50 <MX_SPI2_Init>
  MX_TIM2_Init();
 80016ac:	f000 fa9e 	bl	8001bec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80016b0:	f000 fb16 	bl	8001ce0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <main+0x28>
	...

080016b8 <aggSensMemoria>:

void sensCanReq() {

}

void aggSensMemoria() {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
	if (d >= MAXDATA-NSensori) {
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <aggSensMemoria+0xe8>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	f640 33a2 	movw	r3, #2978	; 0xba2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	dd01      	ble.n	80016d0 <aggSensMemoria+0x18>
		dumpMemoriaUART();
 80016cc:	f000 fc26 	bl	8001f1c <dumpMemoriaUART>
	}
	for (uint8_t i = 0; i < NSensori; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
 80016d6:	2b14      	cmp	r3, #20
 80016d8:	dc5e      	bgt.n	8001798 <aggSensMemoria+0xe0>
		timestamp tsmpTemp = {Orario.millis,
 80016da:	4b32      	ldr	r3, [pc, #200]	; (80017a4 <aggSensMemoria+0xec>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
		Orario.secondi, Orario.minuti, Orario.ore};
 80016de:	813b      	strh	r3, [r7, #8]
 80016e0:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <aggSensMemoria+0xec>)
 80016e2:	789b      	ldrb	r3, [r3, #2]
 80016e4:	72bb      	strb	r3, [r7, #10]
 80016e6:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <aggSensMemoria+0xec>)
 80016e8:	78db      	ldrb	r3, [r3, #3]
 80016ea:	72fb      	strb	r3, [r7, #11]
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <aggSensMemoria+0xec>)
 80016ee:	791b      	ldrb	r3, [r3, #4]
 80016f0:	733b      	strb	r3, [r7, #12]
		uint16_t ValoreTemp;

		SList[i].func(&ValoreTemp, SList[i].helper);
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	492c      	ldr	r1, [pc, #176]	; (80017a8 <aggSensMemoria+0xf0>)
 80016f6:	4613      	mov	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4413      	add	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	331c      	adds	r3, #28
 8001702:	681c      	ldr	r4, [r3, #0]
 8001704:	7bfa      	ldrb	r2, [r7, #15]
 8001706:	4928      	ldr	r1, [pc, #160]	; (80017a8 <aggSensMemoria+0xf0>)
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4413      	add	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	3320      	adds	r3, #32
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	1dbb      	adds	r3, r7, #6
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	47a0      	blx	r4

		inMemory[d].IDSensore = i;
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <aggSensMemoria+0xe8>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	4a21      	ldr	r2, [pc, #132]	; (80017ac <aggSensMemoria+0xf4>)
 8001726:	460b      	mov	r3, r1
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	701a      	strb	r2, [r3, #0]
		inMemory[d].Valore = ValoreTemp;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <aggSensMemoria+0xe8>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	88f8      	ldrh	r0, [r7, #6]
 800173c:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <aggSensMemoria+0xf4>)
 800173e:	460b      	mov	r3, r1
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	3302      	adds	r3, #2
 800174a:	4602      	mov	r2, r0
 800174c:	801a      	strh	r2, [r3, #0]
		inMemory[d].tmps = tsmpTemp;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <aggSensMemoria+0xe8>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4a15      	ldr	r2, [pc, #84]	; (80017ac <aggSensMemoria+0xf4>)
 8001756:	460b      	mov	r3, r1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	440b      	add	r3, r1
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	f107 0208 	add.w	r2, r7, #8
 8001766:	6810      	ldr	r0, [r2, #0]
 8001768:	6018      	str	r0, [r3, #0]
 800176a:	8892      	ldrh	r2, [r2, #4]
 800176c:	809a      	strh	r2, [r3, #4]

		SList[i].lastValoreChecked = ValoreTemp;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	88f8      	ldrh	r0, [r7, #6]
 8001772:	490d      	ldr	r1, [pc, #52]	; (80017a8 <aggSensMemoria+0xf0>)
 8001774:	4613      	mov	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	3322      	adds	r3, #34	; 0x22
 8001780:	4602      	mov	r2, r0
 8001782:	801a      	strh	r2, [r3, #0]
		d++;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <aggSensMemoria+0xe8>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	3301      	adds	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <aggSensMemoria+0xe8>)
 800178e:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < NSensori; i++) {
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	3301      	adds	r3, #1
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	e79d      	b.n	80016d4 <aggSensMemoria+0x1c>
	}
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	200003ea 	.word	0x200003ea
 80017a4:	200003e4 	.word	0x200003e4
 80017a8:	20000000 	.word	0x20000000
 80017ac:	200003f0 	.word	0x200003f0

080017b0 <RoutineAccelerometro>:

void RoutineAccelerometro(uint16_t *buffer, uint8_t helper) {
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]

}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <RoutineRF>:
void RoutineRF(uint16_t *buffer, uint8_t helper) {
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]

}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <RoutineGiroscopio>:
void RoutineGiroscopio(uint16_t *buffer, uint8_t helper) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]

}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <RoutineSmot>:
void RoutineSmot(uint16_t *buffer, uint8_t helper) {
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]

}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <RoutineV>:
void RoutineV(uint16_t *buffer, uint8_t helper) {
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	70fb      	strb	r3, [r7, #3]

}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <RoutineAPPS>:
void RoutineAPPS(uint16_t *buffer, uint8_t helper) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]

}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <RoutineTPS>:
void RoutineTPS(uint16_t *buffer, uint8_t helper) {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	70fb      	strb	r3, [r7, #3]

}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <RoutineDAC>:
void RoutineDAC(uint16_t *buffer, uint8_t helper) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]

}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <RoutineFrizione>:
void RoutineFrizione(uint16_t *buffer, uint8_t helper) {
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]

}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <RoutineMarcia>:
void RoutineMarcia(uint16_t *buffer, uint8_t helper) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]

}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <RoutineTempAcqua>:
void RoutineTempAcqua(uint16_t *buffer, uint8_t helper) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	70fb      	strb	r3, [r7, #3]

}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <RoutineTempOlio>:
void RoutineTempOlio(uint16_t *buffer, uint8_t helper) {
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70fb      	strb	r3, [r7, #3]

}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <RoutineTempAria>:
void RoutineTempAria(uint16_t *buffer, uint8_t helper) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]

}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ac      	sub	sp, #176	; 0xb0
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018f2:	2234      	movs	r2, #52	; 0x34
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 ff46 	bl	8003788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	225c      	movs	r2, #92	; 0x5c
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f001 ff37 	bl	8003788 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <_Z18SystemClock_Configv+0x130>)
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <_Z18SystemClock_Configv+0x130>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <_Z18SystemClock_Configv+0x130>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	60bb      	str	r3, [r7, #8]
 8001934:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001936:	2300      	movs	r3, #0
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	4a38      	ldr	r2, [pc, #224]	; (8001a1c <_Z18SystemClock_Configv+0x134>)
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <_Z18SystemClock_Configv+0x134>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <_Z18SystemClock_Configv+0x134>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001956:	2302      	movs	r3, #2
 8001958:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800195a:	2301      	movs	r3, #1
 800195c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001960:	2310      	movs	r3, #16
 8001962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001972:	2308      	movs	r3, #8
 8001974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 66;
 8001978:	2342      	movs	r3, #66	; 0x42
 800197a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001984:	2304      	movs	r3, #4
 8001986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800198a:	2302      	movs	r3, #2
 800198c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001990:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001994:	4618      	mov	r0, r3
 8001996:	f001 f9e1 	bl	8002d5c <HAL_RCC_OscConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 80019aa:	f000 f839 	bl	8001a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ae:	230f      	movs	r3, #15
 80019b0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b2:	2302      	movs	r3, #2
 80019b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c0:	2300      	movs	r3, #0
 80019c2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 feba 	bl	8002744 <HAL_RCC_ClockConfig>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 80019e0:	f000 f81e 	bl	8001a20 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80019e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80019ea:	2300      	movs	r3, #0
 80019ec:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80019ee:	2300      	movs	r3, #0
 80019f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 ff60 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	bf14      	ite	ne
 8001a02:	2301      	movne	r3, #1
 8001a04:	2300      	moveq	r3, #0
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <_Z18SystemClock_Configv+0x128>
  {
    Error_Handler();
 8001a0c:	f000 f808 	bl	8001a20 <Error_Handler>
  }
}
 8001a10:	bf00      	nop
 8001a12:	37b0      	adds	r7, #176	; 0xb0
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40007000 	.word	0x40007000

08001a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <MX_SDIO_SD_Init>:
/* SDIO init function */

void MX_SDIO_SD_Init(void)
{

  hsd.Instance = SDIO;
 8001a30:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <MX_SDIO_SD_Init+0x18>)
 8001a32:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <MX_SDIO_SD_Init+0x1c>)
 8001a34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a3a:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a3c:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a3e:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a40:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001a42:	619a      	str	r2, [r3, #24]
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000a078 	.word	0x2000a078
 8001a4c:	40012c00 	.word	0x40012c00

08001a50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a50:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
 8001a52:	480e      	ldr	r0, [pc, #56]	; (8001a8c <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a54:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_SPI2_Init+0x40>)
 8001a56:	f44f 7e82 	mov.w	lr, #260	; 0x104
 8001a5a:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a62:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a64:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a66:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a6c:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a72:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a74:	230a      	movs	r3, #10
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a76:	6182      	str	r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001a78:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a7a:	f001 fb09 	bl	8003090 <HAL_SPI_Init>
 8001a7e:	b118      	cbz	r0, 8001a88 <MX_SPI2_Init+0x38>
  {
    Error_Handler();
  }

}
 8001a80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001a84:	f7ff bfcc 	b.w	8001a20 <Error_Handler>
 8001a88:	bd08      	pop	{r3, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000a0fc 	.word	0x2000a0fc
 8001a90:	40003800 	.word	0x40003800

08001a94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a96:	4604      	mov	r4, r0
 8001a98:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	2214      	movs	r2, #20
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	a803      	add	r0, sp, #12
 8001aa0:	f001 fe72 	bl	8003788 <memset>
  if(spiHandle->Instance==SPI2)
 8001aa4:	6822      	ldr	r2, [r4, #0]
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_SPI_MspInit+0xa0>)
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d141      	bne.n	8001b30 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001aac:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001ab0:	2400      	movs	r4, #0
 8001ab2:	9400      	str	r4, [sp, #0]
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab6:	4820      	ldr	r0, [pc, #128]	; (8001b38 <HAL_SPI_MspInit+0xa4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ab8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
 8001abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac8:	9401      	str	r4, [sp, #4]
 8001aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001acc:	f042 0204 	orr.w	r2, r2, #4
 8001ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad4:	f002 0204 	and.w	r2, r2, #4
 8001ad8:	9201      	str	r2, [sp, #4]
 8001ada:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001adc:	9402      	str	r4, [sp, #8]
 8001ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ae0:	f042 0202 	orr.w	r2, r2, #2
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001aee:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2603      	movs	r6, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001af4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001af6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001afa:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afc:	2705      	movs	r7, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b02:	f000 fd3f 	bl	8002584 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b06:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	a903      	add	r1, sp, #12
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <HAL_SPI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b14:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b16:	f000 fd35 	bl	8002584 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1e:	a903      	add	r1, sp, #12
 8001b20:	4806      	ldr	r0, [pc, #24]	; (8001b3c <HAL_SPI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b22:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b2a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f000 fd2a 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b30:	b009      	add	sp, #36	; 0x24
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	40003800 	.word	0x40003800
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020400 	.word	0x40020400

08001b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b40:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_MspInit+0x3c>)
 8001b44:	2100      	movs	r1, #0
 8001b46:	9100      	str	r1, [sp, #0]
 8001b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b52:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b56:	9200      	str	r2, [sp, #0]
 8001b58:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	9101      	str	r1, [sp, #4]
 8001b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b6c:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b70:	f000 fc6a 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b74:	b003      	add	sp, #12
 8001b76:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800

08001b80 <NMI_Handler>:
 8001b80:	4770      	bx	lr

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	e7fe      	b.n	8001b82 <HardFault_Handler>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	e7fe      	b.n	8001b88 <UsageFault_Handler>

08001b8a <SVC_Handler>:
 8001b8a:	4770      	bx	lr

08001b8c <DebugMon_Handler>:
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	4770      	bx	lr

08001b90 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b90:	f000 ba2a 	b.w	8001fe8 <HAL_IncTick>

08001b94 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b94:	4801      	ldr	r0, [pc, #4]	; (8001b9c <TIM2_IRQHandler+0x8>)
 8001b96:	f001 babc 	b.w	8003112 <HAL_TIM_IRQHandler>
 8001b9a:	bf00      	nop
 8001b9c:	2000a154 	.word	0x2000a154

08001ba0 <CAN2_RX0_IRQHandler>:
void CAN2_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ba0:	4801      	ldr	r0, [pc, #4]	; (8001ba8 <CAN2_RX0_IRQHandler+0x8>)
 8001ba2:	f000 bb53 	b.w	800224c <HAL_CAN_IRQHandler>
 8001ba6:	bf00      	nop
 8001ba8:	2000a03c 	.word	0x2000a03c

08001bac <CAN2_TX_IRQHandler>:
 8001bac:	f7ff bff8 	b.w	8001ba0 <CAN2_RX0_IRQHandler>

08001bb0 <_getpid>:
 8001bb0:	2001      	movs	r0, #1
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:
 8001bb4:	b508      	push	{r3, lr}
 8001bb6:	f001 fdbd 	bl	8003734 <__errno>
 8001bba:	2316      	movs	r3, #22
 8001bbc:	6003      	str	r3, [r0, #0]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	bd08      	pop	{r3, pc}

08001bc4 <_exit>:
 8001bc4:	b508      	push	{r3, lr}
 8001bc6:	f001 fdb5 	bl	8003734 <__errno>
 8001bca:	2316      	movs	r3, #22
 8001bcc:	6003      	str	r3, [r0, #0]
 8001bce:	e7fe      	b.n	8001bce <_exit+0xa>

08001bd0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SystemInit+0x18>)
 8001bd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001bd6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bee:	2210      	movs	r2, #16
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	a802      	add	r0, sp, #8
 8001bf4:	f001 fdc8 	bl	8003788 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  htim2.Instance = TIM2;
 8001bf8:	4813      	ldr	r0, [pc, #76]	; (8001c48 <MX_TIM2_Init+0x5c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bfa:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8001bfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	9301      	str	r3, [sp, #4]
  htim2.Init.Prescaler = 0;
 8001c04:	e880 000c 	stmia.w	r0, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 0;
 8001c0a:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c10:	f001 fb88 	bl	8003324 <HAL_TIM_Base_Init>
 8001c14:	b108      	cbz	r0, 8001c1a <MX_TIM2_Init+0x2e>
  {
    Error_Handler();
 8001c16:	f7ff ff03 	bl	8001a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c1e:	a902      	add	r1, sp, #8
 8001c20:	4809      	ldr	r0, [pc, #36]	; (8001c48 <MX_TIM2_Init+0x5c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c22:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c24:	f001 fba2 	bl	800336c <HAL_TIM_ConfigClockSource>
 8001c28:	b108      	cbz	r0, 8001c2e <MX_TIM2_Init+0x42>
  {
    Error_Handler();
 8001c2a:	f7ff fef9 	bl	8001a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c30:	4669      	mov	r1, sp
 8001c32:	4805      	ldr	r0, [pc, #20]	; (8001c48 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c34:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c36:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c38:	f001 fc2c 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8001c3c:	b108      	cbz	r0, 8001c42 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c3e:	f7ff feef 	bl	8001a20 <Error_Handler>
  }

}
 8001c42:	b007      	add	sp, #28
 8001c44:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c48:	2000a154 	.word	0x2000a154

08001c4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001c4c:	6803      	ldr	r3, [r0, #0]
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001c52:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 8001c54:	d113      	bne.n	8001c7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c56:	2200      	movs	r2, #0
 8001c58:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001c60:	f041 0101 	orr.w	r1, r1, #1
 8001c64:	6419      	str	r1, [r3, #64]	; 0x40
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	9301      	str	r3, [sp, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c6e:	201c      	movs	r0, #28
 8001c70:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c74:	f000 fbfa 	bl	800246c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c78:	201c      	movs	r0, #28
 8001c7a:	f000 fc2b 	bl	80024d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c7e:	b003      	add	sp, #12
 8001c80:	f85d fb04 	ldr.w	pc, [sp], #4

08001c84 <HAL_TIM_PeriodElapsedCallback>:
  }
} 

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
	Orario.millis++;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	1c51      	adds	r1, r2, #1
 8001c8a:	b289      	uxth	r1, r1
	if(Orario.millis >= 1000) {
 8001c8c:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2) {
 8001c90:	b510      	push	{r4, lr}
	Orario.millis++;
 8001c92:	8019      	strh	r1, [r3, #0]
	if(Orario.millis >= 1000) {
 8001c94:	d305      	bcc.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		Orario.secondi++;
 8001c96:	7899      	ldrb	r1, [r3, #2]
		Orario.millis -= 1000;
 8001c98:	f2a2 32e7 	subw	r2, r2, #999	; 0x3e7
		Orario.secondi++;
 8001c9c:	3101      	adds	r1, #1
 8001c9e:	7099      	strb	r1, [r3, #2]
		Orario.millis -= 1000;
 8001ca0:	801a      	strh	r2, [r3, #0]
	}
	if(Orario.secondi >= 60) {
 8001ca2:	789a      	ldrb	r2, [r3, #2]
 8001ca4:	2a3b      	cmp	r2, #59	; 0x3b
 8001ca6:	d904      	bls.n	8001cb2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		Orario.minuti++;
 8001ca8:	78d9      	ldrb	r1, [r3, #3]
		Orario.secondi -= 60;
 8001caa:	3a3c      	subs	r2, #60	; 0x3c
		Orario.minuti++;
 8001cac:	3101      	adds	r1, #1
 8001cae:	70d9      	strb	r1, [r3, #3]
		Orario.secondi -= 60;
 8001cb0:	709a      	strb	r2, [r3, #2]
	}
	if(Orario.minuti >= 60 ) {
 8001cb2:	78da      	ldrb	r2, [r3, #3]
 8001cb4:	2a3b      	cmp	r2, #59	; 0x3b
 8001cb6:	d904      	bls.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x3e>
		Orario.ore++;
 8001cb8:	7919      	ldrb	r1, [r3, #4]
		Orario.minuti -= 60;
 8001cba:	3a3c      	subs	r2, #60	; 0x3c
		Orario.ore++;
 8001cbc:	3101      	adds	r1, #1
 8001cbe:	7119      	strb	r1, [r3, #4]
		Orario.minuti -= 60;
 8001cc0:	70da      	strb	r2, [r3, #3]
	}

	if(Aggiornamento != 1) {
 8001cc2:	4c06      	ldr	r4, [pc, #24]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001cc4:	7823      	ldrb	r3, [r4, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d005      	beq.n	8001cd6 <HAL_TIM_PeriodElapsedCallback+0x52>
		Aggiornamento = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	7023      	strb	r3, [r4, #0]
		aggSensMemoria();
 8001cce:	f7ff fcf3 	bl	80016b8 <aggSensMemoria>
		Aggiornamento = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	7023      	strb	r3, [r4, #0]
 8001cd6:	bd10      	pop	{r4, pc}
 8001cd8:	200003e4 	.word	0x200003e4
 8001cdc:	200003ec 	.word	0x200003ec

08001ce0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ce0:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8001ce2:	480d      	ldr	r0, [pc, #52]	; (8001d18 <MX_USART2_UART_Init+0x38>)
  huart2.Init.BaudRate = 115200;
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <MX_USART2_UART_Init+0x3c>)
 8001ce6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8001cea:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cee:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf6:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cfc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cfe:	f001 fc7b 	bl	80035f8 <HAL_UART_Init>
 8001d02:	b108      	cbz	r0, 8001d08 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8001d04:	f7ff fe8c 	bl	8001a20 <Error_Handler>
  }

  //__HAL_UART_ENABLE_IT(USART2, UART_IT_TC);
  //__HAL_UART_ENABLE_IT(USART2, UART_IT_RXNE);

  HAL_UART_Receive_IT(&huart2, bufferRxUART, 8*sizeof(uint8_t));
 8001d08:	2208      	movs	r2, #8
 8001d0a:	4905      	ldr	r1, [pc, #20]	; (8001d20 <MX_USART2_UART_Init+0x40>)
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <MX_USART2_UART_Init+0x38>)

}
 8001d0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_Receive_IT(&huart2, bufferRxUART, 8*sizeof(uint8_t));
 8001d12:	f001 bcbe 	b.w	8003692 <HAL_UART_Receive_IT>
 8001d16:	bf00      	nop
 8001d18:	2000a194 	.word	0x2000a194
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	2000a030 	.word	0x2000a030

08001d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d24:	b510      	push	{r4, lr}
 8001d26:	4604      	mov	r4, r0
 8001d28:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2a:	2214      	movs	r2, #20
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	a803      	add	r0, sp, #12
 8001d30:	f001 fd2a 	bl	8003788 <memset>
  if(uartHandle->Instance==USART2)
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_UART_MspInit+0x68>)
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d124      	bne.n	8001d86 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001d40:	2100      	movs	r1, #0
 8001d42:	9101      	str	r1, [sp, #4]
 8001d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d48:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d50:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	9102      	str	r1, [sp, #8]
 8001d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	9302      	str	r3, [sp, #8]
 8001d6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d7e:	2307      	movs	r3, #7
 8001d80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f000 fbff 	bl	8002584 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d86:	b008      	add	sp, #32
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40004400 	.word	0x40004400
 8001d90:	40020000 	.word	0x40020000

08001d94 <adjustTimestamp>:
	default:
		break;
	}
}

void adjustTimestamp(uint8_t *buffer, timestamp tmp) {
 8001d94:	b513      	push	{r0, r1, r4, lr}
 8001d96:	ab02      	add	r3, sp, #8
 8001d98:	e903 0006 	stmdb	r3, {r1, r2}
	uint16_t millis = tmp.millis;
 8001d9c:	f8bd 3000 	ldrh.w	r3, [sp]
	//uint8_t sec = tmp.secondi;
	//uint8_t min = tmp.minuti;
	//uint8_t ore  = tmp.ore;

	if (millis < 10)
 8001da0:	2b09      	cmp	r3, #9
 8001da2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001da6:	d805      	bhi.n	8001db4 <adjustTimestamp+0x20>
	{
		buffer[10] = '0';
 8001da8:	2330      	movs	r3, #48	; 0x30
 8001daa:	7283      	strb	r3, [r0, #10]
		buffer[11] = '0';
 8001dac:	72c3      	strb	r3, [r0, #11]
		buffer[12] = '0' + millis%10;
 8001dae:	7301      	strb	r1, [r0, #12]
	{
		buffer[10] = '0' + millis/100;
		buffer[11] = '0' + (millis - millis/100 * 100)/10;
		buffer[12] = '0' + millis - (millis/10) * 10;
	}
}
 8001db0:	b002      	add	sp, #8
 8001db2:	bd10      	pop	{r4, pc}
	else if (millis < 100)
 8001db4:	2b63      	cmp	r3, #99	; 0x63
 8001db6:	d810      	bhi.n	8001dda <adjustTimestamp+0x46>
		buffer[10] = '0';
 8001db8:	2230      	movs	r2, #48	; 0x30
 8001dba:	7282      	strb	r2, [r0, #10]
		buffer[11] = '0' + millis/10;
 8001dbc:	220a      	movs	r2, #10
 8001dbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001dc8:	72c2      	strb	r2, [r0, #11]
		buffer[12] = '0' + millis - (millis/10) * 10;
 8001dca:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8001dce:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 8001dd2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001dd6:	7303      	strb	r3, [r0, #12]
}
 8001dd8:	e7ea      	b.n	8001db0 <adjustTimestamp+0x1c>
		buffer[10] = '0' + millis/100;
 8001dda:	2264      	movs	r2, #100	; 0x64
 8001ddc:	fbb3 f2f2 	udiv	r2, r3, r2
 8001de0:	f102 0430 	add.w	r4, r2, #48	; 0x30
 8001de4:	7284      	strb	r4, [r0, #10]
		buffer[11] = '0' + (millis - millis/100 * 100)/10;
 8001de6:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8001dea:	fb04 3202 	mla	r2, r4, r2, r3
 8001dee:	240a      	movs	r4, #10
 8001df0:	fb92 f2f4 	sdiv	r2, r2, r4
 8001df4:	3230      	adds	r2, #48	; 0x30
 8001df6:	72c2      	strb	r2, [r0, #11]
		buffer[12] = '0' + millis - (millis/10) * 10;
 8001df8:	fbb3 f3f4 	udiv	r3, r3, r4
 8001dfc:	e7e5      	b.n	8001dca <adjustTimestamp+0x36>

08001dfe <adjustID>:

void adjustID(uint8_t *buffer, uint8_t ID) {
	if(ID < 10) {
 8001dfe:	2909      	cmp	r1, #9
void adjustID(uint8_t *buffer, uint8_t ID) {
 8001e00:	b510      	push	{r4, lr}
 8001e02:	f101 0230 	add.w	r2, r1, #48	; 0x30
	if(ID < 10) {
 8001e06:	d804      	bhi.n	8001e12 <adjustID+0x14>
		buffer[15] = '0';
 8001e08:	2330      	movs	r3, #48	; 0x30
 8001e0a:	73c3      	strb	r3, [r0, #15]
		buffer[16] = '0';
 8001e0c:	7403      	strb	r3, [r0, #16]
		buffer[17] = '0' + ID%10;
 8001e0e:	7442      	strb	r2, [r0, #17]
 8001e10:	bd10      	pop	{r4, pc}
	} else if(ID < 100) {
 8001e12:	2963      	cmp	r1, #99	; 0x63
 8001e14:	d80f      	bhi.n	8001e36 <adjustID+0x38>
		buffer[15] = '0';
 8001e16:	2330      	movs	r3, #48	; 0x30
 8001e18:	73c3      	strb	r3, [r0, #15]
		buffer[16] = '0' + ID/10;
 8001e1a:	230a      	movs	r3, #10
 8001e1c:	fbb1 f1f3 	udiv	r1, r1, r3
 8001e20:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8001e24:	7403      	strb	r3, [r0, #16]
		buffer[17] = '0' + ID - ID/10 * 10;
	} else if(ID < 1000) {
		buffer[15] = '0' + ID/100;
		buffer[16] = '0' + (ID - ID/100 * 100)/10;
		buffer[17] = '0' + ID - (ID/10) * 10;
 8001e26:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 8001e2a:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
 8001e2e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001e32:	7441      	strb	r1, [r0, #17]
 8001e34:	bd10      	pop	{r4, pc}
		buffer[15] = '0' + ID/100;
 8001e36:	2364      	movs	r3, #100	; 0x64
 8001e38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e3c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001e40:	73c4      	strb	r4, [r0, #15]
		buffer[16] = '0' + (ID - ID/100 * 100)/10;
 8001e42:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8001e46:	fb04 1303 	mla	r3, r4, r3, r1
 8001e4a:	240a      	movs	r4, #10
 8001e4c:	fb93 f3f4 	sdiv	r3, r3, r4
 8001e50:	3330      	adds	r3, #48	; 0x30
 8001e52:	7403      	strb	r3, [r0, #16]
		buffer[17] = '0' + ID - (ID/10) * 10;
 8001e54:	fbb1 f1f4 	udiv	r1, r1, r4
 8001e58:	e7e5      	b.n	8001e26 <adjustID+0x28>

08001e5a <adjustValue>:
	}
}

void adjustValue(uint8_t *buffer, uint16_t Value) {
	if (Value < 10) {
 8001e5a:	2909      	cmp	r1, #9
void adjustValue(uint8_t *buffer, uint16_t Value) {
 8001e5c:	b510      	push	{r4, lr}
	if (Value < 10) {
 8001e5e:	d806      	bhi.n	8001e6e <adjustValue+0x14>
		buffer[19] = '0';
 8001e60:	2330      	movs	r3, #48	; 0x30
 8001e62:	74c3      	strb	r3, [r0, #19]
		buffer[20] = '0';
 8001e64:	7503      	strb	r3, [r0, #20]
		buffer[21] = '0';
 8001e66:	7543      	strb	r3, [r0, #21]
		buffer[22] = '0' + Value%10;
 8001e68:	4419      	add	r1, r3
		buffer[22] = '0' + Value - (Value/10) * 10;
	} else if(Value < 10000) {
		buffer[19] = '0' + Value/1000;
		buffer[20] = '0' + Value - (Value/1000 * 1000)/100;
		buffer[21] = '0' + Value - (Value/100 * 100)/10;
		buffer[22] = '0' + Value - (Value/10 * 10);
 8001e6a:	7581      	strb	r1, [r0, #22]
 8001e6c:	bd10      	pop	{r4, pc}
	} else if(Value < 100) {
 8001e6e:	2963      	cmp	r1, #99	; 0x63
 8001e70:	d812      	bhi.n	8001e98 <adjustValue+0x3e>
		buffer[19] = '0';
 8001e72:	2330      	movs	r3, #48	; 0x30
 8001e74:	74c3      	strb	r3, [r0, #19]
		buffer[20] = '0';
 8001e76:	7503      	strb	r3, [r0, #20]
		buffer[21] = '0' + Value/10;
 8001e78:	230a      	movs	r3, #10
 8001e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001e84:	7542      	strb	r2, [r0, #21]
		buffer[22] = '0' + Value - (Value/10) * 10;
 8001e86:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8001e8a:	ebc3 0382 	rsb	r3, r3, r2, lsl #2
 8001e8e:	3130      	adds	r1, #48	; 0x30
 8001e90:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001e94:	7583      	strb	r3, [r0, #22]
 8001e96:	bd10      	pop	{r4, pc}
	} else if(Value < 1000) {
 8001e98:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8001e9c:	d213      	bcs.n	8001ec6 <adjustValue+0x6c>
		buffer[19] = '0';
 8001e9e:	2330      	movs	r3, #48	; 0x30
 8001ea0:	74c3      	strb	r3, [r0, #19]
		buffer[20] = '0' + Value/100;
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001eac:	7502      	strb	r2, [r0, #20]
		buffer[21] = '0' + (Value - Value/100 * 100)/10;
 8001eae:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001eb2:	fb02 1303 	mla	r3, r2, r3, r1
 8001eb6:	220a      	movs	r2, #10
 8001eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ebc:	3330      	adds	r3, #48	; 0x30
 8001ebe:	7543      	strb	r3, [r0, #21]
		buffer[22] = '0' + Value - (Value/10) * 10;
 8001ec0:	fbb1 f3f2 	udiv	r3, r1, r2
 8001ec4:	e7df      	b.n	8001e86 <adjustValue+0x2c>
	} else if(Value < 10000) {
 8001ec6:	f242 730f 	movw	r3, #9999	; 0x270f
 8001eca:	4299      	cmp	r1, r3
 8001ecc:	d8ce      	bhi.n	8001e6c <adjustValue+0x12>
		buffer[19] = '0' + Value/1000;
 8001ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f103 0230 	add.w	r2, r3, #48	; 0x30
		buffer[20] = '0' + Value - (Value/1000 * 1000)/100;
 8001edc:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
		buffer[19] = '0' + Value/1000;
 8001ee0:	74c2      	strb	r2, [r0, #19]
 8001ee2:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8001ee6:	b2d2      	uxtb	r2, r2
		buffer[20] = '0' + Value - (Value/1000 * 1000)/100;
 8001ee8:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8001eec:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001ef0:	7503      	strb	r3, [r0, #20]
		buffer[21] = '0' + Value - (Value/100 * 100)/10;
 8001ef2:	2364      	movs	r3, #100	; 0x64
 8001ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef8:	ebc3 1443 	rsb	r4, r3, r3, lsl #5
 8001efc:	ebc3 0384 	rsb	r3, r3, r4, lsl #2
 8001f00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001f04:	7543      	strb	r3, [r0, #21]
		buffer[22] = '0' + Value - (Value/10 * 10);
 8001f06:	230a      	movs	r3, #10
 8001f08:	fbb1 f1f3 	udiv	r1, r1, r3
 8001f0c:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 8001f10:	ebc1 0183 	rsb	r1, r1, r3, lsl #2
 8001f14:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8001f18:	e7a7      	b.n	8001e6a <adjustValue+0x10>
	...

08001f1c <dumpMemoriaUART>:
void dumpMemoriaUART() {
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adjustTimestamp(dataFormat, inMemory[i].tmps);
 8001f1e:	4c0f      	ldr	r4, [pc, #60]	; (8001f5c <dumpMemoriaUART+0x40>)
 8001f20:	4d0f      	ldr	r5, [pc, #60]	; (8001f60 <dumpMemoriaUART+0x44>)
	i = 0;
 8001f22:	4e10      	ldr	r6, [pc, #64]	; (8001f64 <dumpMemoriaUART+0x48>)
	adjustTimestamp(dataFormat, inMemory[i].tmps);
 8001f24:	892a      	ldrh	r2, [r5, #8]
 8001f26:	6869      	ldr	r1, [r5, #4]
	i = 0;
 8001f28:	2300      	movs	r3, #0
	adjustTimestamp(dataFormat, inMemory[i].tmps);
 8001f2a:	4620      	mov	r0, r4
	i = 0;
 8001f2c:	8033      	strh	r3, [r6, #0]
	adjustTimestamp(dataFormat, inMemory[i].tmps);
 8001f2e:	f7ff ff31 	bl	8001d94 <adjustTimestamp>
	adjustID(dataFormat, inMemory[i].IDSensore);
 8001f32:	8833      	ldrh	r3, [r6, #0]
 8001f34:	270a      	movs	r7, #10
 8001f36:	437b      	muls	r3, r7
 8001f38:	4620      	mov	r0, r4
 8001f3a:	5ce9      	ldrb	r1, [r5, r3]
 8001f3c:	f7ff ff5f 	bl	8001dfe <adjustID>
	adjustValue(dataFormat, inMemory[i].Valore);
 8001f40:	8833      	ldrh	r3, [r6, #0]
 8001f42:	fb07 5503 	mla	r5, r7, r3, r5
 8001f46:	4620      	mov	r0, r4
 8001f48:	8869      	ldrh	r1, [r5, #2]
 8001f4a:	f7ff ff86 	bl	8001e5a <adjustValue>
	HAL_UART_Transmit_IT(&huart2, dataFormat, 25);
 8001f4e:	4621      	mov	r1, r4
 8001f50:	2219      	movs	r2, #25
 8001f52:	4805      	ldr	r0, [pc, #20]	; (8001f68 <dumpMemoriaUART+0x4c>)
}
 8001f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UART_Transmit_IT(&huart2, dataFormat, 25);
 8001f58:	f001 bb7c 	b.w	8003654 <HAL_UART_Transmit_IT>
 8001f5c:	200002f8 	.word	0x200002f8
 8001f60:	200003f0 	.word	0x200003f0
 8001f64:	2000a038 	.word	0x2000a038
 8001f68:	2000a194 	.word	0x2000a194

08001f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f6c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_InitTick+0x3c>)
 8001f70:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <HAL_InitTick+0x40>)
{
 8001f72:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f74:	7818      	ldrb	r0, [r3, #0]
 8001f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7a:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f7e:	6810      	ldr	r0, [r2, #0]
 8001f80:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f84:	f000 fab4 	bl	80024f0 <HAL_SYSTICK_Config>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	b958      	cbnz	r0, 8001fa4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8c:	2d0f      	cmp	r5, #15
 8001f8e:	d809      	bhi.n	8001fa4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	4602      	mov	r2, r0
 8001f92:	4629      	mov	r1, r5
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f000 fa68 	bl	800246c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_InitTick+0x44>)
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	601d      	str	r5, [r3, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001fa4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fa6:	bd38      	pop	{r3, r4, r5, pc}
 8001fa8:	200002f4 	.word	0x200002f4
 8001fac:	20000311 	.word	0x20000311
 8001fb0:	20000314 	.word	0x20000314

08001fb4 <HAL_Init>:
{
 8001fb4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <HAL_Init+0x30>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fc6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 fa39 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7ff ffc8 	bl	8001f6c <HAL_InitTick>
  HAL_MspInit();
 8001fdc:	f7ff fdb0 	bl	8001b40 <HAL_MspInit>
}
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	bd08      	pop	{r3, pc}
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001fe8:	4a03      	ldr	r2, [pc, #12]	; (8001ff8 <HAL_IncTick+0x10>)
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <HAL_IncTick+0x14>)
 8001fec:	6811      	ldr	r1, [r2, #0]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	440b      	add	r3, r1
 8001ff2:	6013      	str	r3, [r2, #0]
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	2000a1d4 	.word	0x2000a1d4
 8001ffc:	20000311 	.word	0x20000311

08002000 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002000:	4b01      	ldr	r3, [pc, #4]	; (8002008 <HAL_GetTick+0x8>)
 8002002:	6818      	ldr	r0, [r3, #0]
}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	2000a1d4 	.word	0x2000a1d4

0800200c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800200c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800200e:	4604      	mov	r4, r0
 8002010:	2800      	cmp	r0, #0
 8002012:	d06e      	beq.n	80020f2 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002014:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002018:	b90b      	cbnz	r3, 800201e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800201a:	f7ff fa15 	bl	8001448 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800201e:	6822      	ldr	r2, [r4, #0]
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	f023 0302 	bic.w	r3, r3, #2
 8002026:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002028:	f7ff ffea 	bl	8002000 <HAL_GetTick>
 800202c:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	0791      	lsls	r1, r2, #30
 8002034:	d451      	bmi.n	80020da <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	f042 0201 	orr.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800203e:	f7ff ffdf 	bl	8002000 <HAL_GetTick>
 8002042:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	07d2      	lsls	r2, r2, #31
 800204a:	d554      	bpl.n	80020f6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800204c:	7e22      	ldrb	r2, [r4, #24]
 800204e:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	bf0c      	ite	eq
 8002054:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002058:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800205e:	7e62      	ldrb	r2, [r4, #25]
 8002060:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	bf0c      	ite	eq
 8002066:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800206a:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 800206e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002070:	7ea2      	ldrb	r2, [r4, #26]
 8002072:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	bf0c      	ite	eq
 8002078:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800207c:	f022 0220 	bicne.w	r2, r2, #32
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002082:	7ee2      	ldrb	r2, [r4, #27]
 8002084:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	bf0c      	ite	eq
 800208a:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800208e:	f042 0210 	orrne.w	r2, r2, #16
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002094:	7f22      	ldrb	r2, [r4, #28]
 8002096:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	bf0c      	ite	eq
 800209c:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020a0:	f022 0208 	bicne.w	r2, r2, #8
 80020a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020a6:	7f62      	ldrb	r2, [r4, #29]
 80020a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	bf0c      	ite	eq
 80020ae:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020b2:	f022 0204 	bicne.w	r2, r2, #4
 80020b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020b8:	68e1      	ldr	r1, [r4, #12]
 80020ba:	68a2      	ldr	r2, [r4, #8]
 80020bc:	430a      	orrs	r2, r1
 80020be:	6921      	ldr	r1, [r4, #16]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	6961      	ldr	r1, [r4, #20]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	6861      	ldr	r1, [r4, #4]
 80020c8:	3901      	subs	r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ce:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80020d0:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020d2:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 80020d4:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 80020d8:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020da:	f7ff ff91 	bl	8002000 <HAL_GetTick>
 80020de:	1b40      	subs	r0, r0, r5
 80020e0:	280a      	cmp	r0, #10
 80020e2:	d9a4      	bls.n	800202e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80020e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ea:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ec:	2305      	movs	r3, #5
 80020ee:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80020f2:	2001      	movs	r0, #1
}
 80020f4:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f6:	f7ff ff83 	bl	8002000 <HAL_GetTick>
 80020fa:	1b40      	subs	r0, r0, r5
 80020fc:	280a      	cmp	r0, #10
 80020fe:	d9a1      	bls.n	8002044 <HAL_CAN_Init+0x38>
 8002100:	e7f0      	b.n	80020e4 <HAL_CAN_Init+0xd8>

08002102 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002102:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 8002104:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002108:	3c01      	subs	r4, #1
 800210a:	2c01      	cmp	r4, #1
 800210c:	d86b      	bhi.n	80021e6 <HAL_CAN_GetRxMessage+0xe4>
 800210e:	6806      	ldr	r6, [r0, #0]
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002110:	b941      	cbnz	r1, 8002124 <HAL_CAN_GetRxMessage+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002112:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002114:	07a4      	lsls	r4, r4, #30
 8002116:	d107      	bne.n	8002128 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002118:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800211a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800211e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002120:	2001      	movs	r0, #1
  }
}
 8002122:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002124:	6934      	ldr	r4, [r6, #16]
 8002126:	e7f5      	b.n	8002114 <HAL_CAN_GetRxMessage+0x12>
 8002128:	010c      	lsls	r4, r1, #4
 800212a:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800212c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002130:	f007 0704 	and.w	r7, r7, #4
 8002134:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002136:	2f00      	cmp	r7, #0
 8002138:	d14b      	bne.n	80021d2 <HAL_CAN_GetRxMessage+0xd0>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800213a:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 800213e:	0d7f      	lsrs	r7, r7, #21
 8002140:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002142:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8002146:	f007 0702 	and.w	r7, r7, #2
 800214a:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800214c:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8002150:	f007 070f 	and.w	r7, r7, #15
 8002154:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002156:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800215a:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800215e:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002160:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002164:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002166:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002168:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800216a:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 800216e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002170:	6802      	ldr	r2, [r0, #0]
 8002172:	4422      	add	r2, r4
 8002174:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002178:	0a12      	lsrs	r2, r2, #8
 800217a:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	4422      	add	r2, r4
 8002180:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002184:	0c12      	lsrs	r2, r2, #16
 8002186:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002188:	6802      	ldr	r2, [r0, #0]
 800218a:	4422      	add	r2, r4
 800218c:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8002190:	0e12      	lsrs	r2, r2, #24
 8002192:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002194:	6802      	ldr	r2, [r0, #0]
 8002196:	4422      	add	r2, r4
 8002198:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800219c:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800219e:	6802      	ldr	r2, [r0, #0]
 80021a0:	4422      	add	r2, r4
 80021a2:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80021a6:	0a12      	lsrs	r2, r2, #8
 80021a8:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021aa:	6802      	ldr	r2, [r0, #0]
 80021ac:	4422      	add	r2, r4
 80021ae:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 80021b2:	0c12      	lsrs	r2, r2, #16
 80021b4:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021b6:	6802      	ldr	r2, [r0, #0]
 80021b8:	4414      	add	r4, r2
 80021ba:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 80021be:	0e12      	lsrs	r2, r2, #24
 80021c0:	71da      	strb	r2, [r3, #7]
 80021c2:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021c4:	b951      	cbnz	r1, 80021dc <HAL_CAN_GetRxMessage+0xda>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	f042 0220 	orr.w	r2, r2, #32
 80021cc:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80021ce:	2000      	movs	r0, #0
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021d2:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80021d6:	08ff      	lsrs	r7, r7, #3
 80021d8:	6057      	str	r7, [r2, #4]
 80021da:	e7b2      	b.n	8002142 <HAL_CAN_GetRxMessage+0x40>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	611a      	str	r2, [r3, #16]
 80021e4:	e7f3      	b.n	80021ce <HAL_CAN_GetRxMessage+0xcc>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	e797      	b.n	800211e <HAL_CAN_GetRxMessage+0x1c>

080021ee <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 80021ee:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021f2:	3b01      	subs	r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d805      	bhi.n	8002204 <HAL_CAN_ActivateNotification+0x16>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021f8:	6802      	ldr	r2, [r0, #0]
 80021fa:	6953      	ldr	r3, [r2, #20]
 80021fc:	4319      	orrs	r1, r3
 80021fe:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8002200:	2000      	movs	r0, #0
 8002202:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002204:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800220a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800220c:	2001      	movs	r0, #1
  }
}
 800220e:	4770      	bx	lr

08002210 <HAL_CAN_DeactivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8002210:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002214:	3b01      	subs	r3, #1
 8002216:	2b01      	cmp	r3, #1
 8002218:	d806      	bhi.n	8002228 <HAL_CAN_DeactivateNotification+0x18>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800221a:	6802      	ldr	r2, [r0, #0]
 800221c:	6953      	ldr	r3, [r2, #20]
 800221e:	ea23 0101 	bic.w	r1, r3, r1
 8002222:	6151      	str	r1, [r2, #20]

    /* Return function status */
    return HAL_OK;
 8002224:	2000      	movs	r0, #0
 8002226:	4770      	bx	lr
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002228:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800222a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
  }
}
 8002232:	4770      	bx	lr

08002234 <HAL_CAN_TxMailbox0CompleteCallback>:
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_TxMailbox1CompleteCallback>:
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_TxMailbox2CompleteCallback>:
 8002238:	4770      	bx	lr

0800223a <HAL_CAN_TxMailbox0AbortCallback>:
 800223a:	4770      	bx	lr

0800223c <HAL_CAN_TxMailbox1AbortCallback>:
 800223c:	4770      	bx	lr

0800223e <HAL_CAN_TxMailbox2AbortCallback>:
 800223e:	4770      	bx	lr

08002240 <HAL_CAN_RxFifo0FullCallback>:
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8002242:	4770      	bx	lr

08002244 <HAL_CAN_RxFifo1FullCallback>:
 8002244:	4770      	bx	lr

08002246 <HAL_CAN_SleepCallback>:
 8002246:	4770      	bx	lr

08002248 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_IRQHandler>:
{
 800224c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002250:	6803      	ldr	r3, [r0, #0]
 8002252:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002254:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002258:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800225a:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800225e:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002262:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002266:	f016 0401 	ands.w	r4, r6, #1
{
 800226a:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800226c:	d022      	beq.n	80022b4 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800226e:	f017 0401 	ands.w	r4, r7, #1
 8002272:	d007      	beq.n	8002284 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002274:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002276:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002278:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800227a:	f140 80a3 	bpl.w	80023c4 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800227e:	f7ff ffd9 	bl	8002234 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002282:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002284:	05fb      	lsls	r3, r7, #23
 8002286:	d509      	bpl.n	800229c <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800228e:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002290:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002292:	f140 80a5 	bpl.w	80023e0 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002296:	4628      	mov	r0, r5
 8002298:	f7ff ffcd 	bl	8002236 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800229c:	03fb      	lsls	r3, r7, #15
 800229e:	d509      	bpl.n	80022b4 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022a6:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022a8:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022aa:	f140 80a7 	bpl.w	80023fc <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022ae:	4628      	mov	r0, r5
 80022b0:	f7ff ffc2 	bl	8002238 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80022b4:	0733      	lsls	r3, r6, #28
 80022b6:	d507      	bpl.n	80022c8 <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80022b8:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022bc:	bf1f      	itttt	ne
 80022be:	682b      	ldrne	r3, [r5, #0]
 80022c0:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80022c2:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80022c6:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80022c8:	0777      	lsls	r7, r6, #29
 80022ca:	d508      	bpl.n	80022de <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022cc:	f01b 0f08 	tst.w	fp, #8
 80022d0:	d005      	beq.n	80022de <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022d2:	682b      	ldr	r3, [r5, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022d8:	4628      	mov	r0, r5
 80022da:	f7ff ffb1 	bl	8002240 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022de:	07b0      	lsls	r0, r6, #30
 80022e0:	d506      	bpl.n	80022f0 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	0799      	lsls	r1, r3, #30
 80022e8:	d002      	beq.n	80022f0 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7ff f8fc 	bl	80014e8 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022f0:	0672      	lsls	r2, r6, #25
 80022f2:	d507      	bpl.n	8002304 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022f4:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022f8:	bf1f      	itttt	ne
 80022fa:	682b      	ldrne	r3, [r5, #0]
 80022fc:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022fe:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002302:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002304:	06b3      	lsls	r3, r6, #26
 8002306:	d508      	bpl.n	800231a <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002308:	f01a 0f08 	tst.w	sl, #8
 800230c:	d005      	beq.n	800231a <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	2208      	movs	r2, #8
 8002312:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002314:	4628      	mov	r0, r5
 8002316:	f7ff ff95 	bl	8002244 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800231a:	06f7      	lsls	r7, r6, #27
 800231c:	d506      	bpl.n	800232c <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800231e:	682b      	ldr	r3, [r5, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	0798      	lsls	r0, r3, #30
 8002324:	d002      	beq.n	800232c <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002326:	4628      	mov	r0, r5
 8002328:	f7ff ff8b 	bl	8002242 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800232c:	03b1      	lsls	r1, r6, #14
 800232e:	d508      	bpl.n	8002342 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002330:	f019 0f10 	tst.w	r9, #16
 8002334:	d005      	beq.n	8002342 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	2210      	movs	r2, #16
 800233a:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800233c:	4628      	mov	r0, r5
 800233e:	f7ff ff82 	bl	8002246 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002342:	03f2      	lsls	r2, r6, #15
 8002344:	d508      	bpl.n	8002358 <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002346:	f019 0f08 	tst.w	r9, #8
 800234a:	d005      	beq.n	8002358 <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	2208      	movs	r2, #8
 8002350:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002352:	4628      	mov	r0, r5
 8002354:	f7ff ff78 	bl	8002248 <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002358:	0433      	lsls	r3, r6, #16
 800235a:	d52a      	bpl.n	80023b2 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800235c:	f019 0f04 	tst.w	r9, #4
 8002360:	682a      	ldr	r2, [r5, #0]
 8002362:	d024      	beq.n	80023ae <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002364:	05f7      	lsls	r7, r6, #23
 8002366:	d504      	bpl.n	8002372 <HAL_CAN_IRQHandler+0x126>
 8002368:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 800236c:	bf18      	it	ne
 800236e:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002372:	05b0      	lsls	r0, r6, #22
 8002374:	d504      	bpl.n	8002380 <HAL_CAN_IRQHandler+0x134>
 8002376:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 800237a:	bf18      	it	ne
 800237c:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002380:	0571      	lsls	r1, r6, #21
 8002382:	d504      	bpl.n	800238e <HAL_CAN_IRQHandler+0x142>
 8002384:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8002388:	bf18      	it	ne
 800238a:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800238e:	0533      	lsls	r3, r6, #20
 8002390:	d50d      	bpl.n	80023ae <HAL_CAN_IRQHandler+0x162>
 8002392:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8002396:	d00a      	beq.n	80023ae <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8002398:	2b30      	cmp	r3, #48	; 0x30
 800239a:	d04c      	beq.n	8002436 <HAL_CAN_IRQHandler+0x1ea>
 800239c:	d83c      	bhi.n	8002418 <HAL_CAN_IRQHandler+0x1cc>
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d043      	beq.n	800242a <HAL_CAN_IRQHandler+0x1de>
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d044      	beq.n	8002430 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80023a6:	6993      	ldr	r3, [r2, #24]
 80023a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ac:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80023ae:	2304      	movs	r3, #4
 80023b0:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80023b2:	b12c      	cbz	r4, 80023c0 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 80023b4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80023b6:	431c      	orrs	r4, r3
 80023b8:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80023ba:	4628      	mov	r0, r5
 80023bc:	f7ff ff45 	bl	800224a <HAL_CAN_ErrorCallback>
 80023c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80023c4:	077a      	lsls	r2, r7, #29
 80023c6:	d405      	bmi.n	80023d4 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80023c8:	f017 0408 	ands.w	r4, r7, #8
 80023cc:	d105      	bne.n	80023da <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023ce:	f7ff ff34 	bl	800223a <HAL_CAN_TxMailbox0AbortCallback>
 80023d2:	e757      	b.n	8002284 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80023d4:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80023d8:	e754      	b.n	8002284 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023da:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80023de:	e751      	b.n	8002284 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023e0:	0579      	lsls	r1, r7, #21
 80023e2:	d502      	bpl.n	80023ea <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023e4:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80023e8:	e758      	b.n	800229c <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023ea:	053a      	lsls	r2, r7, #20
 80023ec:	d502      	bpl.n	80023f4 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023ee:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80023f2:	e753      	b.n	800229c <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023f4:	4628      	mov	r0, r5
 80023f6:	f7ff ff21 	bl	800223c <HAL_CAN_TxMailbox1AbortCallback>
 80023fa:	e74f      	b.n	800229c <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023fc:	0379      	lsls	r1, r7, #13
 80023fe:	d502      	bpl.n	8002406 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002400:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8002404:	e756      	b.n	80022b4 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002406:	033a      	lsls	r2, r7, #12
 8002408:	d502      	bpl.n	8002410 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800240a:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 800240e:	e751      	b.n	80022b4 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002410:	4628      	mov	r0, r5
 8002412:	f7ff ff14 	bl	800223e <HAL_CAN_TxMailbox2AbortCallback>
 8002416:	e74d      	b.n	80022b4 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8002418:	2b50      	cmp	r3, #80	; 0x50
 800241a:	d00f      	beq.n	800243c <HAL_CAN_IRQHandler+0x1f0>
 800241c:	2b60      	cmp	r3, #96	; 0x60
 800241e:	d010      	beq.n	8002442 <HAL_CAN_IRQHandler+0x1f6>
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	d1c0      	bne.n	80023a6 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002424:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8002428:	e7bd      	b.n	80023a6 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 800242a:	f044 0408 	orr.w	r4, r4, #8
            break;
 800242e:	e7ba      	b.n	80023a6 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002430:	f044 0410 	orr.w	r4, r4, #16
            break;
 8002434:	e7b7      	b.n	80023a6 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002436:	f044 0420 	orr.w	r4, r4, #32
            break;
 800243a:	e7b4      	b.n	80023a6 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 800243c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8002440:	e7b1      	b.n	80023a6 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002442:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8002446:	e7ae      	b.n	80023a6 <HAL_CAN_IRQHandler+0x15a>

08002448 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4a07      	ldr	r2, [pc, #28]	; (8002468 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800244a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002450:	041b      	lsls	r3, r3, #16
 8002452:	0c1b      	lsrs	r3, r3, #16
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	0200      	lsls	r0, r0, #8
 800245a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002462:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002464:	60d3      	str	r3, [r2, #12]
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b530      	push	{r4, r5, lr}
 8002470:	68dc      	ldr	r4, [r3, #12]
 8002472:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002476:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800247c:	2b04      	cmp	r3, #4
 800247e:	bf28      	it	cs
 8002480:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 0501 	mov.w	r5, #1
 8002488:	fa05 f303 	lsl.w	r3, r5, r3
 800248c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002490:	bf8c      	ite	hi
 8002492:	3c03      	subhi	r4, #3
 8002494:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002496:	4019      	ands	r1, r3
 8002498:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249a:	fa05 f404 	lsl.w	r4, r5, r4
 800249e:	3c01      	subs	r4, #1
 80024a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 80024a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	ea42 0201 	orr.w	r2, r2, r1
 80024a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ac:	bfad      	iteet	ge
 80024ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b2:	f000 000f 	andlt.w	r0, r0, #15
 80024b6:	4b06      	ldrlt	r3, [pc, #24]	; (80024d0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	bfb5      	itete	lt
 80024be:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80024c8:	bd30      	pop	{r4, r5, pc}
 80024ca:	bf00      	nop
 80024cc:	e000ed00 	.word	0xe000ed00
 80024d0:	e000ed14 	.word	0xe000ed14

080024d4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80024d4:	2800      	cmp	r0, #0
 80024d6:	db08      	blt.n	80024ea <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d8:	0942      	lsrs	r2, r0, #5
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 001f 	and.w	r0, r0, #31
 80024e0:	fa03 f000 	lsl.w	r0, r3, r0
 80024e4:	4b01      	ldr	r3, [pc, #4]	; (80024ec <HAL_NVIC_EnableIRQ+0x18>)
 80024e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80024ea:	4770      	bx	lr
 80024ec:	e000e100 	.word	0xe000e100

080024f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	3801      	subs	r0, #1
 80024f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80024f6:	d20a      	bcs.n	800250e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	21f0      	movs	r1, #240	; 0xf0
 8002500:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002504:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002506:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800251c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800251e:	4604      	mov	r4, r0
 8002520:	b168      	cbz	r0, 800253e <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002522:	7903      	ldrb	r3, [r0, #4]
 8002524:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002528:	b913      	cbnz	r3, 8002530 <HAL_DAC_Init+0x14>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800252a:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800252c:	f7ff f814 	bl	8001558 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002530:	2302      	movs	r3, #2
 8002532:	7123      	strb	r3, [r4, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002534:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002536:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002538:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800253a:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 800253c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800253e:	2001      	movs	r0, #1
}
 8002540:	bd10      	pop	{r4, pc}

08002542 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002542:	7943      	ldrb	r3, [r0, #5]
 8002544:	2b01      	cmp	r3, #1
{
 8002546:	b530      	push	{r4, r5, lr}
 8002548:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800254c:	d017      	beq.n	800257e <HAL_DAC_ConfigChannel+0x3c>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800254e:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002550:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8002552:	6823      	ldr	r3, [r4, #0]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002554:	f640 75fe 	movw	r5, #4094	; 0xffe
 8002558:	4095      	lsls	r5, r2
 800255a:	ea23 0505 	bic.w	r5, r3, r5
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800255e:	c90a      	ldmia	r1, {r1, r3}
 8002560:	430b      	orrs	r3, r1
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002562:	4093      	lsls	r3, r2
 8002564:	432b      	orrs	r3, r5
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002566:	6023      	str	r3, [r4, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	21c0      	movs	r1, #192	; 0xc0
 800256c:	fa01 f202 	lsl.w	r2, r1, r2
 8002570:	ea23 0202 	bic.w	r2, r3, r2
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002574:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002576:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002578:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800257a:	2300      	movs	r3, #0
 800257c:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800257e:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8002580:	bd30      	pop	{r4, r5, pc}
	...

08002584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002588:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002730 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002590:	4a65      	ldr	r2, [pc, #404]	; (8002728 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002592:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002734 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002596:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002598:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800259a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800259c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800259e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80025a2:	42ac      	cmp	r4, r5
 80025a4:	f040 80ac 	bne.w	8002700 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025a8:	684c      	ldr	r4, [r1, #4]
 80025aa:	f024 0c10 	bic.w	ip, r4, #16
 80025ae:	f10c 36ff 	add.w	r6, ip, #4294967295
 80025b2:	2e01      	cmp	r6, #1
 80025b4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80025b8:	d812      	bhi.n	80025e0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80025ba:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	2603      	movs	r6, #3
 80025be:	fa06 f60e 	lsl.w	r6, r6, lr
 80025c2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c6:	68ce      	ldr	r6, [r1, #12]
 80025c8:	fa06 f60e 	lsl.w	r6, r6, lr
 80025cc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80025ce:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80025d0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025d2:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025d6:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025da:	409e      	lsls	r6, r3
 80025dc:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80025de:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e0:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80025e2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e4:	fa06 f60e 	lsl.w	r6, r6, lr
 80025e8:	43f6      	mvns	r6, r6
 80025ea:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025ee:	688f      	ldr	r7, [r1, #8]
 80025f0:	fa07 f70e 	lsl.w	r7, r7, lr
 80025f4:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025f8:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 80025fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025fe:	d116      	bne.n	800262e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8002600:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002604:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002608:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800260c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002610:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002614:	f04f 0c0f 	mov.w	ip, #15
 8002618:	fa0c fc0b 	lsl.w	ip, ip, fp
 800261c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	690f      	ldr	r7, [r1, #16]
 8002622:	fa07 f70b 	lsl.w	r7, r7, fp
 8002626:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800262a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 800262e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002630:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002632:	f004 0703 	and.w	r7, r4, #3
 8002636:	fa07 fe0e 	lsl.w	lr, r7, lr
 800263a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 800263e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002640:	00e6      	lsls	r6, r4, #3
 8002642:	d55d      	bpl.n	8002700 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	f04f 0b00 	mov.w	fp, #0
 8002648:	f8cd b00c 	str.w	fp, [sp, #12]
 800264c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002650:	4e36      	ldr	r6, [pc, #216]	; (800272c <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002652:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8002656:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800265a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800265e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8002662:	9703      	str	r7, [sp, #12]
 8002664:	9f03      	ldr	r7, [sp, #12]
 8002666:	f023 0703 	bic.w	r7, r3, #3
 800266a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800266e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002672:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002676:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800267a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800267e:	f04f 0e0f 	mov.w	lr, #15
 8002682:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002688:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268c:	d03f      	beq.n	800270e <HAL_GPIO_Init+0x18a>
 800268e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002692:	42b0      	cmp	r0, r6
 8002694:	d03d      	beq.n	8002712 <HAL_GPIO_Init+0x18e>
 8002696:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800269a:	42b0      	cmp	r0, r6
 800269c:	d03b      	beq.n	8002716 <HAL_GPIO_Init+0x192>
 800269e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026a2:	42b0      	cmp	r0, r6
 80026a4:	d039      	beq.n	800271a <HAL_GPIO_Init+0x196>
 80026a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80026aa:	42b0      	cmp	r0, r6
 80026ac:	d037      	beq.n	800271e <HAL_GPIO_Init+0x19a>
 80026ae:	4548      	cmp	r0, r9
 80026b0:	d037      	beq.n	8002722 <HAL_GPIO_Init+0x19e>
 80026b2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80026b6:	42b0      	cmp	r0, r6
 80026b8:	bf14      	ite	ne
 80026ba:	2607      	movne	r6, #7
 80026bc:	2606      	moveq	r6, #6
 80026be:	fa06 f60c 	lsl.w	r6, r6, ip
 80026c2:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c6:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80026c8:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026cc:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80026d0:	bf0c      	ite	eq
 80026d2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80026d4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 80026d6:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 80026d8:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026da:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80026de:	bf0c      	ite	eq
 80026e0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80026e2:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 80026e4:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e6:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80026ec:	bf0c      	ite	eq
 80026ee:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 80026f0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 80026f2:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 80026f4:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026f6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80026f8:	bf54      	ite	pl
 80026fa:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80026fc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80026fe:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002700:	3301      	adds	r3, #1
 8002702:	2b10      	cmp	r3, #16
 8002704:	f47f af49 	bne.w	800259a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8002708:	b005      	add	sp, #20
 800270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800270e:	465e      	mov	r6, fp
 8002710:	e7d5      	b.n	80026be <HAL_GPIO_Init+0x13a>
 8002712:	2601      	movs	r6, #1
 8002714:	e7d3      	b.n	80026be <HAL_GPIO_Init+0x13a>
 8002716:	2602      	movs	r6, #2
 8002718:	e7d1      	b.n	80026be <HAL_GPIO_Init+0x13a>
 800271a:	2603      	movs	r6, #3
 800271c:	e7cf      	b.n	80026be <HAL_GPIO_Init+0x13a>
 800271e:	2604      	movs	r6, #4
 8002720:	e7cd      	b.n	80026be <HAL_GPIO_Init+0x13a>
 8002722:	2605      	movs	r6, #5
 8002724:	e7cb      	b.n	80026be <HAL_GPIO_Init+0x13a>
 8002726:	bf00      	nop
 8002728:	40013c00 	.word	0x40013c00
 800272c:	40020000 	.word	0x40020000
 8002730:	40023800 	.word	0x40023800
 8002734:	40021400 	.word	0x40021400

08002738 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002738:	b10a      	cbz	r2, 800273e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800273a:	6181      	str	r1, [r0, #24]
 800273c:	4770      	bx	lr
 800273e:	0409      	lsls	r1, r1, #16
 8002740:	e7fb      	b.n	800273a <HAL_GPIO_WritePin+0x2>
	...

08002744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002748:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	4604      	mov	r4, r0
 800274c:	b910      	cbnz	r0, 8002754 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800274e:	2001      	movs	r0, #1
 8002750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b44      	ldr	r3, [pc, #272]	; (8002868 <HAL_RCC_ClockConfig+0x124>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f002 020f 	and.w	r2, r2, #15
 800275c:	428a      	cmp	r2, r1
 800275e:	d329      	bcc.n	80027b4 <HAL_RCC_ClockConfig+0x70>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002760:	6821      	ldr	r1, [r4, #0]
 8002762:	078f      	lsls	r7, r1, #30
 8002764:	d42e      	bmi.n	80027c4 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002766:	07c8      	lsls	r0, r1, #31
 8002768:	d441      	bmi.n	80027ee <HAL_RCC_ClockConfig+0xaa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800276a:	4b3f      	ldr	r3, [pc, #252]	; (8002868 <HAL_RCC_ClockConfig+0x124>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f002 020f 	and.w	r2, r2, #15
 8002772:	4295      	cmp	r5, r2
 8002774:	d367      	bcc.n	8002846 <HAL_RCC_ClockConfig+0x102>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	0751      	lsls	r1, r2, #29
 800277a:	d46d      	bmi.n	8002858 <HAL_RCC_ClockConfig+0x114>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	0713      	lsls	r3, r2, #28
 800277e:	d507      	bpl.n	8002790 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002780:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_RCC_ClockConfig+0x128>)
 8002782:	6921      	ldr	r1, [r4, #16]
 8002784:	6893      	ldr	r3, [r2, #8]
 8002786:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800278a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800278e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002790:	f000 fa9c 	bl	8002ccc <HAL_RCC_GetSysClockFreq>
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <HAL_RCC_ClockConfig+0x128>)
 8002796:	4a36      	ldr	r2, [pc, #216]	; (8002870 <HAL_RCC_ClockConfig+0x12c>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	40d8      	lsrs	r0, r3
 80027a2:	4b34      	ldr	r3, [pc, #208]	; (8002874 <HAL_RCC_ClockConfig+0x130>)
 80027a4:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027a6:	4b34      	ldr	r3, [pc, #208]	; (8002878 <HAL_RCC_ClockConfig+0x134>)
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f7ff fbdf 	bl	8001f6c <HAL_InitTick>

  return HAL_OK;
 80027ae:	2000      	movs	r0, #0
 80027b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b4:	b2ca      	uxtb	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	4299      	cmp	r1, r3
 80027c0:	d1c5      	bne.n	800274e <HAL_RCC_ClockConfig+0xa>
 80027c2:	e7cd      	b.n	8002760 <HAL_RCC_ClockConfig+0x1c>
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c6:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ca:	bf1e      	ittt	ne
 80027cc:	689a      	ldrne	r2, [r3, #8]
 80027ce:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80027d2:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d4:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d6:	bf42      	ittt	mi
 80027d8:	689a      	ldrmi	r2, [r3, #8]
 80027da:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80027de:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	68a0      	ldr	r0, [r4, #8]
 80027e4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027e8:	4302      	orrs	r2, r0
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	e7bb      	b.n	8002766 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	6862      	ldr	r2, [r4, #4]
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <HAL_RCC_ClockConfig+0x128>)
 80027f2:	2a01      	cmp	r2, #1
 80027f4:	d11d      	bne.n	8002832 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	d0a7      	beq.n	800274e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4e1b      	ldr	r6, [pc, #108]	; (800286c <HAL_RCC_ClockConfig+0x128>)
 8002800:	68b3      	ldr	r3, [r6, #8]
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	4313      	orrs	r3, r2
 8002808:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800280a:	f7ff fbf9 	bl	8002000 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002812:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002814:	68b3      	ldr	r3, [r6, #8]
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	f003 030c 	and.w	r3, r3, #12
 800281c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002820:	d0a3      	beq.n	800276a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7ff fbed 	bl	8002000 <HAL_GetTick>
 8002826:	1bc0      	subs	r0, r0, r7
 8002828:	4540      	cmp	r0, r8
 800282a:	d9f3      	bls.n	8002814 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800282c:	2003      	movs	r0, #3
}
 800282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002832:	1e91      	subs	r1, r2, #2
 8002834:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002836:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002838:	d802      	bhi.n	8002840 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800283e:	e7dd      	b.n	80027fc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	f013 0f02 	tst.w	r3, #2
 8002844:	e7da      	b.n	80027fc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002846:	b2ea      	uxtb	r2, r5
 8002848:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	429d      	cmp	r5, r3
 8002852:	f47f af7c 	bne.w	800274e <HAL_RCC_ClockConfig+0xa>
 8002856:	e78e      	b.n	8002776 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4904      	ldr	r1, [pc, #16]	; (800286c <HAL_RCC_ClockConfig+0x128>)
 800285a:	68e0      	ldr	r0, [r4, #12]
 800285c:	688b      	ldr	r3, [r1, #8]
 800285e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002862:	4303      	orrs	r3, r0
 8002864:	608b      	str	r3, [r1, #8]
 8002866:	e789      	b.n	800277c <HAL_RCC_ClockConfig+0x38>
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	0800385c 	.word	0x0800385c
 8002874:	200002f4 	.word	0x200002f4
 8002878:	20000314 	.word	0x20000314

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x14>)
 800287e:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	4a03      	ldr	r2, [pc, #12]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800288a:	6810      	ldr	r0, [r2, #0]
}
 800288c:	40d8      	lsrs	r0, r3
 800288e:	4770      	bx	lr
 8002890:	40023800 	.word	0x40023800
 8002894:	0800386c 	.word	0x0800386c
 8002898:	200002f4 	.word	0x200002f4

0800289c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800289e:	4a05      	ldr	r2, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	4a03      	ldr	r2, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028aa:	6810      	ldr	r0, [r2, #0]
}
 80028ac:	40d8      	lsrs	r0, r3
 80028ae:	4770      	bx	lr
 80028b0:	40023800 	.word	0x40023800
 80028b4:	0800386c 	.word	0x0800386c
 80028b8:	200002f4 	.word	0x200002f4

080028bc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80028bc:	6803      	ldr	r3, [r0, #0]
{
 80028be:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80028c2:	f013 0601 	ands.w	r6, r3, #1
{
 80028c6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80028ca:	49aa      	ldr	r1, [pc, #680]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028cc:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80028ce:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80028d2:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80028d6:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028d8:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80028dc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028e0:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028e2:	079d      	lsls	r5, r3, #30
 80028e4:	d50b      	bpl.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028e6:	48a3      	ldr	r0, [pc, #652]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80028e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028ea:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80028ee:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 80028f2:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 80028f4:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028f6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 80028fa:	bf08      	it	eq
 80028fc:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028fe:	f013 0504 	ands.w	r5, r3, #4
 8002902:	d012      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002904:	499b      	ldr	r1, [pc, #620]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002906:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002908:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800290c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002910:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002914:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002918:	bf18      	it	ne
 800291a:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800291e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002922:	bf12      	itee	ne
 8002924:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 8002926:	2500      	moveq	r5, #0
      plli2sused = 1U;
 8002928:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800292a:	0718      	lsls	r0, r3, #28
 800292c:	d50f      	bpl.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292e:	4891      	ldr	r0, [pc, #580]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002932:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8002936:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800293a:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800293c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002940:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002944:	f000 8109 	beq.w	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 8002948:	2900      	cmp	r1, #0
 800294a:	bf08      	it	eq
 800294c:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800294e:	0699      	lsls	r1, r3, #26
 8002950:	d533      	bpl.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	4b87      	ldr	r3, [pc, #540]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002958:	4f87      	ldr	r7, [pc, #540]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800295c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff fb44 	bl	8002000 <HAL_GetTick>
 8002978:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	05da      	lsls	r2, r3, #23
 800297e:	f140 80ee 	bpl.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002982:	4f7c      	ldr	r7, [pc, #496]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002984:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002986:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800298a:	f040 80fb 	bne.w	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800298e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002990:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002994:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002998:	4a76      	ldr	r2, [pc, #472]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800299a:	f040 8116 	bne.w	8002bca <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800299e:	6891      	ldr	r1, [r2, #8]
 80029a0:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80029a4:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80029a8:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80029ac:	4301      	orrs	r1, r0
 80029ae:	6091      	str	r1, [r2, #8]
 80029b0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80029b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b6:	430b      	orrs	r3, r1
 80029b8:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80029be:	bf42      	ittt	mi
 80029c0:	4b6e      	ldrmi	r3, [pc, #440]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80029c2:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 80029c6:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	061a      	lsls	r2, r3, #24
 80029cc:	d508      	bpl.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80029ce:	4969      	ldr	r1, [pc, #420]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80029d2:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80029d6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80029da:	4302      	orrs	r2, r0
 80029dc:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029e0:	065f      	lsls	r7, r3, #25
 80029e2:	d508      	bpl.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80029e4:	4963      	ldr	r1, [pc, #396]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029e6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80029e8:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80029ec:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80029f0:	4302      	orrs	r2, r0
 80029f2:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029f6:	05d8      	lsls	r0, r3, #23
 80029f8:	d50c      	bpl.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029fa:	485e      	ldr	r0, [pc, #376]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80029fc:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80029fe:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8002a02:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8002a06:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 8002a08:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a0c:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 8002a10:	bf08      	it	eq
 8002a12:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002a14:	0599      	lsls	r1, r3, #22
 8002a16:	d508      	bpl.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002a18:	4956      	ldr	r1, [pc, #344]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a1a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002a1c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8002a20:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002a24:	4302      	orrs	r2, r0
 8002a26:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a2a:	055a      	lsls	r2, r3, #21
 8002a2c:	f100 80d1 	bmi.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002a30:	2e01      	cmp	r6, #1
 8002a32:	f040 80dc 	bne.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a36:	4e52      	ldr	r6, [pc, #328]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a38:	4f4e      	ldr	r7, [pc, #312]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a3e:	f7ff fadf 	bl	8002000 <HAL_GetTick>
 8002a42:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	f100 8125 	bmi.w	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002a4c:	6822      	ldr	r2, [r4, #0]
 8002a4e:	07d0      	lsls	r0, r2, #31
 8002a50:	d501      	bpl.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8002a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a54:	b11b      	cbz	r3, 8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002a56:	0791      	lsls	r1, r2, #30
 8002a58:	d515      	bpl.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002a5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a5c:	b99b      	cbnz	r3, 8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a5e:	4945      	ldr	r1, [pc, #276]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002a60:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a64:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a6c:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8002a70:	4303      	orrs	r3, r0
 8002a72:	6860      	ldr	r0, [r4, #4]
 8002a74:	4303      	orrs	r3, r0
 8002a76:	68a0      	ldr	r0, [r4, #8]
 8002a78:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a7c:	6960      	ldr	r0, [r4, #20]
 8002a7e:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002a82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a86:	0753      	lsls	r3, r2, #29
 8002a88:	d503      	bpl.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8002a8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a90:	d005      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002a92:	0717      	lsls	r7, r2, #28
 8002a94:	d520      	bpl.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9c:	d11c      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002a9e:	4935      	ldr	r1, [pc, #212]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002aa0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002aa8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aac:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002ab0:	4303      	orrs	r3, r0
 8002ab2:	6860      	ldr	r0, [r4, #4]
 8002ab4:	4303      	orrs	r3, r0
 8002ab6:	68a0      	ldr	r0, [r4, #8]
 8002ab8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002abc:	6920      	ldr	r0, [r4, #16]
 8002abe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002ac2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ac6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002aca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002acc:	f020 001f 	bic.w	r0, r0, #31
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	4303      	orrs	r3, r0
 8002ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ad8:	0550      	lsls	r0, r2, #21
 8002ada:	d51b      	bpl.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002adc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae2:	d117      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ae4:	4823      	ldr	r0, [pc, #140]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002ae6:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ae8:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aec:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002af0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8002af4:	433b      	orrs	r3, r7
 8002af6:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002af8:	f3c1 4101 	ubfx	r1, r1, #16, #2
 8002afc:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002afe:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 8002b02:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002b06:	68e1      	ldr	r1, [r4, #12]
 8002b08:	0849      	lsrs	r1, r1, #1
 8002b0a:	3901      	subs	r1, #1
 8002b0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002b10:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b14:	0511      	lsls	r1, r2, #20
 8002b16:	d511      	bpl.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b18:	6923      	ldr	r3, [r4, #16]
 8002b1a:	68a2      	ldr	r2, [r4, #8]
 8002b1c:	061b      	lsls	r3, r3, #24
 8002b1e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b22:	6862      	ldr	r2, [r4, #4]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	6962      	ldr	r2, [r4, #20]
 8002b28:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002b2c:	68e2      	ldr	r2, [r4, #12]
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b36:	4a0f      	ldr	r2, [pc, #60]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002b38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff fa5e 	bl	8002000 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b44:	4e0b      	ldr	r6, [pc, #44]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 8002b46:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b48:	6833      	ldr	r3, [r6, #0]
 8002b4a:	011a      	lsls	r2, r3, #4
 8002b4c:	d453      	bmi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b4e:	f7ff fa57 	bl	8002000 <HAL_GetTick>
 8002b52:	1bc0      	subs	r0, r0, r7
 8002b54:	2802      	cmp	r0, #2
 8002b56:	d9f7      	bls.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002b58:	e008      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 8002b5a:	2601      	movs	r6, #1
 8002b5c:	e6f7      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7ff fa4f 	bl	8002000 <HAL_GetTick>
 8002b62:	eba0 0008 	sub.w	r0, r0, r8
 8002b66:	2802      	cmp	r0, #2
 8002b68:	f67f af07 	bls.w	800297a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8002b6c:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002b6e:	b003      	add	sp, #12
 8002b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	424711e0 	.word	0x424711e0
 8002b80:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b84:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b86:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	f43f aeff 	beq.w	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b92:	4a4b      	ldr	r2, [pc, #300]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8002b94:	2101      	movs	r1, #1
 8002b96:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002ba0:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ba4:	07db      	lsls	r3, r3, #31
 8002ba6:	f57f aef2 	bpl.w	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 8002baa:	f7ff fa29 	bl	8002000 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bae:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002bb2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bb6:	0798      	lsls	r0, r3, #30
 8002bb8:	f53f aee9 	bmi.w	800298e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bbc:	f7ff fa20 	bl	8002000 <HAL_GetTick>
 8002bc0:	eba0 0008 	sub.w	r0, r0, r8
 8002bc4:	4548      	cmp	r0, r9
 8002bc6:	d9f5      	bls.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002bc8:	e7d0      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bca:	6891      	ldr	r1, [r2, #8]
 8002bcc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002bd0:	e6ed      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002bd2:	483c      	ldr	r0, [pc, #240]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8002bd4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002bd6:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 8002bda:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002bde:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002be0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002be4:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002be8:	f47f af22 	bne.w	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002bec:	e723      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002bee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf2:	f43f af20 	beq.w	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 8002bf6:	2d01      	cmp	r5, #1
 8002bf8:	d14b      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 8002bfa:	4d33      	ldr	r5, [pc, #204]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bfc:	4e31      	ldr	r6, [pc, #196]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002c02:	f7ff f9fd 	bl	8002000 <HAL_GetTick>
 8002c06:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002c08:	6833      	ldr	r3, [r6, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	d44b      	bmi.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002c0e:	6821      	ldr	r1, [r4, #0]
 8002c10:	074e      	lsls	r6, r1, #29
 8002c12:	d501      	bpl.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c16:	b11b      	cbz	r3, 8002c20 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002c18:	0708      	lsls	r0, r1, #28
 8002c1a:	d51a      	bpl.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c1e:	b9c3      	cbnz	r3, 8002c52 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c20:	4a28      	ldr	r2, [pc, #160]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c22:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002c24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002c28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c2c:	4303      	orrs	r3, r0
 8002c2e:	69e0      	ldr	r0, [r4, #28]
 8002c30:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002c34:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c36:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002c3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c3e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002c42:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002c44:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c48:	3801      	subs	r0, #1
 8002c4a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002c4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002c52:	05ca      	lsls	r2, r1, #23
 8002c54:	d514      	bpl.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8002c56:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c5c:	d110      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c5e:	4919      	ldr	r1, [pc, #100]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c60:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002c66:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	69e2      	ldr	r2, [r4, #28]
 8002c6e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002c72:	6a22      	ldr	r2, [r4, #32]
 8002c74:	0852      	lsrs	r2, r2, #1
 8002c76:	3a01      	subs	r2, #1
 8002c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8002c80:	2301      	movs	r3, #1
 8002c82:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002c84:	f7ff f9bc 	bl	8002000 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c88:	4c0e      	ldr	r4, [pc, #56]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 8002c8a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	d50f      	bpl.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8002c92:	2000      	movs	r0, #0
 8002c94:	e76b      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c96:	f7ff f9b3 	bl	8002000 <HAL_GetTick>
 8002c9a:	eba0 0008 	sub.w	r0, r0, r8
 8002c9e:	2802      	cmp	r0, #2
 8002ca0:	f67f aed0 	bls.w	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002ca4:	e762      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ca6:	f7ff f9ab 	bl	8002000 <HAL_GetTick>
 8002caa:	1bc0      	subs	r0, r0, r7
 8002cac:	2802      	cmp	r0, #2
 8002cae:	d9ab      	bls.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002cb0:	e75c      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002cb2:	f7ff f9a5 	bl	8002000 <HAL_GetTick>
 8002cb6:	1b40      	subs	r0, r0, r5
 8002cb8:	2802      	cmp	r0, #2
 8002cba:	d9e7      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002cbc:	e756      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002cbe:	bf00      	nop
 8002cc0:	42470e40 	.word	0x42470e40
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	42470070 	.word	0x42470070

08002ccc <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4920      	ldr	r1, [pc, #128]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8002cce:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd0:	688b      	ldr	r3, [r1, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d007      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x1e>
 8002cda:	2b0c      	cmp	r3, #12
 8002cdc:	d020      	beq.n	8002d20 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cde:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x88>)
 8002ce0:	481d      	ldr	r0, [pc, #116]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf18      	it	ne
 8002ce6:	4610      	movne	r0, r2
 8002ce8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cea:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cec:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cee:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf4:	bf14      	ite	ne
 8002cf6:	4818      	ldrne	r0, [pc, #96]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf8:	4816      	ldreq	r0, [pc, #88]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfa:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002cfe:	bf18      	it	ne
 8002d00:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d02:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d06:	fba1 0100 	umull	r0, r1, r1, r0
 8002d0a:	f7fd fa7b 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x84>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8002d1a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d1e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d20:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d22:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d24:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d26:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	bf14      	ite	ne
 8002d2c:	480a      	ldrne	r0, [pc, #40]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2e:	4809      	ldreq	r0, [pc, #36]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d30:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002d34:	bf18      	it	ne
 8002d36:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d38:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3c:	fba1 0100 	umull	r0, r1, r1, r0
 8002d40:	f7fd fa60 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x84>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002d4c:	e7e5      	b.n	8002d1a <HAL_RCC_GetSysClockFreq+0x4e>
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400
 8002d58:	007a1200 	.word	0x007a1200

08002d5c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d5c:	6803      	ldr	r3, [r0, #0]
{
 8002d5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	07df      	lsls	r7, r3, #31
{
 8002d64:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d66:	d410      	bmi.n	8002d8a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	079e      	lsls	r6, r3, #30
 8002d6c:	d467      	bmi.n	8002e3e <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	071a      	lsls	r2, r3, #28
 8002d72:	f100 80b2 	bmi.w	8002eda <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	075b      	lsls	r3, r3, #29
 8002d7a:	f100 80d0 	bmi.w	8002f1e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d7e:	69a2      	ldr	r2, [r4, #24]
 8002d80:	2a00      	cmp	r2, #0
 8002d82:	f040 8139 	bne.w	8002ff8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002d86:	2000      	movs	r0, #0
 8002d88:	e01e      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d8a:	4b97      	ldr	r3, [pc, #604]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	f002 020c 	and.w	r2, r2, #12
 8002d92:	2a04      	cmp	r2, #4
 8002d94:	d010      	beq.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d9c:	2a08      	cmp	r2, #8
 8002d9e:	d102      	bne.n	8002da6 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	025d      	lsls	r5, r3, #9
 8002da4:	d408      	bmi.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b90      	ldr	r3, [pc, #576]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dae:	2a0c      	cmp	r2, #12
 8002db0:	d10d      	bne.n	8002dce <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	0250      	lsls	r0, r2, #9
 8002db6:	d50a      	bpl.n	8002dce <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db8:	4b8b      	ldr	r3, [pc, #556]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	0399      	lsls	r1, r3, #14
 8002dbe:	d5d3      	bpl.n	8002d68 <HAL_RCC_OscConfig+0xc>
 8002dc0:	6863      	ldr	r3, [r4, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d0      	bne.n	8002d68 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002dc6:	2001      	movs	r0, #1
}
 8002dc8:	b002      	add	sp, #8
 8002dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dce:	6862      	ldr	r2, [r4, #4]
 8002dd0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002dd4:	d111      	bne.n	8002dfa <HAL_RCC_OscConfig+0x9e>
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dde:	f7ff f90f 	bl	8002000 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de2:	4d81      	ldr	r5, [pc, #516]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002de4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	682b      	ldr	r3, [r5, #0]
 8002de8:	039a      	lsls	r2, r3, #14
 8002dea:	d4bd      	bmi.n	8002d68 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dec:	f7ff f908 	bl	8002000 <HAL_GetTick>
 8002df0:	1b80      	subs	r0, r0, r6
 8002df2:	2864      	cmp	r0, #100	; 0x64
 8002df4:	d9f7      	bls.n	8002de6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002df6:	2003      	movs	r0, #3
 8002df8:	e7e6      	b.n	8002dc8 <HAL_RCC_OscConfig+0x6c>
 8002dfa:	4d7b      	ldr	r5, [pc, #492]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_OscConfig+0xb8>
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	682b      	ldr	r3, [r5, #0]
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	602b      	str	r3, [r5, #0]
 8002e12:	e7e4      	b.n	8002dde <HAL_RCC_OscConfig+0x82>
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	602b      	str	r3, [r5, #0]
 8002e1a:	682b      	ldr	r3, [r5, #0]
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e20:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	d1db      	bne.n	8002dde <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002e26:	f7ff f8eb 	bl	8002000 <HAL_GetTick>
 8002e2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2c:	682b      	ldr	r3, [r5, #0]
 8002e2e:	039b      	lsls	r3, r3, #14
 8002e30:	d59a      	bpl.n	8002d68 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e32:	f7ff f8e5 	bl	8002000 <HAL_GetTick>
 8002e36:	1b80      	subs	r0, r0, r6
 8002e38:	2864      	cmp	r0, #100	; 0x64
 8002e3a:	d9f7      	bls.n	8002e2c <HAL_RCC_OscConfig+0xd0>
 8002e3c:	e7db      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e3e:	4b6a      	ldr	r3, [pc, #424]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	f012 0f0c 	tst.w	r2, #12
 8002e46:	d010      	beq.n	8002e6a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e4e:	2a08      	cmp	r2, #8
 8002e50:	d102      	bne.n	8002e58 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	025f      	lsls	r7, r3, #9
 8002e56:	d508      	bpl.n	8002e6a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e58:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002e5a:	6893      	ldr	r3, [r2, #8]
 8002e5c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	d111      	bne.n	8002e88 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e64:	6853      	ldr	r3, [r2, #4]
 8002e66:	025e      	lsls	r6, r3, #9
 8002e68:	d40e      	bmi.n	8002e88 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b5f      	ldr	r3, [pc, #380]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	0795      	lsls	r5, r2, #30
 8002e70:	d502      	bpl.n	8002e78 <HAL_RCC_OscConfig+0x11c>
 8002e72:	68e2      	ldr	r2, [r4, #12]
 8002e74:	2a01      	cmp	r2, #1
 8002e76:	d1a6      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	6921      	ldr	r1, [r4, #16]
 8002e7c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002e80:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002e84:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e86:	e772      	b.n	8002d6e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e88:	68e2      	ldr	r2, [r4, #12]
 8002e8a:	4b58      	ldr	r3, [pc, #352]	; (8002fec <HAL_RCC_OscConfig+0x290>)
 8002e8c:	b1b2      	cbz	r2, 8002ebc <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e92:	f7ff f8b5 	bl	8002000 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e96:	4d54      	ldr	r5, [pc, #336]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002e98:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	682b      	ldr	r3, [r5, #0]
 8002e9c:	0798      	lsls	r0, r3, #30
 8002e9e:	d507      	bpl.n	8002eb0 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea0:	682b      	ldr	r3, [r5, #0]
 8002ea2:	6922      	ldr	r2, [r4, #16]
 8002ea4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ea8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002eac:	602b      	str	r3, [r5, #0]
 8002eae:	e75e      	b.n	8002d6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f8a6 	bl	8002000 <HAL_GetTick>
 8002eb4:	1b80      	subs	r0, r0, r6
 8002eb6:	2802      	cmp	r0, #2
 8002eb8:	d9ef      	bls.n	8002e9a <HAL_RCC_OscConfig+0x13e>
 8002eba:	e79c      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8002ebc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ebe:	f7ff f89f 	bl	8002000 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4d49      	ldr	r5, [pc, #292]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002ec4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	682b      	ldr	r3, [r5, #0]
 8002ec8:	0799      	lsls	r1, r3, #30
 8002eca:	f57f af50 	bpl.w	8002d6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ece:	f7ff f897 	bl	8002000 <HAL_GetTick>
 8002ed2:	1b80      	subs	r0, r0, r6
 8002ed4:	2802      	cmp	r0, #2
 8002ed6:	d9f6      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x16a>
 8002ed8:	e78d      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	6962      	ldr	r2, [r4, #20]
 8002edc:	4b44      	ldr	r3, [pc, #272]	; (8002ff0 <HAL_RCC_OscConfig+0x294>)
 8002ede:	b17a      	cbz	r2, 8002f00 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ee4:	f7ff f88c 	bl	8002000 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee8:	4d3f      	ldr	r5, [pc, #252]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002eea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002eee:	079f      	lsls	r7, r3, #30
 8002ef0:	f53f af41 	bmi.w	8002d76 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7ff f884 	bl	8002000 <HAL_GetTick>
 8002ef8:	1b80      	subs	r0, r0, r6
 8002efa:	2802      	cmp	r0, #2
 8002efc:	d9f6      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
 8002efe:	e77a      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002f00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002f02:	f7ff f87d 	bl	8002000 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f06:	4d38      	ldr	r5, [pc, #224]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002f08:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002f0c:	0798      	lsls	r0, r3, #30
 8002f0e:	f57f af32 	bpl.w	8002d76 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f12:	f7ff f875 	bl	8002000 <HAL_GetTick>
 8002f16:	1b80      	subs	r0, r0, r6
 8002f18:	2802      	cmp	r0, #2
 8002f1a:	d9f6      	bls.n	8002f0a <HAL_RCC_OscConfig+0x1ae>
 8002f1c:	e76b      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1e:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f22:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002f26:	d128      	bne.n	8002f7a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f28:	9201      	str	r2, [sp, #4]
 8002f2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002f3c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	4d2d      	ldr	r5, [pc, #180]	; (8002ff4 <HAL_RCC_OscConfig+0x298>)
 8002f40:	682b      	ldr	r3, [r5, #0]
 8002f42:	05d9      	lsls	r1, r3, #23
 8002f44:	d51b      	bpl.n	8002f7e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f46:	68a3      	ldr	r3, [r4, #8]
 8002f48:	4d27      	ldr	r5, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d127      	bne.n	8002f9e <HAL_RCC_OscConfig+0x242>
 8002f4e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002f56:	f7ff f853 	bl	8002000 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5a:	4d23      	ldr	r5, [pc, #140]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002f5c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002f64:	079b      	lsls	r3, r3, #30
 8002f66:	d539      	bpl.n	8002fdc <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8002f68:	2e00      	cmp	r6, #0
 8002f6a:	f43f af08 	beq.w	8002d7e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	; (8002fe8 <HAL_RCC_OscConfig+0x28c>)
 8002f70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f76:	6413      	str	r3, [r2, #64]	; 0x40
 8002f78:	e701      	b.n	8002d7e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	e7df      	b.n	8002f3e <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7e:	682b      	ldr	r3, [r5, #0]
 8002f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f84:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002f86:	f7ff f83b 	bl	8002000 <HAL_GetTick>
 8002f8a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	05da      	lsls	r2, r3, #23
 8002f90:	d4d9      	bmi.n	8002f46 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f92:	f7ff f835 	bl	8002000 <HAL_GetTick>
 8002f96:	1bc0      	subs	r0, r0, r7
 8002f98:	2802      	cmp	r0, #2
 8002f9a:	d9f7      	bls.n	8002f8c <HAL_RCC_OscConfig+0x230>
 8002f9c:	e72b      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d104      	bne.n	8002fac <HAL_RCC_OscConfig+0x250>
 8002fa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	672b      	str	r3, [r5, #112]	; 0x70
 8002faa:	e7d0      	b.n	8002f4e <HAL_RCC_OscConfig+0x1f2>
 8002fac:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	672a      	str	r2, [r5, #112]	; 0x70
 8002fb4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002fb6:	f022 0204 	bic.w	r2, r2, #4
 8002fba:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ca      	bne.n	8002f56 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8002fc0:	f7ff f81e 	bl	8002000 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002fc8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002fcc:	0798      	lsls	r0, r3, #30
 8002fce:	d5cb      	bpl.n	8002f68 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7ff f816 	bl	8002000 <HAL_GetTick>
 8002fd4:	1bc0      	subs	r0, r0, r7
 8002fd6:	4540      	cmp	r0, r8
 8002fd8:	d9f7      	bls.n	8002fca <HAL_RCC_OscConfig+0x26e>
 8002fda:	e70c      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fdc:	f7ff f810 	bl	8002000 <HAL_GetTick>
 8002fe0:	1bc0      	subs	r0, r0, r7
 8002fe2:	4540      	cmp	r0, r8
 8002fe4:	d9bd      	bls.n	8002f62 <HAL_RCC_OscConfig+0x206>
 8002fe6:	e706      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	42470000 	.word	0x42470000
 8002ff0:	42470e80 	.word	0x42470e80
 8002ff4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ff8:	4d23      	ldr	r5, [pc, #140]	; (8003088 <HAL_RCC_OscConfig+0x32c>)
 8002ffa:	68ab      	ldr	r3, [r5, #8]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	f43f aee0 	beq.w	8002dc6 <HAL_RCC_OscConfig+0x6a>
 8003006:	4e21      	ldr	r6, [pc, #132]	; (800308c <HAL_RCC_OscConfig+0x330>)
 8003008:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800300c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300e:	d12d      	bne.n	800306c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8003010:	f7fe fff6 	bl	8002000 <HAL_GetTick>
 8003014:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003016:	682b      	ldr	r3, [r5, #0]
 8003018:	0199      	lsls	r1, r3, #6
 800301a:	d421      	bmi.n	8003060 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800301c:	6a22      	ldr	r2, [r4, #32]
 800301e:	69e3      	ldr	r3, [r4, #28]
 8003020:	4313      	orrs	r3, r2
 8003022:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003024:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003028:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800302a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800302e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003030:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003034:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4c14      	ldr	r4, [pc, #80]	; (8003088 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003040:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003042:	2301      	movs	r3, #1
 8003044:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003046:	f7fe ffdb 	bl	8002000 <HAL_GetTick>
 800304a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	019a      	lsls	r2, r3, #6
 8003050:	f53f ae99 	bmi.w	8002d86 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe ffd4 	bl	8002000 <HAL_GetTick>
 8003058:	1b40      	subs	r0, r0, r5
 800305a:	2802      	cmp	r0, #2
 800305c:	d9f6      	bls.n	800304c <HAL_RCC_OscConfig+0x2f0>
 800305e:	e6ca      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003060:	f7fe ffce 	bl	8002000 <HAL_GetTick>
 8003064:	1bc0      	subs	r0, r0, r7
 8003066:	2802      	cmp	r0, #2
 8003068:	d9d5      	bls.n	8003016 <HAL_RCC_OscConfig+0x2ba>
 800306a:	e6c4      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800306c:	f7fe ffc8 	bl	8002000 <HAL_GetTick>
 8003070:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	f57f ae86 	bpl.w	8002d86 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe ffc1 	bl	8002000 <HAL_GetTick>
 800307e:	1b00      	subs	r0, r0, r4
 8003080:	2802      	cmp	r0, #2
 8003082:	d9f6      	bls.n	8003072 <HAL_RCC_OscConfig+0x316>
 8003084:	e6b7      	b.n	8002df6 <HAL_RCC_OscConfig+0x9a>
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	42470060 	.word	0x42470060

08003090 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003090:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003092:	4604      	mov	r4, r0
 8003094:	2800      	cmp	r0, #0
 8003096:	d036      	beq.n	8003106 <HAL_SPI_Init+0x76>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800309c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80030a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030a4:	b91b      	cbnz	r3, 80030ae <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030a6:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030aa:	f7fe fcf3 	bl	8001a94 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030ae:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030b0:	68a0      	ldr	r0, [r4, #8]
 80030b2:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 80030b4:	2302      	movs	r3, #2
 80030b6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80030ba:	680b      	ldr	r3, [r1, #0]
 80030bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030c0:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80030c2:	6863      	ldr	r3, [r4, #4]
 80030c4:	4303      	orrs	r3, r0
 80030c6:	68e0      	ldr	r0, [r4, #12]
 80030c8:	4303      	orrs	r3, r0
 80030ca:	6920      	ldr	r0, [r4, #16]
 80030cc:	4303      	orrs	r3, r0
 80030ce:	6960      	ldr	r0, [r4, #20]
 80030d0:	4303      	orrs	r3, r0
 80030d2:	69e0      	ldr	r0, [r4, #28]
 80030d4:	4303      	orrs	r3, r0
 80030d6:	6a20      	ldr	r0, [r4, #32]
 80030d8:	4303      	orrs	r3, r0
 80030da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80030dc:	4303      	orrs	r3, r0
 80030de:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80030e2:	4303      	orrs	r3, r0
 80030e4:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80030e6:	0c12      	lsrs	r2, r2, #16
 80030e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030ea:	f002 0204 	and.w	r2, r2, #4
 80030ee:	431a      	orrs	r2, r3
 80030f0:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030f2:	69cb      	ldr	r3, [r1, #28]
 80030f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030f8:	61cb      	str	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80030fc:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fe:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003100:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8003104:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003106:	2001      	movs	r0, #1
}
 8003108:	bd10      	pop	{r4, pc}

0800310a <HAL_TIM_OC_DelayElapsedCallback>:
 800310a:	4770      	bx	lr

0800310c <HAL_TIM_IC_CaptureCallback>:
 800310c:	4770      	bx	lr

0800310e <HAL_TIM_PWM_PulseFinishedCallback>:
 800310e:	4770      	bx	lr

08003110 <HAL_TIM_TriggerCallback>:
 8003110:	4770      	bx	lr

08003112 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003112:	6803      	ldr	r3, [r0, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	0791      	lsls	r1, r2, #30
{
 8003118:	b510      	push	{r4, lr}
 800311a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800311c:	d50e      	bpl.n	800313c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	0792      	lsls	r2, r2, #30
 8003122:	d50b      	bpl.n	800313c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003124:	f06f 0202 	mvn.w	r2, #2
 8003128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800312c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003130:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003132:	d077      	beq.n	8003224 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003134:	f7ff ffea 	bl	800310c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003138:	2300      	movs	r3, #0
 800313a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	0750      	lsls	r0, r2, #29
 8003142:	d510      	bpl.n	8003166 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	0751      	lsls	r1, r2, #29
 8003148:	d50d      	bpl.n	8003166 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800314a:	f06f 0204 	mvn.w	r2, #4
 800314e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003150:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003152:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003154:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003158:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800315a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315c:	d068      	beq.n	8003230 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800315e:	f7ff ffd5 	bl	800310c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	2300      	movs	r3, #0
 8003164:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	0712      	lsls	r2, r2, #28
 800316c:	d50f      	bpl.n	800318e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	0710      	lsls	r0, r2, #28
 8003172:	d50c      	bpl.n	800318e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003174:	f06f 0208 	mvn.w	r2, #8
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800317e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003180:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003182:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003184:	d05a      	beq.n	800323c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	f7ff ffc1 	bl	800310c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	2300      	movs	r3, #0
 800318c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	691a      	ldr	r2, [r3, #16]
 8003192:	06d2      	lsls	r2, r2, #27
 8003194:	d510      	bpl.n	80031b8 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	06d0      	lsls	r0, r2, #27
 800319a:	d50d      	bpl.n	80031b8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800319c:	f06f 0210 	mvn.w	r2, #16
 80031a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031aa:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ac:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ae:	d04b      	beq.n	8003248 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80031b0:	f7ff ffac 	bl	800310c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b4:	2300      	movs	r3, #0
 80031b6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	07d1      	lsls	r1, r2, #31
 80031be:	d508      	bpl.n	80031d2 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	07d2      	lsls	r2, r2, #31
 80031c4:	d505      	bpl.n	80031d2 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031c6:	f06f 0201 	mvn.w	r2, #1
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7fe fd59 	bl	8001c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	0610      	lsls	r0, r2, #24
 80031d8:	d508      	bpl.n	80031ec <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	0611      	lsls	r1, r2, #24
 80031de:	d505      	bpl.n	80031ec <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e6:	4620      	mov	r0, r4
 80031e8:	f000 f997 	bl	800351a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	0652      	lsls	r2, r2, #25
 80031f2:	d508      	bpl.n	8003206 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	0650      	lsls	r0, r2, #25
 80031f8:	d505      	bpl.n	8003206 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003200:	4620      	mov	r0, r4
 8003202:	f7ff ff85 	bl	8003110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003206:	6823      	ldr	r3, [r4, #0]
 8003208:	691a      	ldr	r2, [r3, #16]
 800320a:	0691      	lsls	r1, r2, #26
 800320c:	d522      	bpl.n	8003254 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	0692      	lsls	r2, r2, #26
 8003212:	d51f      	bpl.n	8003254 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003214:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003218:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800321a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003220:	f000 b97a 	b.w	8003518 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003224:	f7ff ff71 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ff70 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
 800322e:	e783      	b.n	8003138 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003230:	f7ff ff6b 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	4620      	mov	r0, r4
 8003236:	f7ff ff6a 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
 800323a:	e792      	b.n	8003162 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323c:	f7ff ff65 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003240:	4620      	mov	r0, r4
 8003242:	f7ff ff64 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
 8003246:	e7a0      	b.n	800318a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003248:	f7ff ff5f 	bl	800310a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff ff5e 	bl	800310e <HAL_TIM_PWM_PulseFinishedCallback>
 8003252:	e7af      	b.n	80031b4 <HAL_TIM_IRQHandler+0xa2>
 8003254:	bd10      	pop	{r4, pc}
	...

08003258 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003258:	4a30      	ldr	r2, [pc, #192]	; (800331c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800325a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800325c:	4290      	cmp	r0, r2
 800325e:	d012      	beq.n	8003286 <TIM_Base_SetConfig+0x2e>
 8003260:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003264:	d00f      	beq.n	8003286 <TIM_Base_SetConfig+0x2e>
 8003266:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800326a:	4290      	cmp	r0, r2
 800326c:	d00b      	beq.n	8003286 <TIM_Base_SetConfig+0x2e>
 800326e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003272:	4290      	cmp	r0, r2
 8003274:	d007      	beq.n	8003286 <TIM_Base_SetConfig+0x2e>
 8003276:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800327a:	4290      	cmp	r0, r2
 800327c:	d003      	beq.n	8003286 <TIM_Base_SetConfig+0x2e>
 800327e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003282:	4290      	cmp	r0, r2
 8003284:	d119      	bne.n	80032ba <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003286:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800328c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328e:	4a23      	ldr	r2, [pc, #140]	; (800331c <TIM_Base_SetConfig+0xc4>)
 8003290:	4290      	cmp	r0, r2
 8003292:	d029      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 8003294:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003298:	d026      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 800329a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800329e:	4290      	cmp	r0, r2
 80032a0:	d022      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032a6:	4290      	cmp	r0, r2
 80032a8:	d01e      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ae:	4290      	cmp	r0, r2
 80032b0:	d01a      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80032b6:	4290      	cmp	r0, r2
 80032b8:	d016      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <TIM_Base_SetConfig+0xc8>)
 80032bc:	4290      	cmp	r0, r2
 80032be:	d013      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032c4:	4290      	cmp	r0, r2
 80032c6:	d00f      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032cc:	4290      	cmp	r0, r2
 80032ce:	d00b      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032d0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80032d4:	4290      	cmp	r0, r2
 80032d6:	d007      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032dc:	4290      	cmp	r0, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0x90>
 80032e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e4:	4290      	cmp	r0, r2
 80032e6:	d103      	bne.n	80032f0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ee:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f0:	694a      	ldr	r2, [r1, #20]
 80032f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80032f8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032fa:	688b      	ldr	r3, [r1, #8]
 80032fc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032fe:	680b      	ldr	r3, [r1, #0]
 8003300:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <TIM_Base_SetConfig+0xc4>)
 8003304:	4298      	cmp	r0, r3
 8003306:	d003      	beq.n	8003310 <TIM_Base_SetConfig+0xb8>
 8003308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800330c:	4298      	cmp	r0, r3
 800330e:	d101      	bne.n	8003314 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003310:	690b      	ldr	r3, [r1, #16]
 8003312:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003314:	2301      	movs	r3, #1
 8003316:	6143      	str	r3, [r0, #20]
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40010000 	.word	0x40010000
 8003320:	40014000 	.word	0x40014000

08003324 <HAL_TIM_Base_Init>:
{
 8003324:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003326:	4604      	mov	r4, r0
 8003328:	b1a0      	cbz	r0, 8003354 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800332e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003332:	b91b      	cbnz	r3, 800333c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003334:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003338:	f7fe fc88 	bl	8001c4c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	1d21      	adds	r1, r4, #4
 8003346:	f7ff ff87 	bl	8003258 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800334a:	2301      	movs	r3, #1
 800334c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003350:	2000      	movs	r0, #0
 8003352:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003354:	2001      	movs	r0, #1
}
 8003356:	bd10      	pop	{r4, pc}

08003358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003358:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800335a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800335c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003362:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003366:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003368:	6083      	str	r3, [r0, #8]
 800336a:	bd10      	pop	{r4, pc}

0800336c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800336c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003370:	2b01      	cmp	r3, #1
{
 8003372:	b570      	push	{r4, r5, r6, lr}
 8003374:	4604      	mov	r4, r0
 8003376:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800337a:	d019      	beq.n	80033b0 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800337c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003380:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003382:	2301      	movs	r3, #1
 8003384:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003388:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800338a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003392:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003394:	680b      	ldr	r3, [r1, #0]
 8003396:	2b40      	cmp	r3, #64	; 0x40
 8003398:	d065      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0xfa>
 800339a:	d815      	bhi.n	80033c8 <HAL_TIM_ConfigClockSource+0x5c>
 800339c:	2b10      	cmp	r3, #16
 800339e:	d00c      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x4e>
 80033a0:	d807      	bhi.n	80033b2 <HAL_TIM_ConfigClockSource+0x46>
 80033a2:	b153      	cbz	r3, 80033ba <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80033a6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80033ac:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d001      	beq.n	80033ba <HAL_TIM_ConfigClockSource+0x4e>
 80033b6:	2b30      	cmp	r3, #48	; 0x30
 80033b8:	d1f4      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80033ba:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033bc:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c4:	4313      	orrs	r3, r2
 80033c6:	e01a      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80033c8:	2b60      	cmp	r3, #96	; 0x60
 80033ca:	d034      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0xca>
 80033cc:	d819      	bhi.n	8003402 <HAL_TIM_ConfigClockSource+0x96>
 80033ce:	2b50      	cmp	r3, #80	; 0x50
 80033d0:	d1e8      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d2:	684a      	ldr	r2, [r1, #4]
 80033d4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80033d6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d8:	6a05      	ldr	r5, [r0, #32]
 80033da:	f025 0501 	bic.w	r5, r5, #1
 80033de:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033ea:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80033ee:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80033f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80033f2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80033f4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033fa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80033fe:	6083      	str	r3, [r0, #8]
 8003400:	e7d0      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 8003402:	2b70      	cmp	r3, #112	; 0x70
 8003404:	d00c      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xb4>
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	d1cb      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 800340c:	68cb      	ldr	r3, [r1, #12]
 800340e:	684a      	ldr	r2, [r1, #4]
 8003410:	6889      	ldr	r1, [r1, #8]
 8003412:	f7ff ffa1 	bl	8003358 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003416:	6822      	ldr	r2, [r4, #0]
 8003418:	6893      	ldr	r3, [r2, #8]
 800341a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341e:	e008      	b.n	8003432 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8003420:	68cb      	ldr	r3, [r1, #12]
 8003422:	684a      	ldr	r2, [r1, #4]
 8003424:	6889      	ldr	r1, [r1, #8]
 8003426:	f7ff ff97 	bl	8003358 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800342e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003432:	6093      	str	r3, [r2, #8]
      break;
 8003434:	e7b6      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003436:	684d      	ldr	r5, [r1, #4]
 8003438:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343a:	6a01      	ldr	r1, [r0, #32]
 800343c:	f021 0110 	bic.w	r1, r1, #16
 8003440:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003442:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003444:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003446:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800344a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800344e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003452:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003456:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003458:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800345a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800345c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003460:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8003464:	e7cb      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	684a      	ldr	r2, [r1, #4]
 8003468:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800346a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346c:	6a05      	ldr	r5, [r0, #32]
 800346e:	f025 0501 	bic.w	r5, r5, #1
 8003472:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003474:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003476:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800347a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003482:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003484:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003486:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003488:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800348e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8003492:	e7b4      	b.n	80033fe <HAL_TIM_ConfigClockSource+0x92>

08003494 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003494:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003498:	2b01      	cmp	r3, #1
{
 800349a:	b530      	push	{r4, r5, lr}
 800349c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80034a0:	d035      	beq.n	800350e <HAL_TIMEx_MasterConfigSynchronization+0x7a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034a6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80034aa:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ac:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80034b0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80034b4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80034b8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ba:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034bc:	4c15      	ldr	r4, [pc, #84]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0x80>)
 80034be:	42a3      	cmp	r3, r4
 80034c0:	d01a      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c6:	d017      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034c8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	d013      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034d4:	42a3      	cmp	r3, r4
 80034d6:	d00f      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80034dc:	42a3      	cmp	r3, r4
 80034de:	d00b      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034e0:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80034e4:	42a3      	cmp	r3, r4
 80034e6:	d007      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034e8:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80034ec:	42a3      	cmp	r3, r4
 80034ee:	d003      	beq.n	80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80034f0:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80034f4:	42a3      	cmp	r3, r4
 80034f6:	d104      	bne.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fe:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003502:	2301      	movs	r3, #1
 8003504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003508:	2300      	movs	r3, #0
 800350a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800350e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003510:	bd30      	pop	{r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000

08003518 <HAL_TIMEx_CommutCallback>:
 8003518:	4770      	bx	lr

0800351a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800351a:	4770      	bx	lr

0800351c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800351e:	6803      	ldr	r3, [r0, #0]
 8003520:	68c1      	ldr	r1, [r0, #12]
 8003522:	691a      	ldr	r2, [r3, #16]
{
 8003524:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003526:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800352a:	430a      	orrs	r2, r1
 800352c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800352e:	6925      	ldr	r5, [r4, #16]
 8003530:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003532:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003534:	69c0      	ldr	r0, [r0, #28]
 8003536:	432a      	orrs	r2, r5
 8003538:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800353a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800353e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8003540:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003544:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003546:	430a      	orrs	r2, r1
 8003548:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	69a1      	ldr	r1, [r4, #24]
 800354e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003552:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003554:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003558:	615a      	str	r2, [r3, #20]
 800355a:	4a25      	ldr	r2, [pc, #148]	; (80035f0 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355c:	d129      	bne.n	80035b2 <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800355e:	4293      	cmp	r3, r2
 8003560:	d003      	beq.n	800356a <UART_SetConfig+0x4e>
 8003562:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003566:	4293      	cmp	r3, r2
 8003568:	d120      	bne.n	80035ac <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800356a:	f7ff f997 	bl	800289c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800356e:	6862      	ldr	r2, [r4, #4]
 8003570:	6825      	ldr	r5, [r4, #0]
 8003572:	1892      	adds	r2, r2, r2
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f04f 0119 	mov.w	r1, #25
 800357c:	415b      	adcs	r3, r3
 800357e:	fba0 0101 	umull	r0, r1, r0, r1
 8003582:	f7fc fe3f 	bl	8000204 <__aeabi_uldivmod>
 8003586:	2164      	movs	r1, #100	; 0x64
 8003588:	fbb0 f4f1 	udiv	r4, r0, r1
 800358c:	fb01 0314 	mls	r3, r1, r4, r0
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	3332      	adds	r3, #50	; 0x32
 8003594:	fbb3 f3f1 	udiv	r3, r3, r1
 8003598:	f003 0207 	and.w	r2, r3, #7
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80035a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035a6:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a8:	60ab      	str	r3, [r5, #8]
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ac:	f7ff f966 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 80035b0:	e7dd      	b.n	800356e <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d002      	beq.n	80035bc <UART_SetConfig+0xa0>
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <UART_SetConfig+0xd8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d116      	bne.n	80035ea <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035bc:	f7ff f96e 	bl	800289c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	6825      	ldr	r5, [r4, #0]
 80035c4:	2119      	movs	r1, #25
 80035c6:	009a      	lsls	r2, r3, #2
 80035c8:	fba0 0101 	umull	r0, r1, r0, r1
 80035cc:	0f9b      	lsrs	r3, r3, #30
 80035ce:	f7fc fe19 	bl	8000204 <__aeabi_uldivmod>
 80035d2:	2264      	movs	r2, #100	; 0x64
 80035d4:	fbb0 f1f2 	udiv	r1, r0, r2
 80035d8:	fb02 0311 	mls	r3, r2, r1, r0
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3332      	adds	r3, #50	; 0x32
 80035e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80035e8:	e7de      	b.n	80035a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ea:	f7ff f947 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 80035ee:	e7e7      	b.n	80035c0 <UART_SetConfig+0xa4>
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40011400 	.word	0x40011400

080035f8 <HAL_UART_Init>:
{
 80035f8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80035fa:	4604      	mov	r4, r0
 80035fc:	b340      	cbz	r0, 8003650 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003602:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003606:	b91b      	cbnz	r3, 8003610 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003608:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800360c:	f7fe fb8a 	bl	8001d24 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003610:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003612:	2324      	movs	r3, #36	; 0x24
 8003614:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003618:	68d3      	ldr	r3, [r2, #12]
 800361a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003620:	4620      	mov	r0, r4
 8003622:	f7ff ff7b 	bl	800351c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003626:	6823      	ldr	r3, [r4, #0]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003636:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003642:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003646:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800364a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800364e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003650:	2001      	movs	r0, #1
}
 8003652:	bd10      	pop	{r4, pc}

08003654 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003654:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003658:	2b20      	cmp	r3, #32
 800365a:	d118      	bne.n	800368e <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800365c:	b1a9      	cbz	r1, 800368a <HAL_UART_Transmit_IT+0x36>
 800365e:	b1a2      	cbz	r2, 800368a <HAL_UART_Transmit_IT+0x36>
    __HAL_LOCK(huart);
 8003660:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003664:	2b01      	cmp	r3, #1
 8003666:	d012      	beq.n	800368e <HAL_UART_Transmit_IT+0x3a>
    huart->TxXferCount = Size;
 8003668:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->pTxBuffPtr = pData;
 800366a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800366c:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003670:	6801      	ldr	r1, [r0, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003674:	2221      	movs	r2, #33	; 0x21
 8003676:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800367a:	68ca      	ldr	r2, [r1, #12]
    __HAL_UNLOCK(huart);
 800367c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003680:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003684:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8003686:	4618      	mov	r0, r3
 8003688:	4770      	bx	lr
      return HAL_ERROR;
 800368a:	2001      	movs	r0, #1
 800368c:	4770      	bx	lr
    return HAL_BUSY;
 800368e:	2002      	movs	r0, #2
}
 8003690:	4770      	bx	lr

08003692 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003692:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003696:	2b20      	cmp	r3, #32
 8003698:	d120      	bne.n	80036dc <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 800369a:	b1e9      	cbz	r1, 80036d8 <HAL_UART_Receive_IT+0x46>
 800369c:	b1e2      	cbz	r2, 80036d8 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 800369e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d01a      	beq.n	80036dc <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80036a6:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80036a8:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036aa:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ac:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ae:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036b0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036b4:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80036b6:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036b8:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80036ba:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036be:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80036c2:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80036c4:	6951      	ldr	r1, [r2, #20]
 80036c6:	f041 0101 	orr.w	r1, r1, #1
 80036ca:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80036cc:	68d1      	ldr	r1, [r2, #12]
 80036ce:	f041 0120 	orr.w	r1, r1, #32
 80036d2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80036d4:	4618      	mov	r0, r3
 80036d6:	4770      	bx	lr
      return HAL_ERROR;
 80036d8:	2001      	movs	r0, #1
 80036da:	4770      	bx	lr
    return HAL_BUSY;
 80036dc:	2002      	movs	r0, #2
}
 80036de:	4770      	bx	lr

080036e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003718 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036e6:	e003      	b.n	80036f0 <LoopCopyDataInit>

080036e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036e8:	4b0c      	ldr	r3, [pc, #48]	; (800371c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036ee:	3104      	adds	r1, #4

080036f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80036f0:	480b      	ldr	r0, [pc, #44]	; (8003720 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80036f2:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80036f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80036f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80036f8:	d3f6      	bcc.n	80036e8 <CopyDataInit>
  ldr  r2, =_sbss
 80036fa:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80036fc:	e002      	b.n	8003704 <LoopFillZerobss>

080036fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80036fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003700:	f842 3b04 	str.w	r3, [r2], #4

08003704 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003704:	4b09      	ldr	r3, [pc, #36]	; (800372c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003706:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003708:	d3f9      	bcc.n	80036fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800370a:	f7fe fa61 	bl	8001bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800370e:	f000 f817 	bl	8003740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003712:	f7fd ffbb 	bl	800168c <main>
  bx  lr    
 8003716:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003718:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800371c:	0800398c 	.word	0x0800398c
  ldr  r0, =_sdata
 8003720:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003724:	2000037c 	.word	0x2000037c
  ldr  r2, =_sbss
 8003728:	2000037c 	.word	0x2000037c
  ldr  r3, = _ebss
 800372c:	2000a1dc 	.word	0x2000a1dc

08003730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003730:	e7fe      	b.n	8003730 <ADC_IRQHandler>
	...

08003734 <__errno>:
 8003734:	4b01      	ldr	r3, [pc, #4]	; (800373c <__errno+0x8>)
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000318 	.word	0x20000318

08003740 <__libc_init_array>:
 8003740:	b570      	push	{r4, r5, r6, lr}
 8003742:	4e0d      	ldr	r6, [pc, #52]	; (8003778 <__libc_init_array+0x38>)
 8003744:	4c0d      	ldr	r4, [pc, #52]	; (800377c <__libc_init_array+0x3c>)
 8003746:	1ba4      	subs	r4, r4, r6
 8003748:	10a4      	asrs	r4, r4, #2
 800374a:	2500      	movs	r5, #0
 800374c:	42a5      	cmp	r5, r4
 800374e:	d109      	bne.n	8003764 <__libc_init_array+0x24>
 8003750:	4e0b      	ldr	r6, [pc, #44]	; (8003780 <__libc_init_array+0x40>)
 8003752:	4c0c      	ldr	r4, [pc, #48]	; (8003784 <__libc_init_array+0x44>)
 8003754:	f000 f876 	bl	8003844 <_init>
 8003758:	1ba4      	subs	r4, r4, r6
 800375a:	10a4      	asrs	r4, r4, #2
 800375c:	2500      	movs	r5, #0
 800375e:	42a5      	cmp	r5, r4
 8003760:	d105      	bne.n	800376e <__libc_init_array+0x2e>
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003768:	4798      	blx	r3
 800376a:	3501      	adds	r5, #1
 800376c:	e7ee      	b.n	800374c <__libc_init_array+0xc>
 800376e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003772:	4798      	blx	r3
 8003774:	3501      	adds	r5, #1
 8003776:	e7f2      	b.n	800375e <__libc_init_array+0x1e>
 8003778:	08003984 	.word	0x08003984
 800377c:	08003984 	.word	0x08003984
 8003780:	08003984 	.word	0x08003984
 8003784:	08003988 	.word	0x08003988

08003788 <memset>:
 8003788:	4402      	add	r2, r0
 800378a:	4603      	mov	r3, r0
 800378c:	4293      	cmp	r3, r2
 800378e:	d100      	bne.n	8003792 <memset+0xa>
 8003790:	4770      	bx	lr
 8003792:	f803 1b01 	strb.w	r1, [r3], #1
 8003796:	e7f9      	b.n	800378c <memset+0x4>

08003798 <abort>:
 8003798:	b508      	push	{r3, lr}
 800379a:	2006      	movs	r0, #6
 800379c:	f000 f836 	bl	800380c <raise>
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7fe fa0f 	bl	8001bc4 <_exit>

080037a6 <memcpy>:
 80037a6:	b510      	push	{r4, lr}
 80037a8:	1e43      	subs	r3, r0, #1
 80037aa:	440a      	add	r2, r1
 80037ac:	4291      	cmp	r1, r2
 80037ae:	d100      	bne.n	80037b2 <memcpy+0xc>
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037ba:	e7f7      	b.n	80037ac <memcpy+0x6>

080037bc <_raise_r>:
 80037bc:	291f      	cmp	r1, #31
 80037be:	b538      	push	{r3, r4, r5, lr}
 80037c0:	4604      	mov	r4, r0
 80037c2:	460d      	mov	r5, r1
 80037c4:	d904      	bls.n	80037d0 <_raise_r+0x14>
 80037c6:	2316      	movs	r3, #22
 80037c8:	6003      	str	r3, [r0, #0]
 80037ca:	f04f 30ff 	mov.w	r0, #4294967295
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80037d2:	b112      	cbz	r2, 80037da <_raise_r+0x1e>
 80037d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80037d8:	b94b      	cbnz	r3, 80037ee <_raise_r+0x32>
 80037da:	4620      	mov	r0, r4
 80037dc:	f000 f830 	bl	8003840 <_getpid_r>
 80037e0:	462a      	mov	r2, r5
 80037e2:	4601      	mov	r1, r0
 80037e4:	4620      	mov	r0, r4
 80037e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ea:	f000 b817 	b.w	800381c <_kill_r>
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d00a      	beq.n	8003808 <_raise_r+0x4c>
 80037f2:	1c59      	adds	r1, r3, #1
 80037f4:	d103      	bne.n	80037fe <_raise_r+0x42>
 80037f6:	2316      	movs	r3, #22
 80037f8:	6003      	str	r3, [r0, #0]
 80037fa:	2001      	movs	r0, #1
 80037fc:	bd38      	pop	{r3, r4, r5, pc}
 80037fe:	2400      	movs	r4, #0
 8003800:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003804:	4628      	mov	r0, r5
 8003806:	4798      	blx	r3
 8003808:	2000      	movs	r0, #0
 800380a:	bd38      	pop	{r3, r4, r5, pc}

0800380c <raise>:
 800380c:	4b02      	ldr	r3, [pc, #8]	; (8003818 <raise+0xc>)
 800380e:	4601      	mov	r1, r0
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	f7ff bfd3 	b.w	80037bc <_raise_r>
 8003816:	bf00      	nop
 8003818:	20000318 	.word	0x20000318

0800381c <_kill_r>:
 800381c:	b538      	push	{r3, r4, r5, lr}
 800381e:	4c07      	ldr	r4, [pc, #28]	; (800383c <_kill_r+0x20>)
 8003820:	2300      	movs	r3, #0
 8003822:	4605      	mov	r5, r0
 8003824:	4608      	mov	r0, r1
 8003826:	4611      	mov	r1, r2
 8003828:	6023      	str	r3, [r4, #0]
 800382a:	f7fe f9c3 	bl	8001bb4 <_kill>
 800382e:	1c43      	adds	r3, r0, #1
 8003830:	d102      	bne.n	8003838 <_kill_r+0x1c>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	b103      	cbz	r3, 8003838 <_kill_r+0x1c>
 8003836:	602b      	str	r3, [r5, #0]
 8003838:	bd38      	pop	{r3, r4, r5, pc}
 800383a:	bf00      	nop
 800383c:	2000a1d8 	.word	0x2000a1d8

08003840 <_getpid_r>:
 8003840:	f7fe b9b6 	b.w	8001bb0 <_getpid>

08003844 <_init>:
 8003844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003846:	bf00      	nop
 8003848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384a:	bc08      	pop	{r3}
 800384c:	469e      	mov	lr, r3
 800384e:	4770      	bx	lr

08003850 <_fini>:
 8003850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003852:	bf00      	nop
 8003854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003856:	bc08      	pop	{r3}
 8003858:	469e      	mov	lr, r3
 800385a:	4770      	bx	lr
