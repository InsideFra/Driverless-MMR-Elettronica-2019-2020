
prova sensore hall while.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003728  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080038f8  080038f8  000138f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800399c  0800399c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080039a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000074  08003a18  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08003a18  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c37e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ac9  00000000  00000000  0002c422  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002def0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e70  00000000  00000000  0002f578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bd4  00000000  00000000  000513e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf9a7  00000000  00000000  00059fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003410  00000000  00000000  001299e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080038e0 	.word	0x080038e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080038e0 	.word	0x080038e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <Memory_Management>:

 //----------------------------------


 // FUNZIONI-------------------------
void Memory_Management( uint8_t scrittura){
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
static uint8_t dimensione = 100;
	if(scrittura>=dimensione -5){
 80005ca:	79fa      	ldrb	r2, [r7, #7]
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <Memory_Management+0x28>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	3b05      	subs	r3, #5
 80005d2:	429a      	cmp	r2, r3
 80005d4:	db01      	blt.n	80005da <Memory_Management+0x1a>
		scrittura=0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	71fb      	strb	r3, [r7, #7]
	}

}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000

080005ec <pollingsensore>:


void pollingsensore(){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
     static uint8_t index=0;
	 uint8_t readstatus;
	 static uint8_t lastread=0;
	 Memory_Management(index); // gestione index
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <pollingsensore+0x7c>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffe2 	bl	80005c0 <Memory_Management>
	 readstatus=HAL_GPIO_ReadPin(GPIOA, sensore_Pin);
 80005fc:	2110      	movs	r1, #16
 80005fe:	481b      	ldr	r0, [pc, #108]	; (800066c <pollingsensore+0x80>)
 8000600:	f000 ff3a 	bl	8001478 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
			if(readstatus!=lastread){   // se lo stato passa da 1 a 0 o viceversa
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <pollingsensore+0x84>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	429a      	cmp	r2, r3
 8000610:	d025      	beq.n	800065e <pollingsensore+0x72>
				Memoria[index].tmps=TC;  // save time
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <pollingsensore+0x7c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	4a16      	ldr	r2, [pc, #88]	; (8000674 <pollingsensore+0x88>)
 800061a:	460b      	mov	r3, r1
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	440b      	add	r3, r1
 8000620:	005b      	lsls	r3, r3, #1
 8000622:	4413      	add	r3, r2
 8000624:	4914      	ldr	r1, [pc, #80]	; (8000678 <pollingsensore+0x8c>)
 8000626:	461a      	mov	r2, r3
 8000628:	460b      	mov	r3, r1
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6013      	str	r3, [r2, #0]
				Memoria[index].read_value=readstatus; //save status
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <pollingsensore+0x7c>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4619      	mov	r1, r3
 8000634:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <pollingsensore+0x88>)
 8000636:	460b      	mov	r3, r1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	440b      	add	r3, r1
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	3304      	adds	r3, #4
 8000642:	79fa      	ldrb	r2, [r7, #7]
 8000644:	701a      	strb	r2, [r3, #0]
				index++;   //upgrade index
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <pollingsensore+0x7c>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	b2da      	uxtb	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <pollingsensore+0x7c>)
 8000650:	701a      	strb	r2, [r3, #0]
				lastread=readstatus;
 8000652:	4a07      	ldr	r2, [pc, #28]	; (8000670 <pollingsensore+0x84>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	7013      	strb	r3, [r2, #0]
				check=1;  // almeno un valore sta in memoria
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <pollingsensore+0x90>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
				}

	}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000091 	.word	0x20000091
 800066c:	40020000 	.word	0x40020000
 8000670:	20000092 	.word	0x20000092
 8000674:	20000168 	.word	0x20000168
 8000678:	20000094 	.word	0x20000094
 800067c:	20000090 	.word	0x20000090

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fbe2 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f816 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f948 	bl	8000920 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000690:	f000 f91c 	bl	80008cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000694:	f000 f87e 	bl	8000794 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000698:	f000 f8ca 	bl	8000830 <MX_TIM4_Init>

  HAL_TIM_Base_Start_IT(&htim3);
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <main+0x30>)
 800069e:	f001 fc5c 	bl	8001f5a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <main+0x34>)
 80006a4:	f001 fc59 	bl	8001f5a <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
pollingsensore();
 80006a8:	f7ff ffa0 	bl	80005ec <pollingsensore>
 80006ac:	e7fc      	b.n	80006a8 <main+0x28>
 80006ae:	bf00      	nop
 80006b0:	200000e8 	.word	0x200000e8
 80006b4:	200000a8 	.word	0x200000a8

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	; 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fcfc 	bl	80030c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a29      	ldr	r2, [pc, #164]	; (800078c <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <SystemClock_Config+0xd8>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000736:	2304      	movs	r3, #4
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f982 	bl	8001a50 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000752:	f000 f961 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 feb2 	bl	80014dc <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077e:	f000 f94b 	bl	8000a18 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_TIM3_Init+0x94>)
 80007b2:	4a1e      	ldr	r2, [pc, #120]	; (800082c <MX_TIM3_Init+0x98>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_TIM3_Init+0x94>)
 80007b8:	f44f 7252 	mov.w	r2, #840	; 0x348
 80007bc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_TIM3_Init+0x94>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10510;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_TIM3_Init+0x94>)
 80007c6:	f642 120e 	movw	r2, #10510	; 0x290e
 80007ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_TIM3_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_TIM3_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_TIM3_Init+0x94>)
 80007da:	f001 fb93 	bl	8001f04 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007e4:	f000 f918 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4619      	mov	r1, r3
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <MX_TIM3_Init+0x94>)
 80007f6:	f001 fcdc 	bl	80021b2 <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000800:	f000 f90a 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM3_Init+0x94>)
 8000812:	f001 fef1 	bl	80025f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800081c:	f000 f8fc 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	200000e8 	.word	0x200000e8
 800082c:	40000400 	.word	0x40000400

08000830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_TIM4_Init+0x94>)
 800084e:	4a1e      	ldr	r2, [pc, #120]	; (80008c8 <MX_TIM4_Init+0x98>)
 8000850:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_TIM4_Init+0x94>)
 8000854:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000858:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_TIM4_Init+0x94>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_TIM4_Init+0x94>)
 8000862:	2264      	movs	r2, #100	; 0x64
 8000864:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_TIM4_Init+0x94>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_TIM4_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000872:	4814      	ldr	r0, [pc, #80]	; (80008c4 <MX_TIM4_Init+0x94>)
 8000874:	f001 fb46 	bl	8001f04 <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800087e:	f000 f8cb 	bl	8000a18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	4619      	mov	r1, r3
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_TIM4_Init+0x94>)
 8000890:	f001 fc8f 	bl	80021b2 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800089a:	f000 f8bd 	bl	8000a18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <MX_TIM4_Init+0x94>)
 80008ac:	f001 fea4 	bl	80025f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008b6:	f000 f8af 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000a8 	.word	0x200000a8
 80008c8:	40000800 	.word	0x40000800

080008cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d2:	4a12      	ldr	r2, [pc, #72]	; (800091c <MX_USART2_UART_Init+0x50>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x4c>)
 8000904:	f001 ff08 	bl	8002718 <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800090e:	f000 f883 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000128 	.word	0x20000128
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b33      	ldr	r3, [pc, #204]	; (8000a08 <MX_GPIO_Init+0xe8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a32      	ldr	r2, [pc, #200]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <MX_GPIO_Init+0xe8>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a1d      	ldr	r2, [pc, #116]	; (8000a08 <MX_GPIO_Init+0xe8>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_GPIO_Init+0xe8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2120      	movs	r1, #32
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <MX_GPIO_Init+0xec>)
 80009ac:	f000 fd7c 	bl	80014a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_GPIO_Init+0xf0>)
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_GPIO_Init+0xf4>)
 80009c6:	f000 fbc5 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : sensore_Pin */
  GPIO_InitStruct.Pin = sensore_Pin;
 80009ca:	2310      	movs	r3, #16
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(sensore_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <MX_GPIO_Init+0xec>)
 80009de:	f000 fbb9 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_GPIO_Init+0xec>)
 80009fa:	f000 fbab 	bl	8001154 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	10210000 	.word	0x10210000
 8000a14:	40020800 	.word	0x40020800

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <Error_Handler+0x6>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5e:	2007      	movs	r0, #7
 8000a60:	f000 fb36 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <HAL_TIM_Base_MspInit+0x80>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d116      	bne.n	8000ab0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_TIM_Base_MspInit+0x84>)
 8000a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8a:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <HAL_TIM_Base_MspInit+0x84>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6413      	str	r3, [r2, #64]	; 0x40
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <HAL_TIM_Base_MspInit+0x84>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	201d      	movs	r0, #29
 8000aa4:	f000 fb1f 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000aa8:	201d      	movs	r0, #29
 8000aaa:	f000 fb38 	bl	800111e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000aae:	e01a      	b.n	8000ae6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_TIM_Base_MspInit+0x88>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d115      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_Base_MspInit+0x84>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_TIM_Base_MspInit+0x84>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_TIM_Base_MspInit+0x84>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	201e      	movs	r0, #30
 8000adc:	f000 fb03 	bl	80010e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000ae0:	201e      	movs	r0, #30
 8000ae2:	f000 fb1c 	bl	800111e <HAL_NVIC_EnableIRQ>
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40000400 	.word	0x40000400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40000800 	.word	0x40000800

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a19      	ldr	r2, [pc, #100]	; (8000b80 <HAL_UART_MspInit+0x84>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d12b      	bne.n	8000b76 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0x88>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a17      	ldr	r2, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0x88>)
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0x88>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0x88>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0x88>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <HAL_UART_MspInit+0x8c>)
 8000b72:	f000 faef 	bl	8001154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f98a 	bl	8000ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000be2:	b0b9      	sub	sp, #228	; 0xe4
 8000be4:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN TIM3_IRQn 0 */
	static uint8_t uart=0;
	char buffer[200];
		if(check==1){ // ho almeno un valore in memoria
 8000be6:	4b32      	ldr	r3, [pc, #200]	; (8000cb0 <TIM3_IRQHandler+0xd0>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b01      	cmp	r3, #1
 8000bec:	d158      	bne.n	8000ca0 <TIM3_IRQHandler+0xc0>

			UART_Management(uart);
 8000bee:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f89e 	bl	8000d34 <UART_Management>
			sprintf(buffer,"Value %u con timestmp %u min %u sec %u millis all'ora %u min %u sec %u millis\n",Memoria[uart].read_value,Memoria[uart].tmps.minuti,Memoria[uart].tmps.secondi,Memoria[uart].tmps.millis,TC.minuti,TC.secondi,TC.millis);
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <TIM3_IRQHandler+0xd8>)
 8000c00:	460b      	mov	r3, r1
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	440b      	add	r3, r1
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461e      	mov	r6, r3
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <TIM3_IRQHandler+0xd8>)
 8000c18:	460b      	mov	r3, r1
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	469c      	mov	ip, r3
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4a22      	ldr	r2, [pc, #136]	; (8000cb8 <TIM3_IRQHandler+0xd8>)
 8000c2e:	460b      	mov	r3, r1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	440b      	add	r3, r1
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	3301      	adds	r3, #1
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461c      	mov	r4, r3
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4619      	mov	r1, r3
 8000c44:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <TIM3_IRQHandler+0xd8>)
 8000c46:	460b      	mov	r3, r1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	440b      	add	r3, r1
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	4413      	add	r3, r2
 8000c50:	3302      	adds	r3, #2
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <TIM3_IRQHandler+0xdc>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <TIM3_IRQHandler+0xdc>)
 8000c5e:	785b      	ldrb	r3, [r3, #1]
 8000c60:	461d      	mov	r5, r3
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <TIM3_IRQHandler+0xdc>)
 8000c64:	885b      	ldrh	r3, [r3, #2]
 8000c66:	4638      	mov	r0, r7
 8000c68:	9304      	str	r3, [sp, #16]
 8000c6a:	9503      	str	r5, [sp, #12]
 8000c6c:	9102      	str	r1, [sp, #8]
 8000c6e:	9201      	str	r2, [sp, #4]
 8000c70:	9400      	str	r4, [sp, #0]
 8000c72:	4663      	mov	r3, ip
 8000c74:	4632      	mov	r2, r6
 8000c76:	4912      	ldr	r1, [pc, #72]	; (8000cc0 <TIM3_IRQHandler+0xe0>)
 8000c78:	f002 fa2c 	bl	80030d4 <siprintf>
			uart++;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3301      	adds	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <TIM3_IRQHandler+0xd4>)
 8000c86:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer),HAL_MAX_DELAY);
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fac0 	bl	8000210 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4639      	mov	r1, r7
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	480a      	ldr	r0, [pc, #40]	; (8000cc4 <TIM3_IRQHandler+0xe4>)
 8000c9c:	f001 fd89 	bl	80027b2 <HAL_UART_Transmit>

				}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <TIM3_IRQHandler+0xe8>)
 8000ca2:	f001 f97e 	bl	8001fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	37cc      	adds	r7, #204	; 0xcc
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000090 	.word	0x20000090
 8000cb4:	20000098 	.word	0x20000098
 8000cb8:	20000168 	.word	0x20000168
 8000cbc:	20000094 	.word	0x20000094
 8000cc0:	080038f8 	.word	0x080038f8
 8000cc4:	20000128 	.word	0x20000128
 8000cc8:	200000e8 	.word	0x200000e8

08000ccc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	 TC.millis++;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000cd2:	885b      	ldrh	r3, [r3, #2]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000cda:	805a      	strh	r2, [r3, #2]

		  	if (TC.millis >= 1000) {
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000cde:	885b      	ldrh	r3, [r3, #2]
 8000ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce4:	d30c      	bcc.n	8000d00 <TIM4_IRQHandler+0x34>
		  		TC.secondi++;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
 8000cea:	3301      	adds	r3, #1
 8000cec:	b2da      	uxtb	r2, r3
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000cf0:	705a      	strb	r2, [r3, #1]
		  		TC.millis -= 1000;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000cf4:	885b      	ldrh	r3, [r3, #2]
 8000cf6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000cfe:	805a      	strh	r2, [r3, #2]
		  		}
		  		if (TC.secondi >= 60) {
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000d02:	785b      	ldrb	r3, [r3, #1]
 8000d04:	2b3b      	cmp	r3, #59	; 0x3b
 8000d06:	d90b      	bls.n	8000d20 <TIM4_IRQHandler+0x54>
		  		TC.minuti++;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000d12:	701a      	strb	r2, [r3, #0]
		  		TC.secondi -= 60;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	3b3c      	subs	r3, #60	; 0x3c
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <TIM4_IRQHandler+0x60>)
 8000d1e:	705a      	strb	r2, [r3, #1]
		  		}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d20:	4803      	ldr	r0, [pc, #12]	; (8000d30 <TIM4_IRQHandler+0x64>)
 8000d22:	f001 f93e 	bl	8001fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000094 	.word	0x20000094
 8000d30:	200000a8 	.word	0x200000a8

08000d34 <UART_Management>:



void UART_Management(uint8_t lettura){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	static uint8_t dimensione=100;
	if(lettura>=dimensione-5)
 8000d3e:	79fa      	ldrb	r2, [r7, #7]
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <UART_Management+0x28>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3b05      	subs	r3, #5
 8000d46:	429a      	cmp	r2, r3
 8000d48:	db01      	blt.n	8000d4e <UART_Management+0x1a>
		lettura=0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]

}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000001 	.word	0x20000001

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f002 f96e 	bl	8003070 <__errno>
 8000d94:	4602      	mov	r2, r0
 8000d96:	230c      	movs	r3, #12
 8000d98:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20020000 	.word	0x20020000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	2000009c 	.word	0x2000009c
 8000dc8:	200003c8 	.word	0x200003c8

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <SystemInit+0x28>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <SystemInit+0x28>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SystemInit+0x28>)
 8000de2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000de6:	609a      	str	r2, [r3, #8]
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dfe:	e003      	b.n	8000e08 <LoopCopyDataInit>

08000e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e06:	3104      	adds	r1, #4

08000e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e10:	d3f6      	bcc.n	8000e00 <CopyDataInit>
  ldr  r2, =_sbss
 8000e12:	4a0b      	ldr	r2, [pc, #44]	; (8000e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e14:	e002      	b.n	8000e1c <LoopFillZerobss>

08000e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e18:	f842 3b04 	str.w	r3, [r2], #4

08000e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e20:	d3f9      	bcc.n	8000e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e22:	f7ff ffd3 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f002 f929 	bl	800307c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fc29 	bl	8000680 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e34:	080039a4 	.word	0x080039a4
  ldr  r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e3c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000e40:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000e44:	200003c8 	.word	0x200003c8

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	; (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	; (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 f92b 	bl	80010d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f808 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fdce 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <HAL_InitTick+0x54>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x58>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f943 	bl	800113a <HAL_SYSTICK_Config>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00e      	b.n	8000edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d80a      	bhi.n	8000eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 f90b 	bl	80010e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <HAL_InitTick+0x5c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e000      	b.n	8000edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000004 	.word	0x20000004
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	200003c0 	.word	0x200003c0

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	200003c0 	.word	0x200003c0

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <__NVIC_EnableIRQ+0x38>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
         );
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800109c:	d301      	bcc.n	80010a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109e:	2301      	movs	r3, #1
 80010a0:	e00f      	b.n	80010c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <SysTick_Config+0x40>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010aa:	210f      	movs	r1, #15
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f7ff ff8e 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <SysTick_Config+0x40>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SysTick_Config+0x40>)
 80010bc:	2207      	movs	r2, #7
 80010be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	e000e010 	.word	0xe000e010

080010d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff29 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b086      	sub	sp, #24
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	4603      	mov	r3, r0
 80010ee:	60b9      	str	r1, [r7, #8]
 80010f0:	607a      	str	r2, [r7, #4]
 80010f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f8:	f7ff ff3e 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	68b9      	ldr	r1, [r7, #8]
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff ff8e 	bl	8001024 <NVIC_EncodePriority>
 8001108:	4602      	mov	r2, r0
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff31 	bl	8000f94 <__NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ffa2 	bl	800108c <SysTick_Config>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e165      	b.n	800143c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 8154 	bne.w	8001436 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d00b      	beq.n	80011ae <HAL_GPIO_Init+0x5a>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0xfc>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b12      	cmp	r3, #18
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	69b9      	ldr	r1, [r7, #24]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80ae 	beq.w	8001436 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_GPIO_Init+0x2fc>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a5b      	ldr	r2, [pc, #364]	; (8001450 <HAL_GPIO_Init+0x2fc>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_GPIO_Init+0x2fc>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a57      	ldr	r2, [pc, #348]	; (8001454 <HAL_GPIO_Init+0x300>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4e      	ldr	r2, [pc, #312]	; (8001458 <HAL_GPIO_Init+0x304>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d025      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4d      	ldr	r2, [pc, #308]	; (800145c <HAL_GPIO_Init+0x308>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d01f      	beq.n	800136a <HAL_GPIO_Init+0x216>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <HAL_GPIO_Init+0x30c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d019      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4b      	ldr	r2, [pc, #300]	; (8001464 <HAL_GPIO_Init+0x310>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d013      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4a      	ldr	r2, [pc, #296]	; (8001468 <HAL_GPIO_Init+0x314>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d00d      	beq.n	800135e <HAL_GPIO_Init+0x20a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a49      	ldr	r2, [pc, #292]	; (800146c <HAL_GPIO_Init+0x318>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d007      	beq.n	800135a <HAL_GPIO_Init+0x206>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a48      	ldr	r2, [pc, #288]	; (8001470 <HAL_GPIO_Init+0x31c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d101      	bne.n	8001356 <HAL_GPIO_Init+0x202>
 8001352:	2306      	movs	r3, #6
 8001354:	e00c      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001356:	2307      	movs	r3, #7
 8001358:	e00a      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800135a:	2305      	movs	r3, #5
 800135c:	e008      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800135e:	2304      	movs	r3, #4
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001362:	2303      	movs	r3, #3
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x21c>
 800136e:	2300      	movs	r3, #0
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001380:	4934      	ldr	r1, [pc, #208]	; (8001454 <HAL_GPIO_Init+0x300>)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800138e:	4b39      	ldr	r3, [pc, #228]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013dc:	4a25      	ldr	r2, [pc, #148]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e2:	4b24      	ldr	r3, [pc, #144]	; (8001474 <HAL_GPIO_Init+0x320>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	43db      	mvns	r3, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4013      	ands	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <HAL_GPIO_Init+0x320>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001430:	4a10      	ldr	r2, [pc, #64]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3301      	adds	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	2b0f      	cmp	r3, #15
 8001440:	f67f ae96 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001444:	bf00      	nop
 8001446:	3724      	adds	r7, #36	; 0x24
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	887b      	ldrh	r3, [r7, #2]
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d002      	beq.n	8001496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001490:	2301      	movs	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	e001      	b.n	800149a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	807b      	strh	r3, [r7, #2]
 80014b4:	4613      	mov	r3, r2
 80014b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b8:	787b      	ldrb	r3, [r7, #1]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c4:	e003      	b.n	80014ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	041a      	lsls	r2, r3, #16
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	619a      	str	r2, [r3, #24]
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e0cc      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f0:	4b68      	ldr	r3, [pc, #416]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d90c      	bls.n	8001518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b65      	ldr	r3, [pc, #404]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001506:	4b63      	ldr	r3, [pc, #396]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d001      	beq.n	8001518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e0b8      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d005      	beq.n	800153c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a58      	ldr	r2, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001536:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001548:	4b53      	ldr	r3, [pc, #332]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001554:	4b50      	ldr	r3, [pc, #320]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	494d      	ldr	r1, [pc, #308]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001562:	4313      	orrs	r3, r2
 8001564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d044      	beq.n	80015fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d107      	bne.n	800158a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157a:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e07f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d003      	beq.n	800159a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001596:	2b03      	cmp	r3, #3
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159a:	4b3f      	ldr	r3, [pc, #252]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e06f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e067      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f023 0203 	bic.w	r2, r3, #3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4934      	ldr	r1, [pc, #208]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fca4 	bl	8000f18 <HAL_GetTick>
 80015d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d4:	f7ff fca0 	bl	8000f18 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04f      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 020c 	and.w	r2, r3, #12
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d1eb      	bne.n	80015d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	429a      	cmp	r2, r3
 8001608:	d20c      	bcs.n	8001624 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001612:	4b20      	ldr	r3, [pc, #128]	; (8001694 <HAL_RCC_ClockConfig+0x1b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e032      	b.n	800168a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0304 	and.w	r3, r3, #4
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4916      	ldr	r1, [pc, #88]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	4313      	orrs	r3, r2
 8001640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d009      	beq.n	8001662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	490e      	ldr	r1, [pc, #56]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001662:	f000 f855 	bl	8001710 <HAL_RCC_GetSysClockFreq>
 8001666:	4601      	mov	r1, r0
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x1c0>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	fa21 f303 	lsr.w	r3, r1, r3
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fc04 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	08003948 	.word	0x08003948
 80016a0:	20000004 	.word	0x20000004
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <HAL_RCC_GetHCLKFreq+0x14>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016c4:	f7ff fff0 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016c8:	4601      	mov	r1, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	0a9b      	lsrs	r3, r3, #10
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	08003958 	.word	0x08003958

080016e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016ec:	f7ff ffdc 	bl	80016a8 <HAL_RCC_GetHCLKFreq>
 80016f0:	4601      	mov	r1, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	0b5b      	lsrs	r3, r3, #13
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4a03      	ldr	r2, [pc, #12]	; (800170c <HAL_RCC_GetPCLK2Freq+0x24>)
 80016fe:	5cd3      	ldrb	r3, [r2, r3]
 8001700:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40023800 	.word	0x40023800
 800170c:	08003958 	.word	0x08003958

08001710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800172a:	4bc6      	ldr	r3, [pc, #792]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b0c      	cmp	r3, #12
 8001734:	f200 817e 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x324>
 8001738:	a201      	add	r2, pc, #4	; (adr r2, 8001740 <HAL_RCC_GetSysClockFreq+0x30>)
 800173a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173e:	bf00      	nop
 8001740:	08001775 	.word	0x08001775
 8001744:	08001a35 	.word	0x08001a35
 8001748:	08001a35 	.word	0x08001a35
 800174c:	08001a35 	.word	0x08001a35
 8001750:	0800177b 	.word	0x0800177b
 8001754:	08001a35 	.word	0x08001a35
 8001758:	08001a35 	.word	0x08001a35
 800175c:	08001a35 	.word	0x08001a35
 8001760:	08001781 	.word	0x08001781
 8001764:	08001a35 	.word	0x08001a35
 8001768:	08001a35 	.word	0x08001a35
 800176c:	08001a35 	.word	0x08001a35
 8001770:	080018dd 	.word	0x080018dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4bb4      	ldr	r3, [pc, #720]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x338>)
 8001776:	613b      	str	r3, [r7, #16]
       break;
 8001778:	e15f      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177a:	4bb4      	ldr	r3, [pc, #720]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x33c>)
 800177c:	613b      	str	r3, [r7, #16]
      break;
 800177e:	e15c      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001780:	4bb0      	ldr	r3, [pc, #704]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001788:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800178a:	4bae      	ldr	r3, [pc, #696]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d04a      	beq.n	800182c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001796:	4bab      	ldr	r3, [pc, #684]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	f04f 0400 	mov.w	r4, #0
 80017a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	ea03 0501 	and.w	r5, r3, r1
 80017ac:	ea04 0602 	and.w	r6, r4, r2
 80017b0:	4629      	mov	r1, r5
 80017b2:	4632      	mov	r2, r6
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	f04f 0400 	mov.w	r4, #0
 80017bc:	0154      	lsls	r4, r2, #5
 80017be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017c2:	014b      	lsls	r3, r1, #5
 80017c4:	4619      	mov	r1, r3
 80017c6:	4622      	mov	r2, r4
 80017c8:	1b49      	subs	r1, r1, r5
 80017ca:	eb62 0206 	sbc.w	r2, r2, r6
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	f04f 0400 	mov.w	r4, #0
 80017d6:	0194      	lsls	r4, r2, #6
 80017d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017dc:	018b      	lsls	r3, r1, #6
 80017de:	1a5b      	subs	r3, r3, r1
 80017e0:	eb64 0402 	sbc.w	r4, r4, r2
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	00e2      	lsls	r2, r4, #3
 80017ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017f2:	00d9      	lsls	r1, r3, #3
 80017f4:	460b      	mov	r3, r1
 80017f6:	4614      	mov	r4, r2
 80017f8:	195b      	adds	r3, r3, r5
 80017fa:	eb44 0406 	adc.w	r4, r4, r6
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	0262      	lsls	r2, r4, #9
 8001808:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800180c:	0259      	lsls	r1, r3, #9
 800180e:	460b      	mov	r3, r1
 8001810:	4614      	mov	r4, r2
 8001812:	4618      	mov	r0, r3
 8001814:	4621      	mov	r1, r4
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f04f 0400 	mov.w	r4, #0
 800181c:	461a      	mov	r2, r3
 800181e:	4623      	mov	r3, r4
 8001820:	f7fe fd4e 	bl	80002c0 <__aeabi_uldivmod>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e049      	b.n	80018c0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182c:	4b85      	ldr	r3, [pc, #532]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	099b      	lsrs	r3, r3, #6
 8001832:	f04f 0400 	mov.w	r4, #0
 8001836:	f240 11ff 	movw	r1, #511	; 0x1ff
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	ea03 0501 	and.w	r5, r3, r1
 8001842:	ea04 0602 	and.w	r6, r4, r2
 8001846:	4629      	mov	r1, r5
 8001848:	4632      	mov	r2, r6
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f04f 0400 	mov.w	r4, #0
 8001852:	0154      	lsls	r4, r2, #5
 8001854:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001858:	014b      	lsls	r3, r1, #5
 800185a:	4619      	mov	r1, r3
 800185c:	4622      	mov	r2, r4
 800185e:	1b49      	subs	r1, r1, r5
 8001860:	eb62 0206 	sbc.w	r2, r2, r6
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	f04f 0400 	mov.w	r4, #0
 800186c:	0194      	lsls	r4, r2, #6
 800186e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001872:	018b      	lsls	r3, r1, #6
 8001874:	1a5b      	subs	r3, r3, r1
 8001876:	eb64 0402 	sbc.w	r4, r4, r2
 800187a:	f04f 0100 	mov.w	r1, #0
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	00e2      	lsls	r2, r4, #3
 8001884:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001888:	00d9      	lsls	r1, r3, #3
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	195b      	adds	r3, r3, r5
 8001890:	eb44 0406 	adc.w	r4, r4, r6
 8001894:	f04f 0100 	mov.w	r1, #0
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	02a2      	lsls	r2, r4, #10
 800189e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018a2:	0299      	lsls	r1, r3, #10
 80018a4:	460b      	mov	r3, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	4621      	mov	r1, r4
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4623      	mov	r3, r4
 80018b6:	f7fe fd03 	bl	80002c0 <__aeabi_uldivmod>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018c0:	4b60      	ldr	r3, [pc, #384]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	3301      	adds	r3, #1
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d8:	613b      	str	r3, [r7, #16]
      break;
 80018da:	e0ae      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018dc:	4b59      	ldr	r3, [pc, #356]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018e6:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d04a      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	ea03 0501 	and.w	r5, r3, r1
 8001908:	ea04 0602 	and.w	r6, r4, r2
 800190c:	4629      	mov	r1, r5
 800190e:	4632      	mov	r2, r6
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	0154      	lsls	r4, r2, #5
 800191a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800191e:	014b      	lsls	r3, r1, #5
 8001920:	4619      	mov	r1, r3
 8001922:	4622      	mov	r2, r4
 8001924:	1b49      	subs	r1, r1, r5
 8001926:	eb62 0206 	sbc.w	r2, r2, r6
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	0194      	lsls	r4, r2, #6
 8001934:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001938:	018b      	lsls	r3, r1, #6
 800193a:	1a5b      	subs	r3, r3, r1
 800193c:	eb64 0402 	sbc.w	r4, r4, r2
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	00e2      	lsls	r2, r4, #3
 800194a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800194e:	00d9      	lsls	r1, r3, #3
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	195b      	adds	r3, r3, r5
 8001956:	eb44 0406 	adc.w	r4, r4, r6
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	0262      	lsls	r2, r4, #9
 8001964:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001968:	0259      	lsls	r1, r3, #9
 800196a:	460b      	mov	r3, r1
 800196c:	4614      	mov	r4, r2
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f04f 0400 	mov.w	r4, #0
 8001978:	461a      	mov	r2, r3
 800197a:	4623      	mov	r3, r4
 800197c:	f7fe fca0 	bl	80002c0 <__aeabi_uldivmod>
 8001980:	4603      	mov	r3, r0
 8001982:	460c      	mov	r4, r1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e049      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	099b      	lsrs	r3, r3, #6
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	ea03 0501 	and.w	r5, r3, r1
 800199e:	ea04 0602 	and.w	r6, r4, r2
 80019a2:	4629      	mov	r1, r5
 80019a4:	4632      	mov	r2, r6
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	f04f 0400 	mov.w	r4, #0
 80019ae:	0154      	lsls	r4, r2, #5
 80019b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019b4:	014b      	lsls	r3, r1, #5
 80019b6:	4619      	mov	r1, r3
 80019b8:	4622      	mov	r2, r4
 80019ba:	1b49      	subs	r1, r1, r5
 80019bc:	eb62 0206 	sbc.w	r2, r2, r6
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	0194      	lsls	r4, r2, #6
 80019ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019ce:	018b      	lsls	r3, r1, #6
 80019d0:	1a5b      	subs	r3, r3, r1
 80019d2:	eb64 0402 	sbc.w	r4, r4, r2
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	00e2      	lsls	r2, r4, #3
 80019e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019e4:	00d9      	lsls	r1, r3, #3
 80019e6:	460b      	mov	r3, r1
 80019e8:	4614      	mov	r4, r2
 80019ea:	195b      	adds	r3, r3, r5
 80019ec:	eb44 0406 	adc.w	r4, r4, r6
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	02a2      	lsls	r2, r4, #10
 80019fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019fe:	0299      	lsls	r1, r3, #10
 8001a00:	460b      	mov	r3, r1
 8001a02:	4614      	mov	r4, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	4621      	mov	r1, r4
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f04f 0400 	mov.w	r4, #0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4623      	mov	r3, r4
 8001a12:	f7fe fc55 	bl	80002c0 <__aeabi_uldivmod>
 8001a16:	4603      	mov	r3, r0
 8001a18:	460c      	mov	r4, r1
 8001a1a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x334>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	0f1b      	lsrs	r3, r3, #28
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	613b      	str	r3, [r7, #16]
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x338>)
 8001a36:	613b      	str	r3, [r7, #16]
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	693b      	ldr	r3, [r7, #16]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	00f42400 	.word	0x00f42400
 8001a4c:	007a1200 	.word	0x007a1200

08001a50 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 8083 	beq.w	8001b70 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a6a:	4b95      	ldr	r3, [pc, #596]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d019      	beq.n	8001aaa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a76:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a82:	4b8f      	ldr	r3, [pc, #572]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a90:	4b8b      	ldr	r3, [pc, #556]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a98:	2b0c      	cmp	r3, #12
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9c:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b85      	ldr	r3, [pc, #532]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d05b      	beq.n	8001b6e <HAL_RCC_OscConfig+0x11e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d157      	bne.n	8001b6e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e216      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x8a>
 8001acc:	4b7c      	ldr	r3, [pc, #496]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7b      	ldr	r2, [pc, #492]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e01d      	b.n	8001b16 <HAL_RCC_OscConfig+0xc6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0xae>
 8001ae4:	4b76      	ldr	r3, [pc, #472]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a75      	ldr	r2, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001aea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a72      	ldr	r2, [pc, #456]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afa:	6013      	str	r3, [r2, #0]
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0xc6>
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b6d      	ldr	r3, [pc, #436]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a6c      	ldr	r2, [pc, #432]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d013      	beq.n	8001b46 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff f9fb 	bl	8000f18 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b26:	f7ff f9f7 	bl	8000f18 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	; 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1db      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b38:	4b61      	ldr	r3, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0xd6>
 8001b44:	e014      	b.n	8001b70 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b46:	f7ff f9e7 	bl	8000f18 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f9e3 	bl	8000f18 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b64      	cmp	r3, #100	; 0x64
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1c7      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b60:	4b57      	ldr	r3, [pc, #348]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1f0      	bne.n	8001b4e <HAL_RCC_OscConfig+0xfe>
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b6e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d06f      	beq.n	8001c5c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d017      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00b      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d11c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d116      	bne.n	8001be6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x180>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d001      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e18f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4938      	ldr	r1, [pc, #224]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be4:	e03a      	b.n	8001c5c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bee:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff f990 	bl	8000f18 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f98c 	bl	8000f18 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e170      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4925      	ldr	r1, [pc, #148]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
 8001c2e:	e015      	b.n	8001c5c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <HAL_RCC_OscConfig+0x274>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff f96f 	bl	8000f18 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff f96b 	bl	8000f18 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e14f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1f0      	bne.n	8001c3e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d037      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d016      	beq.n	8001c9e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_RCC_OscConfig+0x278>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c76:	f7ff f94f 	bl	8000f18 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f94b 	bl	8000f18 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e12f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x270>)
 8001c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x22e>
 8001c9c:	e01c      	b.n	8001cd8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_OscConfig+0x278>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f938 	bl	8000f18 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	e00f      	b.n	8001ccc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cac:	f7ff f934 	bl	8000f18 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d908      	bls.n	8001ccc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e118      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	42470000 	.word	0x42470000
 8001cc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	4b8a      	ldr	r3, [pc, #552]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e9      	bne.n	8001cac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8097 	beq.w	8001e14 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cea:	4b83      	ldr	r3, [pc, #524]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10f      	bne.n	8001d16 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a7e      	ldr	r2, [pc, #504]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d12:	2301      	movs	r3, #1
 8001d14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b79      	ldr	r3, [pc, #484]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d118      	bne.n	8001d54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b76      	ldr	r3, [pc, #472]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a75      	ldr	r2, [pc, #468]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7ff f8f3 	bl	8000f18 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	e008      	b.n	8001d48 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d36:	f7ff f8ef 	bl	8000f18 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d901      	bls.n	8001d48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e0d3      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d48:	4b6c      	ldr	r3, [pc, #432]	; (8001efc <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d0f0      	beq.n	8001d36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <HAL_RCC_OscConfig+0x31a>
 8001d5c:	4b66      	ldr	r3, [pc, #408]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	4a65      	ldr	r2, [pc, #404]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6713      	str	r3, [r2, #112]	; 0x70
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x354>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b05      	cmp	r3, #5
 8001d70:	d10c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x33c>
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a60      	ldr	r2, [pc, #384]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7e:	4b5e      	ldr	r3, [pc, #376]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a5d      	ldr	r2, [pc, #372]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	e00b      	b.n	8001da4 <HAL_RCC_OscConfig+0x354>
 8001d8c:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d90:	4a59      	ldr	r2, [pc, #356]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d92:	f023 0301 	bic.w	r3, r3, #1
 8001d96:	6713      	str	r3, [r2, #112]	; 0x70
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a56      	ldr	r2, [pc, #344]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d015      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dac:	f7ff f8b4 	bl	8000f18 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	e00a      	b.n	8001dca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db4:	f7ff f8b0 	bl	8000f18 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e092      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dca:	4b4b      	ldr	r3, [pc, #300]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0ee      	beq.n	8001db4 <HAL_RCC_OscConfig+0x364>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f89e 	bl	8000f18 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	e00a      	b.n	8001df6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de0:	f7ff f89a 	bl	8000f18 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e07c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df6:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1ee      	bne.n	8001de0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e02:	7dfb      	ldrb	r3, [r7, #23]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e08:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a3a      	ldr	r2, [pc, #232]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d068      	beq.n	8001eee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e1c:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d060      	beq.n	8001eea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d145      	bne.n	8001ebc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e30:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f86f 	bl	8000f18 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f86b 	bl	8000f18 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e04f      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f0      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69da      	ldr	r2, [r3, #28]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	019b      	lsls	r3, r3, #6
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	3b01      	subs	r3, #1
 8001e76:	041b      	lsls	r3, r3, #16
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	061b      	lsls	r3, r3, #24
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	071b      	lsls	r3, r3, #28
 8001e88:	491b      	ldr	r1, [pc, #108]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f840 	bl	8000f18 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f83c 	bl	8000f18 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e020      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x44c>
 8001eba:	e018      	b.n	8001eee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x4b0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f829 	bl	8000f18 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff f825 	bl	8000f18 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e009      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_RCC_OscConfig+0x4a8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x47a>
 8001ee8:	e001      	b.n	8001eee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40007000 	.word	0x40007000
 8001f00:	42470060 	.word	0x42470060

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e01d      	b.n	8001f52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fda0 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fa1e 	bl	8002384 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b085      	sub	sp, #20
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	d007      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d122      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d11b      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f06f 0202 	mvn.w	r2, #2
 8001fce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f9af 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8001fea:	e005      	b.n	8001ff8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f9a1 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f9b2 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b04      	cmp	r3, #4
 800200a:	d122      	bne.n	8002052 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	2b04      	cmp	r3, #4
 8002018:	d11b      	bne.n	8002052 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0204 	mvn.w	r2, #4
 8002022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f985 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 800203e:	e005      	b.n	800204c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f977 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f988 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b08      	cmp	r3, #8
 800205e:	d122      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b08      	cmp	r3, #8
 800206c:	d11b      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f06f 0208 	mvn.w	r2, #8
 8002076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2204      	movs	r2, #4
 800207c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f95b 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 8002092:	e005      	b.n	80020a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f94d 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f95e 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b10      	cmp	r3, #16
 80020b2:	d122      	bne.n	80020fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d11b      	bne.n	80020fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0210 	mvn.w	r2, #16
 80020ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2208      	movs	r2, #8
 80020d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f931 	bl	8002348 <HAL_TIM_IC_CaptureCallback>
 80020e6:	e005      	b.n	80020f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f923 	bl	8002334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f934 	bl	800235c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d10e      	bne.n	8002126 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 0201 	mvn.w	r2, #1
 800211e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f8fd 	bl	8002320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002130:	2b80      	cmp	r3, #128	; 0x80
 8002132:	d10e      	bne.n	8002152 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213e:	2b80      	cmp	r3, #128	; 0x80
 8002140:	d107      	bne.n	8002152 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800214a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fad9 	bl	8002704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d10e      	bne.n	800217e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216a:	2b40      	cmp	r3, #64	; 0x40
 800216c:	d107      	bne.n	800217e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f8f9 	bl	8002370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b20      	cmp	r3, #32
 800218a:	d10e      	bne.n	80021aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0320 	and.w	r3, r3, #32
 8002196:	2b20      	cmp	r3, #32
 8002198:	d107      	bne.n	80021aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0220 	mvn.w	r2, #32
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 faa3 	bl	80026f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_TIM_ConfigClockSource+0x18>
 80021c6:	2302      	movs	r3, #2
 80021c8:	e0a6      	b.n	8002318 <HAL_TIM_ConfigClockSource+0x166>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2201      	movs	r2, #1
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d067      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x120>
 8002202:	2b40      	cmp	r3, #64	; 0x40
 8002204:	d80b      	bhi.n	800221e <HAL_TIM_ConfigClockSource+0x6c>
 8002206:	2b10      	cmp	r3, #16
 8002208:	d073      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x140>
 800220a:	2b10      	cmp	r3, #16
 800220c:	d802      	bhi.n	8002214 <HAL_TIM_ConfigClockSource+0x62>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d06f      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002212:	e078      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002214:	2b20      	cmp	r3, #32
 8002216:	d06c      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x140>
 8002218:	2b30      	cmp	r3, #48	; 0x30
 800221a:	d06a      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800221c:	e073      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800221e:	2b70      	cmp	r3, #112	; 0x70
 8002220:	d00d      	beq.n	800223e <HAL_TIM_ConfigClockSource+0x8c>
 8002222:	2b70      	cmp	r3, #112	; 0x70
 8002224:	d804      	bhi.n	8002230 <HAL_TIM_ConfigClockSource+0x7e>
 8002226:	2b50      	cmp	r3, #80	; 0x50
 8002228:	d033      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0xe0>
 800222a:	2b60      	cmp	r3, #96	; 0x60
 800222c:	d041      	beq.n	80022b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800222e:	e06a      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002234:	d066      	beq.n	8002304 <HAL_TIM_ConfigClockSource+0x152>
 8002236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800223a:	d017      	beq.n	800226c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800223c:	e063      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f000 f9b3 	bl	80025b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002260:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	609a      	str	r2, [r3, #8]
      break;
 800226a:	e04c      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f000 f99c 	bl	80025b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228e:	609a      	str	r2, [r3, #8]
      break;
 8002290:	e039      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	461a      	mov	r2, r3
 80022a0:	f000 f910 	bl	80024c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2150      	movs	r1, #80	; 0x50
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f969 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 80022b0:	e029      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	461a      	mov	r2, r3
 80022c0:	f000 f92f 	bl	8002522 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2160      	movs	r1, #96	; 0x60
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f959 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 80022d0:	e019      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	461a      	mov	r2, r3
 80022e0:	f000 f8f0 	bl	80024c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2140      	movs	r1, #64	; 0x40
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f949 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 80022f0:	e009      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 f940 	bl	8002582 <TIM_ITRx_SetConfig>
      break;
 8002302:	e000      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <TIM_Base_SetConfig+0x114>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a2:	d00f      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3d      	ldr	r2, [pc, #244]	; (800249c <TIM_Base_SetConfig+0x118>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00b      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3c      	ldr	r2, [pc, #240]	; (80024a0 <TIM_Base_SetConfig+0x11c>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3b      	ldr	r2, [pc, #236]	; (80024a4 <TIM_Base_SetConfig+0x120>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d003      	beq.n	80023c4 <TIM_Base_SetConfig+0x40>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3a      	ldr	r2, [pc, #232]	; (80024a8 <TIM_Base_SetConfig+0x124>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a2f      	ldr	r2, [pc, #188]	; (8002498 <TIM_Base_SetConfig+0x114>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d02b      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e4:	d027      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	; (800249c <TIM_Base_SetConfig+0x118>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d023      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <TIM_Base_SetConfig+0x11c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01f      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a2a      	ldr	r2, [pc, #168]	; (80024a4 <TIM_Base_SetConfig+0x120>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01b      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a29      	ldr	r2, [pc, #164]	; (80024a8 <TIM_Base_SetConfig+0x124>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d017      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a28      	ldr	r2, [pc, #160]	; (80024ac <TIM_Base_SetConfig+0x128>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d013      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <TIM_Base_SetConfig+0x12c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00f      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a26      	ldr	r2, [pc, #152]	; (80024b4 <TIM_Base_SetConfig+0x130>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d00b      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a25      	ldr	r2, [pc, #148]	; (80024b8 <TIM_Base_SetConfig+0x134>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d007      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <TIM_Base_SetConfig+0x138>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d003      	beq.n	8002436 <TIM_Base_SetConfig+0xb2>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <TIM_Base_SetConfig+0x13c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d108      	bne.n	8002448 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	4313      	orrs	r3, r2
 8002446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <TIM_Base_SetConfig+0x114>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d003      	beq.n	800247c <TIM_Base_SetConfig+0xf8>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <TIM_Base_SetConfig+0x124>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d103      	bne.n	8002484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	615a      	str	r2, [r3, #20]
}
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40010000 	.word	0x40010000
 800249c:	40000400 	.word	0x40000400
 80024a0:	40000800 	.word	0x40000800
 80024a4:	40000c00 	.word	0x40000c00
 80024a8:	40010400 	.word	0x40010400
 80024ac:	40014000 	.word	0x40014000
 80024b0:	40014400 	.word	0x40014400
 80024b4:	40014800 	.word	0x40014800
 80024b8:	40001800 	.word	0x40001800
 80024bc:	40001c00 	.word	0x40001c00
 80024c0:	40002000 	.word	0x40002000

080024c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	f023 0201 	bic.w	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f023 030a 	bic.w	r3, r3, #10
 8002500:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	621a      	str	r2, [r3, #32]
}
 8002516:	bf00      	nop
 8002518:	371c      	adds	r7, #28
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002522:	b480      	push	{r7}
 8002524:	b087      	sub	sp, #28
 8002526:	af00      	add	r7, sp, #0
 8002528:	60f8      	str	r0, [r7, #12]
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f023 0210 	bic.w	r2, r3, #16
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800254c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	031b      	lsls	r3, r3, #12
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800255e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	621a      	str	r2, [r3, #32]
}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002582:	b480      	push	{r7}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002598:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4313      	orrs	r3, r2
 80025a0:	f043 0307 	orr.w	r3, r3, #7
 80025a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	609a      	str	r2, [r3, #8]
}
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	021a      	lsls	r2, r3, #8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	431a      	orrs	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4313      	orrs	r3, r2
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	609a      	str	r2, [r3, #8]
}
 80025ec:	bf00      	nop
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002608:	2b01      	cmp	r3, #1
 800260a:	d101      	bne.n	8002610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800260c:	2302      	movs	r3, #2
 800260e:	e05a      	b.n	80026c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d022      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265c:	d01d      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a1d      	ldr	r2, [pc, #116]	; (80026d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d018      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a1b      	ldr	r2, [pc, #108]	; (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00e      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a18      	ldr	r2, [pc, #96]	; (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d009      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a17      	ldr	r2, [pc, #92]	; (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d004      	beq.n	800269a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a15      	ldr	r2, [pc, #84]	; (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d10c      	bne.n	80026b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010000 	.word	0x40010000
 80026d8:	40000400 	.word	0x40000400
 80026dc:	40000800 	.word	0x40000800
 80026e0:	40000c00 	.word	0x40000c00
 80026e4:	40010400 	.word	0x40010400
 80026e8:	40014000 	.word	0x40014000
 80026ec:	40001800 	.word	0x40001800

080026f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e03f      	b.n	80027aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe f9dc 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800275a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f90b 	bl	8002978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b088      	sub	sp, #32
 80027b6:	af02      	add	r7, sp, #8
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f040 8083 	bne.w	80028da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_UART_Transmit+0x2e>
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e07b      	b.n	80028dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_UART_Transmit+0x40>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e074      	b.n	80028dc <HAL_UART_Transmit+0x12a>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2221      	movs	r2, #33	; 0x21
 8002804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002808:	f7fe fb86 	bl	8000f18 <HAL_GetTick>
 800280c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	88fa      	ldrh	r2, [r7, #6]
 8002818:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002822:	e042      	b.n	80028aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283a:	d122      	bne.n	8002882 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2200      	movs	r2, #0
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f84c 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e042      	b.n	80028dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002868:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d103      	bne.n	800287a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	3302      	adds	r3, #2
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	e017      	b.n	80028aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3301      	adds	r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	e013      	b.n	80028aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	2180      	movs	r1, #128	; 0x80
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f829 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e01f      	b.n	80028dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	60ba      	str	r2, [r7, #8]
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1b7      	bne.n	8002824 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	2140      	movs	r1, #64	; 0x40
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f810 	bl	80028e4 <UART_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e006      	b.n	80028dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	e000      	b.n	80028dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028da:	2302      	movs	r3, #2
  }
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f4:	e02c      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d028      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <UART_WaitOnFlagUntilTimeout+0x30>
 8002904:	f7fe fb08 	bl	8000f18 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	429a      	cmp	r2, r3
 8002912:	d21d      	bcs.n	8002950 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002922:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e00f      	b.n	8002970 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	d0c3      	beq.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800297c:	b085      	sub	sp, #20
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68da      	ldr	r2, [r3, #12]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029ba:	f023 030c 	bic.w	r3, r3, #12
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	68f9      	ldr	r1, [r7, #12]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029e6:	f040 818b 	bne.w	8002d00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4ac1      	ldr	r2, [pc, #772]	; (8002cf4 <UART_SetConfig+0x37c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d005      	beq.n	8002a00 <UART_SetConfig+0x88>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4abf      	ldr	r2, [pc, #764]	; (8002cf8 <UART_SetConfig+0x380>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 80bd 	bne.w	8002b7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a00:	f7fe fe72 	bl	80016e8 <HAL_RCC_GetPCLK2Freq>
 8002a04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	461d      	mov	r5, r3
 8002a0a:	f04f 0600 	mov.w	r6, #0
 8002a0e:	46a8      	mov	r8, r5
 8002a10:	46b1      	mov	r9, r6
 8002a12:	eb18 0308 	adds.w	r3, r8, r8
 8002a16:	eb49 0409 	adc.w	r4, r9, r9
 8002a1a:	4698      	mov	r8, r3
 8002a1c:	46a1      	mov	r9, r4
 8002a1e:	eb18 0805 	adds.w	r8, r8, r5
 8002a22:	eb49 0906 	adc.w	r9, r9, r6
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	f04f 0200 	mov.w	r2, #0
 8002a2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a3a:	4688      	mov	r8, r1
 8002a3c:	4691      	mov	r9, r2
 8002a3e:	eb18 0005 	adds.w	r0, r8, r5
 8002a42:	eb49 0106 	adc.w	r1, r9, r6
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	461d      	mov	r5, r3
 8002a4c:	f04f 0600 	mov.w	r6, #0
 8002a50:	196b      	adds	r3, r5, r5
 8002a52:	eb46 0406 	adc.w	r4, r6, r6
 8002a56:	461a      	mov	r2, r3
 8002a58:	4623      	mov	r3, r4
 8002a5a:	f7fd fc31 	bl	80002c0 <__aeabi_uldivmod>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	460c      	mov	r4, r1
 8002a62:	461a      	mov	r2, r3
 8002a64:	4ba5      	ldr	r3, [pc, #660]	; (8002cfc <UART_SetConfig+0x384>)
 8002a66:	fba3 2302 	umull	r2, r3, r3, r2
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	461d      	mov	r5, r3
 8002a74:	f04f 0600 	mov.w	r6, #0
 8002a78:	46a9      	mov	r9, r5
 8002a7a:	46b2      	mov	sl, r6
 8002a7c:	eb19 0309 	adds.w	r3, r9, r9
 8002a80:	eb4a 040a 	adc.w	r4, sl, sl
 8002a84:	4699      	mov	r9, r3
 8002a86:	46a2      	mov	sl, r4
 8002a88:	eb19 0905 	adds.w	r9, r9, r5
 8002a8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a90:	f04f 0100 	mov.w	r1, #0
 8002a94:	f04f 0200 	mov.w	r2, #0
 8002a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002aa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002aa4:	4689      	mov	r9, r1
 8002aa6:	4692      	mov	sl, r2
 8002aa8:	eb19 0005 	adds.w	r0, r9, r5
 8002aac:	eb4a 0106 	adc.w	r1, sl, r6
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	461d      	mov	r5, r3
 8002ab6:	f04f 0600 	mov.w	r6, #0
 8002aba:	196b      	adds	r3, r5, r5
 8002abc:	eb46 0406 	adc.w	r4, r6, r6
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7fd fbfc 	bl	80002c0 <__aeabi_uldivmod>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	461a      	mov	r2, r3
 8002ace:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <UART_SetConfig+0x384>)
 8002ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	2164      	movs	r1, #100	; 0x64
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	3332      	adds	r3, #50	; 0x32
 8002ae2:	4a86      	ldr	r2, [pc, #536]	; (8002cfc <UART_SetConfig+0x384>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002af0:	4498      	add	r8, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	461d      	mov	r5, r3
 8002af6:	f04f 0600 	mov.w	r6, #0
 8002afa:	46a9      	mov	r9, r5
 8002afc:	46b2      	mov	sl, r6
 8002afe:	eb19 0309 	adds.w	r3, r9, r9
 8002b02:	eb4a 040a 	adc.w	r4, sl, sl
 8002b06:	4699      	mov	r9, r3
 8002b08:	46a2      	mov	sl, r4
 8002b0a:	eb19 0905 	adds.w	r9, r9, r5
 8002b0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b12:	f04f 0100 	mov.w	r1, #0
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b26:	4689      	mov	r9, r1
 8002b28:	4692      	mov	sl, r2
 8002b2a:	eb19 0005 	adds.w	r0, r9, r5
 8002b2e:	eb4a 0106 	adc.w	r1, sl, r6
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	461d      	mov	r5, r3
 8002b38:	f04f 0600 	mov.w	r6, #0
 8002b3c:	196b      	adds	r3, r5, r5
 8002b3e:	eb46 0406 	adc.w	r4, r6, r6
 8002b42:	461a      	mov	r2, r3
 8002b44:	4623      	mov	r3, r4
 8002b46:	f7fd fbbb 	bl	80002c0 <__aeabi_uldivmod>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b6a      	ldr	r3, [pc, #424]	; (8002cfc <UART_SetConfig+0x384>)
 8002b52:	fba3 1302 	umull	r1, r3, r3, r2
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2164      	movs	r1, #100	; 0x64
 8002b5a:	fb01 f303 	mul.w	r3, r1, r3
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	3332      	adds	r3, #50	; 0x32
 8002b64:	4a65      	ldr	r2, [pc, #404]	; (8002cfc <UART_SetConfig+0x384>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	f003 0207 	and.w	r2, r3, #7
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4442      	add	r2, r8
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e26f      	b.n	800305a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b7a:	f7fe fda1 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
 8002b7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	461d      	mov	r5, r3
 8002b84:	f04f 0600 	mov.w	r6, #0
 8002b88:	46a8      	mov	r8, r5
 8002b8a:	46b1      	mov	r9, r6
 8002b8c:	eb18 0308 	adds.w	r3, r8, r8
 8002b90:	eb49 0409 	adc.w	r4, r9, r9
 8002b94:	4698      	mov	r8, r3
 8002b96:	46a1      	mov	r9, r4
 8002b98:	eb18 0805 	adds.w	r8, r8, r5
 8002b9c:	eb49 0906 	adc.w	r9, r9, r6
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002bb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002bb4:	4688      	mov	r8, r1
 8002bb6:	4691      	mov	r9, r2
 8002bb8:	eb18 0005 	adds.w	r0, r8, r5
 8002bbc:	eb49 0106 	adc.w	r1, r9, r6
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	f04f 0600 	mov.w	r6, #0
 8002bca:	196b      	adds	r3, r5, r5
 8002bcc:	eb46 0406 	adc.w	r4, r6, r6
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4623      	mov	r3, r4
 8002bd4:	f7fd fb74 	bl	80002c0 <__aeabi_uldivmod>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	460c      	mov	r4, r1
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <UART_SetConfig+0x384>)
 8002be0:	fba3 2302 	umull	r2, r3, r3, r2
 8002be4:	095b      	lsrs	r3, r3, #5
 8002be6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	461d      	mov	r5, r3
 8002bee:	f04f 0600 	mov.w	r6, #0
 8002bf2:	46a9      	mov	r9, r5
 8002bf4:	46b2      	mov	sl, r6
 8002bf6:	eb19 0309 	adds.w	r3, r9, r9
 8002bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8002bfe:	4699      	mov	r9, r3
 8002c00:	46a2      	mov	sl, r4
 8002c02:	eb19 0905 	adds.w	r9, r9, r5
 8002c06:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c1e:	4689      	mov	r9, r1
 8002c20:	4692      	mov	sl, r2
 8002c22:	eb19 0005 	adds.w	r0, r9, r5
 8002c26:	eb4a 0106 	adc.w	r1, sl, r6
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	461d      	mov	r5, r3
 8002c30:	f04f 0600 	mov.w	r6, #0
 8002c34:	196b      	adds	r3, r5, r5
 8002c36:	eb46 0406 	adc.w	r4, r6, r6
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4623      	mov	r3, r4
 8002c3e:	f7fd fb3f 	bl	80002c0 <__aeabi_uldivmod>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	461a      	mov	r2, r3
 8002c48:	4b2c      	ldr	r3, [pc, #176]	; (8002cfc <UART_SetConfig+0x384>)
 8002c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2164      	movs	r1, #100	; 0x64
 8002c52:	fb01 f303 	mul.w	r3, r1, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <UART_SetConfig+0x384>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c6a:	4498      	add	r8, r3
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	461d      	mov	r5, r3
 8002c70:	f04f 0600 	mov.w	r6, #0
 8002c74:	46a9      	mov	r9, r5
 8002c76:	46b2      	mov	sl, r6
 8002c78:	eb19 0309 	adds.w	r3, r9, r9
 8002c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002c80:	4699      	mov	r9, r3
 8002c82:	46a2      	mov	sl, r4
 8002c84:	eb19 0905 	adds.w	r9, r9, r5
 8002c88:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ca0:	4689      	mov	r9, r1
 8002ca2:	4692      	mov	sl, r2
 8002ca4:	eb19 0005 	adds.w	r0, r9, r5
 8002ca8:	eb4a 0106 	adc.w	r1, sl, r6
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	461d      	mov	r5, r3
 8002cb2:	f04f 0600 	mov.w	r6, #0
 8002cb6:	196b      	adds	r3, r5, r5
 8002cb8:	eb46 0406 	adc.w	r4, r6, r6
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7fd fafe 	bl	80002c0 <__aeabi_uldivmod>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <UART_SetConfig+0x384>)
 8002ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8002cd0:	095b      	lsrs	r3, r3, #5
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	fb01 f303 	mul.w	r3, r1, r3
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	3332      	adds	r3, #50	; 0x32
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <UART_SetConfig+0x384>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	f003 0207 	and.w	r2, r3, #7
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4442      	add	r2, r8
 8002cf0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002cf2:	e1b2      	b.n	800305a <UART_SetConfig+0x6e2>
 8002cf4:	40011000 	.word	0x40011000
 8002cf8:	40011400 	.word	0x40011400
 8002cfc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4ad7      	ldr	r2, [pc, #860]	; (8003064 <UART_SetConfig+0x6ec>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d005      	beq.n	8002d16 <UART_SetConfig+0x39e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4ad6      	ldr	r2, [pc, #856]	; (8003068 <UART_SetConfig+0x6f0>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	f040 80d1 	bne.w	8002eb8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d16:	f7fe fce7 	bl	80016e8 <HAL_RCC_GetPCLK2Freq>
 8002d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	469a      	mov	sl, r3
 8002d20:	f04f 0b00 	mov.w	fp, #0
 8002d24:	46d0      	mov	r8, sl
 8002d26:	46d9      	mov	r9, fp
 8002d28:	eb18 0308 	adds.w	r3, r8, r8
 8002d2c:	eb49 0409 	adc.w	r4, r9, r9
 8002d30:	4698      	mov	r8, r3
 8002d32:	46a1      	mov	r9, r4
 8002d34:	eb18 080a 	adds.w	r8, r8, sl
 8002d38:	eb49 090b 	adc.w	r9, r9, fp
 8002d3c:	f04f 0100 	mov.w	r1, #0
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d50:	4688      	mov	r8, r1
 8002d52:	4691      	mov	r9, r2
 8002d54:	eb1a 0508 	adds.w	r5, sl, r8
 8002d58:	eb4b 0609 	adc.w	r6, fp, r9
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	4619      	mov	r1, r3
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	f04f 0400 	mov.w	r4, #0
 8002d6e:	0094      	lsls	r4, r2, #2
 8002d70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d74:	008b      	lsls	r3, r1, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	4623      	mov	r3, r4
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	4631      	mov	r1, r6
 8002d7e:	f7fd fa9f 	bl	80002c0 <__aeabi_uldivmod>
 8002d82:	4603      	mov	r3, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	461a      	mov	r2, r3
 8002d88:	4bb8      	ldr	r3, [pc, #736]	; (800306c <UART_SetConfig+0x6f4>)
 8002d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	469b      	mov	fp, r3
 8002d98:	f04f 0c00 	mov.w	ip, #0
 8002d9c:	46d9      	mov	r9, fp
 8002d9e:	46e2      	mov	sl, ip
 8002da0:	eb19 0309 	adds.w	r3, r9, r9
 8002da4:	eb4a 040a 	adc.w	r4, sl, sl
 8002da8:	4699      	mov	r9, r3
 8002daa:	46a2      	mov	sl, r4
 8002dac:	eb19 090b 	adds.w	r9, r9, fp
 8002db0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002db4:	f04f 0100 	mov.w	r1, #0
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dc8:	4689      	mov	r9, r1
 8002dca:	4692      	mov	sl, r2
 8002dcc:	eb1b 0509 	adds.w	r5, fp, r9
 8002dd0:	eb4c 060a 	adc.w	r6, ip, sl
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	f04f 0400 	mov.w	r4, #0
 8002de6:	0094      	lsls	r4, r2, #2
 8002de8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dec:	008b      	lsls	r3, r1, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	4623      	mov	r3, r4
 8002df2:	4628      	mov	r0, r5
 8002df4:	4631      	mov	r1, r6
 8002df6:	f7fd fa63 	bl	80002c0 <__aeabi_uldivmod>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b9a      	ldr	r3, [pc, #616]	; (800306c <UART_SetConfig+0x6f4>)
 8002e02:	fba3 1302 	umull	r1, r3, r3, r2
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2164      	movs	r1, #100	; 0x64
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	3332      	adds	r3, #50	; 0x32
 8002e14:	4a95      	ldr	r2, [pc, #596]	; (800306c <UART_SetConfig+0x6f4>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e20:	4498      	add	r8, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	469b      	mov	fp, r3
 8002e26:	f04f 0c00 	mov.w	ip, #0
 8002e2a:	46d9      	mov	r9, fp
 8002e2c:	46e2      	mov	sl, ip
 8002e2e:	eb19 0309 	adds.w	r3, r9, r9
 8002e32:	eb4a 040a 	adc.w	r4, sl, sl
 8002e36:	4699      	mov	r9, r3
 8002e38:	46a2      	mov	sl, r4
 8002e3a:	eb19 090b 	adds.w	r9, r9, fp
 8002e3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e42:	f04f 0100 	mov.w	r1, #0
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e56:	4689      	mov	r9, r1
 8002e58:	4692      	mov	sl, r2
 8002e5a:	eb1b 0509 	adds.w	r5, fp, r9
 8002e5e:	eb4c 060a 	adc.w	r6, ip, sl
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	0094      	lsls	r4, r2, #2
 8002e76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e7a:	008b      	lsls	r3, r1, #2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4623      	mov	r3, r4
 8002e80:	4628      	mov	r0, r5
 8002e82:	4631      	mov	r1, r6
 8002e84:	f7fd fa1c 	bl	80002c0 <__aeabi_uldivmod>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b77      	ldr	r3, [pc, #476]	; (800306c <UART_SetConfig+0x6f4>)
 8002e90:	fba3 1302 	umull	r1, r3, r3, r2
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	2164      	movs	r1, #100	; 0x64
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	3332      	adds	r3, #50	; 0x32
 8002ea2:	4a72      	ldr	r2, [pc, #456]	; (800306c <UART_SetConfig+0x6f4>)
 8002ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	f003 020f 	and.w	r2, r3, #15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4442      	add	r2, r8
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e0d0      	b.n	800305a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eb8:	f7fe fc02 	bl	80016c0 <HAL_RCC_GetPCLK1Freq>
 8002ebc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	469a      	mov	sl, r3
 8002ec2:	f04f 0b00 	mov.w	fp, #0
 8002ec6:	46d0      	mov	r8, sl
 8002ec8:	46d9      	mov	r9, fp
 8002eca:	eb18 0308 	adds.w	r3, r8, r8
 8002ece:	eb49 0409 	adc.w	r4, r9, r9
 8002ed2:	4698      	mov	r8, r3
 8002ed4:	46a1      	mov	r9, r4
 8002ed6:	eb18 080a 	adds.w	r8, r8, sl
 8002eda:	eb49 090b 	adc.w	r9, r9, fp
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002eea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002eee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ef2:	4688      	mov	r8, r1
 8002ef4:	4691      	mov	r9, r2
 8002ef6:	eb1a 0508 	adds.w	r5, sl, r8
 8002efa:	eb4b 0609 	adc.w	r6, fp, r9
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	0094      	lsls	r4, r2, #2
 8002f12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f16:	008b      	lsls	r3, r1, #2
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4623      	mov	r3, r4
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	4631      	mov	r1, r6
 8002f20:	f7fd f9ce 	bl	80002c0 <__aeabi_uldivmod>
 8002f24:	4603      	mov	r3, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b50      	ldr	r3, [pc, #320]	; (800306c <UART_SetConfig+0x6f4>)
 8002f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f30:	095b      	lsrs	r3, r3, #5
 8002f32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	469b      	mov	fp, r3
 8002f3a:	f04f 0c00 	mov.w	ip, #0
 8002f3e:	46d9      	mov	r9, fp
 8002f40:	46e2      	mov	sl, ip
 8002f42:	eb19 0309 	adds.w	r3, r9, r9
 8002f46:	eb4a 040a 	adc.w	r4, sl, sl
 8002f4a:	4699      	mov	r9, r3
 8002f4c:	46a2      	mov	sl, r4
 8002f4e:	eb19 090b 	adds.w	r9, r9, fp
 8002f52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f56:	f04f 0100 	mov.w	r1, #0
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f6a:	4689      	mov	r9, r1
 8002f6c:	4692      	mov	sl, r2
 8002f6e:	eb1b 0509 	adds.w	r5, fp, r9
 8002f72:	eb4c 060a 	adc.w	r6, ip, sl
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	f04f 0400 	mov.w	r4, #0
 8002f88:	0094      	lsls	r4, r2, #2
 8002f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f8e:	008b      	lsls	r3, r1, #2
 8002f90:	461a      	mov	r2, r3
 8002f92:	4623      	mov	r3, r4
 8002f94:	4628      	mov	r0, r5
 8002f96:	4631      	mov	r1, r6
 8002f98:	f7fd f992 	bl	80002c0 <__aeabi_uldivmod>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4b32      	ldr	r3, [pc, #200]	; (800306c <UART_SetConfig+0x6f4>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	3332      	adds	r3, #50	; 0x32
 8002fb6:	4a2d      	ldr	r2, [pc, #180]	; (800306c <UART_SetConfig+0x6f4>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc2:	4498      	add	r8, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	469b      	mov	fp, r3
 8002fc8:	f04f 0c00 	mov.w	ip, #0
 8002fcc:	46d9      	mov	r9, fp
 8002fce:	46e2      	mov	sl, ip
 8002fd0:	eb19 0309 	adds.w	r3, r9, r9
 8002fd4:	eb4a 040a 	adc.w	r4, sl, sl
 8002fd8:	4699      	mov	r9, r3
 8002fda:	46a2      	mov	sl, r4
 8002fdc:	eb19 090b 	adds.w	r9, r9, fp
 8002fe0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fe4:	f04f 0100 	mov.w	r1, #0
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ff8:	4689      	mov	r9, r1
 8002ffa:	4692      	mov	sl, r2
 8002ffc:	eb1b 0509 	adds.w	r5, fp, r9
 8003000:	eb4c 060a 	adc.w	r6, ip, sl
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 0200 	mov.w	r2, #0
 800300e:	f04f 0300 	mov.w	r3, #0
 8003012:	f04f 0400 	mov.w	r4, #0
 8003016:	0094      	lsls	r4, r2, #2
 8003018:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800301c:	008b      	lsls	r3, r1, #2
 800301e:	461a      	mov	r2, r3
 8003020:	4623      	mov	r3, r4
 8003022:	4628      	mov	r0, r5
 8003024:	4631      	mov	r1, r6
 8003026:	f7fd f94b 	bl	80002c0 <__aeabi_uldivmod>
 800302a:	4603      	mov	r3, r0
 800302c:	460c      	mov	r4, r1
 800302e:	461a      	mov	r2, r3
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <UART_SetConfig+0x6f4>)
 8003032:	fba3 1302 	umull	r1, r3, r3, r2
 8003036:	095b      	lsrs	r3, r3, #5
 8003038:	2164      	movs	r1, #100	; 0x64
 800303a:	fb01 f303 	mul.w	r3, r1, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	3332      	adds	r3, #50	; 0x32
 8003044:	4a09      	ldr	r2, [pc, #36]	; (800306c <UART_SetConfig+0x6f4>)
 8003046:	fba2 2303 	umull	r2, r3, r2, r3
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	f003 020f 	and.w	r2, r3, #15
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4442      	add	r2, r8
 8003056:	609a      	str	r2, [r3, #8]
}
 8003058:	e7ff      	b.n	800305a <UART_SetConfig+0x6e2>
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003064:	40011000 	.word	0x40011000
 8003068:	40011400 	.word	0x40011400
 800306c:	51eb851f 	.word	0x51eb851f

08003070 <__errno>:
 8003070:	4b01      	ldr	r3, [pc, #4]	; (8003078 <__errno+0x8>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000010 	.word	0x20000010

0800307c <__libc_init_array>:
 800307c:	b570      	push	{r4, r5, r6, lr}
 800307e:	4e0d      	ldr	r6, [pc, #52]	; (80030b4 <__libc_init_array+0x38>)
 8003080:	4c0d      	ldr	r4, [pc, #52]	; (80030b8 <__libc_init_array+0x3c>)
 8003082:	1ba4      	subs	r4, r4, r6
 8003084:	10a4      	asrs	r4, r4, #2
 8003086:	2500      	movs	r5, #0
 8003088:	42a5      	cmp	r5, r4
 800308a:	d109      	bne.n	80030a0 <__libc_init_array+0x24>
 800308c:	4e0b      	ldr	r6, [pc, #44]	; (80030bc <__libc_init_array+0x40>)
 800308e:	4c0c      	ldr	r4, [pc, #48]	; (80030c0 <__libc_init_array+0x44>)
 8003090:	f000 fc26 	bl	80038e0 <_init>
 8003094:	1ba4      	subs	r4, r4, r6
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	2500      	movs	r5, #0
 800309a:	42a5      	cmp	r5, r4
 800309c:	d105      	bne.n	80030aa <__libc_init_array+0x2e>
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030a4:	4798      	blx	r3
 80030a6:	3501      	adds	r5, #1
 80030a8:	e7ee      	b.n	8003088 <__libc_init_array+0xc>
 80030aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ae:	4798      	blx	r3
 80030b0:	3501      	adds	r5, #1
 80030b2:	e7f2      	b.n	800309a <__libc_init_array+0x1e>
 80030b4:	0800399c 	.word	0x0800399c
 80030b8:	0800399c 	.word	0x0800399c
 80030bc:	0800399c 	.word	0x0800399c
 80030c0:	080039a0 	.word	0x080039a0

080030c4 <memset>:
 80030c4:	4402      	add	r2, r0
 80030c6:	4603      	mov	r3, r0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d100      	bne.n	80030ce <memset+0xa>
 80030cc:	4770      	bx	lr
 80030ce:	f803 1b01 	strb.w	r1, [r3], #1
 80030d2:	e7f9      	b.n	80030c8 <memset+0x4>

080030d4 <siprintf>:
 80030d4:	b40e      	push	{r1, r2, r3}
 80030d6:	b500      	push	{lr}
 80030d8:	b09c      	sub	sp, #112	; 0x70
 80030da:	ab1d      	add	r3, sp, #116	; 0x74
 80030dc:	9002      	str	r0, [sp, #8]
 80030de:	9006      	str	r0, [sp, #24]
 80030e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030e4:	4809      	ldr	r0, [pc, #36]	; (800310c <siprintf+0x38>)
 80030e6:	9107      	str	r1, [sp, #28]
 80030e8:	9104      	str	r1, [sp, #16]
 80030ea:	4909      	ldr	r1, [pc, #36]	; (8003110 <siprintf+0x3c>)
 80030ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80030f0:	9105      	str	r1, [sp, #20]
 80030f2:	6800      	ldr	r0, [r0, #0]
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	a902      	add	r1, sp, #8
 80030f8:	f000 f866 	bl	80031c8 <_svfiprintf_r>
 80030fc:	9b02      	ldr	r3, [sp, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	b01c      	add	sp, #112	; 0x70
 8003104:	f85d eb04 	ldr.w	lr, [sp], #4
 8003108:	b003      	add	sp, #12
 800310a:	4770      	bx	lr
 800310c:	20000010 	.word	0x20000010
 8003110:	ffff0208 	.word	0xffff0208

08003114 <__ssputs_r>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	688e      	ldr	r6, [r1, #8]
 800311a:	429e      	cmp	r6, r3
 800311c:	4682      	mov	sl, r0
 800311e:	460c      	mov	r4, r1
 8003120:	4690      	mov	r8, r2
 8003122:	4699      	mov	r9, r3
 8003124:	d837      	bhi.n	8003196 <__ssputs_r+0x82>
 8003126:	898a      	ldrh	r2, [r1, #12]
 8003128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800312c:	d031      	beq.n	8003192 <__ssputs_r+0x7e>
 800312e:	6825      	ldr	r5, [r4, #0]
 8003130:	6909      	ldr	r1, [r1, #16]
 8003132:	1a6f      	subs	r7, r5, r1
 8003134:	6965      	ldr	r5, [r4, #20]
 8003136:	2302      	movs	r3, #2
 8003138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800313c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003140:	f109 0301 	add.w	r3, r9, #1
 8003144:	443b      	add	r3, r7
 8003146:	429d      	cmp	r5, r3
 8003148:	bf38      	it	cc
 800314a:	461d      	movcc	r5, r3
 800314c:	0553      	lsls	r3, r2, #21
 800314e:	d530      	bpl.n	80031b2 <__ssputs_r+0x9e>
 8003150:	4629      	mov	r1, r5
 8003152:	f000 fb2b 	bl	80037ac <_malloc_r>
 8003156:	4606      	mov	r6, r0
 8003158:	b950      	cbnz	r0, 8003170 <__ssputs_r+0x5c>
 800315a:	230c      	movs	r3, #12
 800315c:	f8ca 3000 	str.w	r3, [sl]
 8003160:	89a3      	ldrh	r3, [r4, #12]
 8003162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003166:	81a3      	strh	r3, [r4, #12]
 8003168:	f04f 30ff 	mov.w	r0, #4294967295
 800316c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003170:	463a      	mov	r2, r7
 8003172:	6921      	ldr	r1, [r4, #16]
 8003174:	f000 faa8 	bl	80036c8 <memcpy>
 8003178:	89a3      	ldrh	r3, [r4, #12]
 800317a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800317e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003182:	81a3      	strh	r3, [r4, #12]
 8003184:	6126      	str	r6, [r4, #16]
 8003186:	6165      	str	r5, [r4, #20]
 8003188:	443e      	add	r6, r7
 800318a:	1bed      	subs	r5, r5, r7
 800318c:	6026      	str	r6, [r4, #0]
 800318e:	60a5      	str	r5, [r4, #8]
 8003190:	464e      	mov	r6, r9
 8003192:	454e      	cmp	r6, r9
 8003194:	d900      	bls.n	8003198 <__ssputs_r+0x84>
 8003196:	464e      	mov	r6, r9
 8003198:	4632      	mov	r2, r6
 800319a:	4641      	mov	r1, r8
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	f000 fa9e 	bl	80036de <memmove>
 80031a2:	68a3      	ldr	r3, [r4, #8]
 80031a4:	1b9b      	subs	r3, r3, r6
 80031a6:	60a3      	str	r3, [r4, #8]
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	441e      	add	r6, r3
 80031ac:	6026      	str	r6, [r4, #0]
 80031ae:	2000      	movs	r0, #0
 80031b0:	e7dc      	b.n	800316c <__ssputs_r+0x58>
 80031b2:	462a      	mov	r2, r5
 80031b4:	f000 fb54 	bl	8003860 <_realloc_r>
 80031b8:	4606      	mov	r6, r0
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d1e2      	bne.n	8003184 <__ssputs_r+0x70>
 80031be:	6921      	ldr	r1, [r4, #16]
 80031c0:	4650      	mov	r0, sl
 80031c2:	f000 faa5 	bl	8003710 <_free_r>
 80031c6:	e7c8      	b.n	800315a <__ssputs_r+0x46>

080031c8 <_svfiprintf_r>:
 80031c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031cc:	461d      	mov	r5, r3
 80031ce:	898b      	ldrh	r3, [r1, #12]
 80031d0:	061f      	lsls	r7, r3, #24
 80031d2:	b09d      	sub	sp, #116	; 0x74
 80031d4:	4680      	mov	r8, r0
 80031d6:	460c      	mov	r4, r1
 80031d8:	4616      	mov	r6, r2
 80031da:	d50f      	bpl.n	80031fc <_svfiprintf_r+0x34>
 80031dc:	690b      	ldr	r3, [r1, #16]
 80031de:	b96b      	cbnz	r3, 80031fc <_svfiprintf_r+0x34>
 80031e0:	2140      	movs	r1, #64	; 0x40
 80031e2:	f000 fae3 	bl	80037ac <_malloc_r>
 80031e6:	6020      	str	r0, [r4, #0]
 80031e8:	6120      	str	r0, [r4, #16]
 80031ea:	b928      	cbnz	r0, 80031f8 <_svfiprintf_r+0x30>
 80031ec:	230c      	movs	r3, #12
 80031ee:	f8c8 3000 	str.w	r3, [r8]
 80031f2:	f04f 30ff 	mov.w	r0, #4294967295
 80031f6:	e0c8      	b.n	800338a <_svfiprintf_r+0x1c2>
 80031f8:	2340      	movs	r3, #64	; 0x40
 80031fa:	6163      	str	r3, [r4, #20]
 80031fc:	2300      	movs	r3, #0
 80031fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003200:	2320      	movs	r3, #32
 8003202:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003206:	2330      	movs	r3, #48	; 0x30
 8003208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800320c:	9503      	str	r5, [sp, #12]
 800320e:	f04f 0b01 	mov.w	fp, #1
 8003212:	4637      	mov	r7, r6
 8003214:	463d      	mov	r5, r7
 8003216:	f815 3b01 	ldrb.w	r3, [r5], #1
 800321a:	b10b      	cbz	r3, 8003220 <_svfiprintf_r+0x58>
 800321c:	2b25      	cmp	r3, #37	; 0x25
 800321e:	d13e      	bne.n	800329e <_svfiprintf_r+0xd6>
 8003220:	ebb7 0a06 	subs.w	sl, r7, r6
 8003224:	d00b      	beq.n	800323e <_svfiprintf_r+0x76>
 8003226:	4653      	mov	r3, sl
 8003228:	4632      	mov	r2, r6
 800322a:	4621      	mov	r1, r4
 800322c:	4640      	mov	r0, r8
 800322e:	f7ff ff71 	bl	8003114 <__ssputs_r>
 8003232:	3001      	adds	r0, #1
 8003234:	f000 80a4 	beq.w	8003380 <_svfiprintf_r+0x1b8>
 8003238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800323a:	4453      	add	r3, sl
 800323c:	9309      	str	r3, [sp, #36]	; 0x24
 800323e:	783b      	ldrb	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 809d 	beq.w	8003380 <_svfiprintf_r+0x1b8>
 8003246:	2300      	movs	r3, #0
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003250:	9304      	str	r3, [sp, #16]
 8003252:	9307      	str	r3, [sp, #28]
 8003254:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003258:	931a      	str	r3, [sp, #104]	; 0x68
 800325a:	462f      	mov	r7, r5
 800325c:	2205      	movs	r2, #5
 800325e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003262:	4850      	ldr	r0, [pc, #320]	; (80033a4 <_svfiprintf_r+0x1dc>)
 8003264:	f7fc ffdc 	bl	8000220 <memchr>
 8003268:	9b04      	ldr	r3, [sp, #16]
 800326a:	b9d0      	cbnz	r0, 80032a2 <_svfiprintf_r+0xda>
 800326c:	06d9      	lsls	r1, r3, #27
 800326e:	bf44      	itt	mi
 8003270:	2220      	movmi	r2, #32
 8003272:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003276:	071a      	lsls	r2, r3, #28
 8003278:	bf44      	itt	mi
 800327a:	222b      	movmi	r2, #43	; 0x2b
 800327c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003280:	782a      	ldrb	r2, [r5, #0]
 8003282:	2a2a      	cmp	r2, #42	; 0x2a
 8003284:	d015      	beq.n	80032b2 <_svfiprintf_r+0xea>
 8003286:	9a07      	ldr	r2, [sp, #28]
 8003288:	462f      	mov	r7, r5
 800328a:	2000      	movs	r0, #0
 800328c:	250a      	movs	r5, #10
 800328e:	4639      	mov	r1, r7
 8003290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003294:	3b30      	subs	r3, #48	; 0x30
 8003296:	2b09      	cmp	r3, #9
 8003298:	d94d      	bls.n	8003336 <_svfiprintf_r+0x16e>
 800329a:	b1b8      	cbz	r0, 80032cc <_svfiprintf_r+0x104>
 800329c:	e00f      	b.n	80032be <_svfiprintf_r+0xf6>
 800329e:	462f      	mov	r7, r5
 80032a0:	e7b8      	b.n	8003214 <_svfiprintf_r+0x4c>
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <_svfiprintf_r+0x1dc>)
 80032a4:	1a80      	subs	r0, r0, r2
 80032a6:	fa0b f000 	lsl.w	r0, fp, r0
 80032aa:	4318      	orrs	r0, r3
 80032ac:	9004      	str	r0, [sp, #16]
 80032ae:	463d      	mov	r5, r7
 80032b0:	e7d3      	b.n	800325a <_svfiprintf_r+0x92>
 80032b2:	9a03      	ldr	r2, [sp, #12]
 80032b4:	1d11      	adds	r1, r2, #4
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	9103      	str	r1, [sp, #12]
 80032ba:	2a00      	cmp	r2, #0
 80032bc:	db01      	blt.n	80032c2 <_svfiprintf_r+0xfa>
 80032be:	9207      	str	r2, [sp, #28]
 80032c0:	e004      	b.n	80032cc <_svfiprintf_r+0x104>
 80032c2:	4252      	negs	r2, r2
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	9207      	str	r2, [sp, #28]
 80032ca:	9304      	str	r3, [sp, #16]
 80032cc:	783b      	ldrb	r3, [r7, #0]
 80032ce:	2b2e      	cmp	r3, #46	; 0x2e
 80032d0:	d10c      	bne.n	80032ec <_svfiprintf_r+0x124>
 80032d2:	787b      	ldrb	r3, [r7, #1]
 80032d4:	2b2a      	cmp	r3, #42	; 0x2a
 80032d6:	d133      	bne.n	8003340 <_svfiprintf_r+0x178>
 80032d8:	9b03      	ldr	r3, [sp, #12]
 80032da:	1d1a      	adds	r2, r3, #4
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	9203      	str	r2, [sp, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	bfb8      	it	lt
 80032e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80032e8:	3702      	adds	r7, #2
 80032ea:	9305      	str	r3, [sp, #20]
 80032ec:	4d2e      	ldr	r5, [pc, #184]	; (80033a8 <_svfiprintf_r+0x1e0>)
 80032ee:	7839      	ldrb	r1, [r7, #0]
 80032f0:	2203      	movs	r2, #3
 80032f2:	4628      	mov	r0, r5
 80032f4:	f7fc ff94 	bl	8000220 <memchr>
 80032f8:	b138      	cbz	r0, 800330a <_svfiprintf_r+0x142>
 80032fa:	2340      	movs	r3, #64	; 0x40
 80032fc:	1b40      	subs	r0, r0, r5
 80032fe:	fa03 f000 	lsl.w	r0, r3, r0
 8003302:	9b04      	ldr	r3, [sp, #16]
 8003304:	4303      	orrs	r3, r0
 8003306:	3701      	adds	r7, #1
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	7839      	ldrb	r1, [r7, #0]
 800330c:	4827      	ldr	r0, [pc, #156]	; (80033ac <_svfiprintf_r+0x1e4>)
 800330e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003312:	2206      	movs	r2, #6
 8003314:	1c7e      	adds	r6, r7, #1
 8003316:	f7fc ff83 	bl	8000220 <memchr>
 800331a:	2800      	cmp	r0, #0
 800331c:	d038      	beq.n	8003390 <_svfiprintf_r+0x1c8>
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <_svfiprintf_r+0x1e8>)
 8003320:	bb13      	cbnz	r3, 8003368 <_svfiprintf_r+0x1a0>
 8003322:	9b03      	ldr	r3, [sp, #12]
 8003324:	3307      	adds	r3, #7
 8003326:	f023 0307 	bic.w	r3, r3, #7
 800332a:	3308      	adds	r3, #8
 800332c:	9303      	str	r3, [sp, #12]
 800332e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003330:	444b      	add	r3, r9
 8003332:	9309      	str	r3, [sp, #36]	; 0x24
 8003334:	e76d      	b.n	8003212 <_svfiprintf_r+0x4a>
 8003336:	fb05 3202 	mla	r2, r5, r2, r3
 800333a:	2001      	movs	r0, #1
 800333c:	460f      	mov	r7, r1
 800333e:	e7a6      	b.n	800328e <_svfiprintf_r+0xc6>
 8003340:	2300      	movs	r3, #0
 8003342:	3701      	adds	r7, #1
 8003344:	9305      	str	r3, [sp, #20]
 8003346:	4619      	mov	r1, r3
 8003348:	250a      	movs	r5, #10
 800334a:	4638      	mov	r0, r7
 800334c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003350:	3a30      	subs	r2, #48	; 0x30
 8003352:	2a09      	cmp	r2, #9
 8003354:	d903      	bls.n	800335e <_svfiprintf_r+0x196>
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0c8      	beq.n	80032ec <_svfiprintf_r+0x124>
 800335a:	9105      	str	r1, [sp, #20]
 800335c:	e7c6      	b.n	80032ec <_svfiprintf_r+0x124>
 800335e:	fb05 2101 	mla	r1, r5, r1, r2
 8003362:	2301      	movs	r3, #1
 8003364:	4607      	mov	r7, r0
 8003366:	e7f0      	b.n	800334a <_svfiprintf_r+0x182>
 8003368:	ab03      	add	r3, sp, #12
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	4622      	mov	r2, r4
 800336e:	4b11      	ldr	r3, [pc, #68]	; (80033b4 <_svfiprintf_r+0x1ec>)
 8003370:	a904      	add	r1, sp, #16
 8003372:	4640      	mov	r0, r8
 8003374:	f3af 8000 	nop.w
 8003378:	f1b0 3fff 	cmp.w	r0, #4294967295
 800337c:	4681      	mov	r9, r0
 800337e:	d1d6      	bne.n	800332e <_svfiprintf_r+0x166>
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	065b      	lsls	r3, r3, #25
 8003384:	f53f af35 	bmi.w	80031f2 <_svfiprintf_r+0x2a>
 8003388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800338a:	b01d      	add	sp, #116	; 0x74
 800338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003390:	ab03      	add	r3, sp, #12
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4622      	mov	r2, r4
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <_svfiprintf_r+0x1ec>)
 8003398:	a904      	add	r1, sp, #16
 800339a:	4640      	mov	r0, r8
 800339c:	f000 f882 	bl	80034a4 <_printf_i>
 80033a0:	e7ea      	b.n	8003378 <_svfiprintf_r+0x1b0>
 80033a2:	bf00      	nop
 80033a4:	08003960 	.word	0x08003960
 80033a8:	08003966 	.word	0x08003966
 80033ac:	0800396a 	.word	0x0800396a
 80033b0:	00000000 	.word	0x00000000
 80033b4:	08003115 	.word	0x08003115

080033b8 <_printf_common>:
 80033b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033bc:	4691      	mov	r9, r2
 80033be:	461f      	mov	r7, r3
 80033c0:	688a      	ldr	r2, [r1, #8]
 80033c2:	690b      	ldr	r3, [r1, #16]
 80033c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033c8:	4293      	cmp	r3, r2
 80033ca:	bfb8      	it	lt
 80033cc:	4613      	movlt	r3, r2
 80033ce:	f8c9 3000 	str.w	r3, [r9]
 80033d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033d6:	4606      	mov	r6, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	b112      	cbz	r2, 80033e2 <_printf_common+0x2a>
 80033dc:	3301      	adds	r3, #1
 80033de:	f8c9 3000 	str.w	r3, [r9]
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	0699      	lsls	r1, r3, #26
 80033e6:	bf42      	ittt	mi
 80033e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033ec:	3302      	addmi	r3, #2
 80033ee:	f8c9 3000 	strmi.w	r3, [r9]
 80033f2:	6825      	ldr	r5, [r4, #0]
 80033f4:	f015 0506 	ands.w	r5, r5, #6
 80033f8:	d107      	bne.n	800340a <_printf_common+0x52>
 80033fa:	f104 0a19 	add.w	sl, r4, #25
 80033fe:	68e3      	ldr	r3, [r4, #12]
 8003400:	f8d9 2000 	ldr.w	r2, [r9]
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	42ab      	cmp	r3, r5
 8003408:	dc28      	bgt.n	800345c <_printf_common+0xa4>
 800340a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800340e:	6822      	ldr	r2, [r4, #0]
 8003410:	3300      	adds	r3, #0
 8003412:	bf18      	it	ne
 8003414:	2301      	movne	r3, #1
 8003416:	0692      	lsls	r2, r2, #26
 8003418:	d42d      	bmi.n	8003476 <_printf_common+0xbe>
 800341a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800341e:	4639      	mov	r1, r7
 8003420:	4630      	mov	r0, r6
 8003422:	47c0      	blx	r8
 8003424:	3001      	adds	r0, #1
 8003426:	d020      	beq.n	800346a <_printf_common+0xb2>
 8003428:	6823      	ldr	r3, [r4, #0]
 800342a:	68e5      	ldr	r5, [r4, #12]
 800342c:	f8d9 2000 	ldr.w	r2, [r9]
 8003430:	f003 0306 	and.w	r3, r3, #6
 8003434:	2b04      	cmp	r3, #4
 8003436:	bf08      	it	eq
 8003438:	1aad      	subeq	r5, r5, r2
 800343a:	68a3      	ldr	r3, [r4, #8]
 800343c:	6922      	ldr	r2, [r4, #16]
 800343e:	bf0c      	ite	eq
 8003440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003444:	2500      	movne	r5, #0
 8003446:	4293      	cmp	r3, r2
 8003448:	bfc4      	itt	gt
 800344a:	1a9b      	subgt	r3, r3, r2
 800344c:	18ed      	addgt	r5, r5, r3
 800344e:	f04f 0900 	mov.w	r9, #0
 8003452:	341a      	adds	r4, #26
 8003454:	454d      	cmp	r5, r9
 8003456:	d11a      	bne.n	800348e <_printf_common+0xd6>
 8003458:	2000      	movs	r0, #0
 800345a:	e008      	b.n	800346e <_printf_common+0xb6>
 800345c:	2301      	movs	r3, #1
 800345e:	4652      	mov	r2, sl
 8003460:	4639      	mov	r1, r7
 8003462:	4630      	mov	r0, r6
 8003464:	47c0      	blx	r8
 8003466:	3001      	adds	r0, #1
 8003468:	d103      	bne.n	8003472 <_printf_common+0xba>
 800346a:	f04f 30ff 	mov.w	r0, #4294967295
 800346e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003472:	3501      	adds	r5, #1
 8003474:	e7c3      	b.n	80033fe <_printf_common+0x46>
 8003476:	18e1      	adds	r1, r4, r3
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	2030      	movs	r0, #48	; 0x30
 800347c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003480:	4422      	add	r2, r4
 8003482:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003486:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800348a:	3302      	adds	r3, #2
 800348c:	e7c5      	b.n	800341a <_printf_common+0x62>
 800348e:	2301      	movs	r3, #1
 8003490:	4622      	mov	r2, r4
 8003492:	4639      	mov	r1, r7
 8003494:	4630      	mov	r0, r6
 8003496:	47c0      	blx	r8
 8003498:	3001      	adds	r0, #1
 800349a:	d0e6      	beq.n	800346a <_printf_common+0xb2>
 800349c:	f109 0901 	add.w	r9, r9, #1
 80034a0:	e7d8      	b.n	8003454 <_printf_common+0x9c>
	...

080034a4 <_printf_i>:
 80034a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80034ac:	460c      	mov	r4, r1
 80034ae:	7e09      	ldrb	r1, [r1, #24]
 80034b0:	b085      	sub	sp, #20
 80034b2:	296e      	cmp	r1, #110	; 0x6e
 80034b4:	4617      	mov	r7, r2
 80034b6:	4606      	mov	r6, r0
 80034b8:	4698      	mov	r8, r3
 80034ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80034bc:	f000 80b3 	beq.w	8003626 <_printf_i+0x182>
 80034c0:	d822      	bhi.n	8003508 <_printf_i+0x64>
 80034c2:	2963      	cmp	r1, #99	; 0x63
 80034c4:	d036      	beq.n	8003534 <_printf_i+0x90>
 80034c6:	d80a      	bhi.n	80034de <_printf_i+0x3a>
 80034c8:	2900      	cmp	r1, #0
 80034ca:	f000 80b9 	beq.w	8003640 <_printf_i+0x19c>
 80034ce:	2958      	cmp	r1, #88	; 0x58
 80034d0:	f000 8083 	beq.w	80035da <_printf_i+0x136>
 80034d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80034dc:	e032      	b.n	8003544 <_printf_i+0xa0>
 80034de:	2964      	cmp	r1, #100	; 0x64
 80034e0:	d001      	beq.n	80034e6 <_printf_i+0x42>
 80034e2:	2969      	cmp	r1, #105	; 0x69
 80034e4:	d1f6      	bne.n	80034d4 <_printf_i+0x30>
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	6813      	ldr	r3, [r2, #0]
 80034ea:	0605      	lsls	r5, r0, #24
 80034ec:	f103 0104 	add.w	r1, r3, #4
 80034f0:	d52a      	bpl.n	8003548 <_printf_i+0xa4>
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6011      	str	r1, [r2, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	da03      	bge.n	8003502 <_printf_i+0x5e>
 80034fa:	222d      	movs	r2, #45	; 0x2d
 80034fc:	425b      	negs	r3, r3
 80034fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003502:	486f      	ldr	r0, [pc, #444]	; (80036c0 <_printf_i+0x21c>)
 8003504:	220a      	movs	r2, #10
 8003506:	e039      	b.n	800357c <_printf_i+0xd8>
 8003508:	2973      	cmp	r1, #115	; 0x73
 800350a:	f000 809d 	beq.w	8003648 <_printf_i+0x1a4>
 800350e:	d808      	bhi.n	8003522 <_printf_i+0x7e>
 8003510:	296f      	cmp	r1, #111	; 0x6f
 8003512:	d020      	beq.n	8003556 <_printf_i+0xb2>
 8003514:	2970      	cmp	r1, #112	; 0x70
 8003516:	d1dd      	bne.n	80034d4 <_printf_i+0x30>
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	f043 0320 	orr.w	r3, r3, #32
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	e003      	b.n	800352a <_printf_i+0x86>
 8003522:	2975      	cmp	r1, #117	; 0x75
 8003524:	d017      	beq.n	8003556 <_printf_i+0xb2>
 8003526:	2978      	cmp	r1, #120	; 0x78
 8003528:	d1d4      	bne.n	80034d4 <_printf_i+0x30>
 800352a:	2378      	movs	r3, #120	; 0x78
 800352c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003530:	4864      	ldr	r0, [pc, #400]	; (80036c4 <_printf_i+0x220>)
 8003532:	e055      	b.n	80035e0 <_printf_i+0x13c>
 8003534:	6813      	ldr	r3, [r2, #0]
 8003536:	1d19      	adds	r1, r3, #4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6011      	str	r1, [r2, #0]
 800353c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003544:	2301      	movs	r3, #1
 8003546:	e08c      	b.n	8003662 <_printf_i+0x1be>
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6011      	str	r1, [r2, #0]
 800354c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003550:	bf18      	it	ne
 8003552:	b21b      	sxthne	r3, r3
 8003554:	e7cf      	b.n	80034f6 <_printf_i+0x52>
 8003556:	6813      	ldr	r3, [r2, #0]
 8003558:	6825      	ldr	r5, [r4, #0]
 800355a:	1d18      	adds	r0, r3, #4
 800355c:	6010      	str	r0, [r2, #0]
 800355e:	0628      	lsls	r0, r5, #24
 8003560:	d501      	bpl.n	8003566 <_printf_i+0xc2>
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	e002      	b.n	800356c <_printf_i+0xc8>
 8003566:	0668      	lsls	r0, r5, #25
 8003568:	d5fb      	bpl.n	8003562 <_printf_i+0xbe>
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	4854      	ldr	r0, [pc, #336]	; (80036c0 <_printf_i+0x21c>)
 800356e:	296f      	cmp	r1, #111	; 0x6f
 8003570:	bf14      	ite	ne
 8003572:	220a      	movne	r2, #10
 8003574:	2208      	moveq	r2, #8
 8003576:	2100      	movs	r1, #0
 8003578:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800357c:	6865      	ldr	r5, [r4, #4]
 800357e:	60a5      	str	r5, [r4, #8]
 8003580:	2d00      	cmp	r5, #0
 8003582:	f2c0 8095 	blt.w	80036b0 <_printf_i+0x20c>
 8003586:	6821      	ldr	r1, [r4, #0]
 8003588:	f021 0104 	bic.w	r1, r1, #4
 800358c:	6021      	str	r1, [r4, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d13d      	bne.n	800360e <_printf_i+0x16a>
 8003592:	2d00      	cmp	r5, #0
 8003594:	f040 808e 	bne.w	80036b4 <_printf_i+0x210>
 8003598:	4665      	mov	r5, ip
 800359a:	2a08      	cmp	r2, #8
 800359c:	d10b      	bne.n	80035b6 <_printf_i+0x112>
 800359e:	6823      	ldr	r3, [r4, #0]
 80035a0:	07db      	lsls	r3, r3, #31
 80035a2:	d508      	bpl.n	80035b6 <_printf_i+0x112>
 80035a4:	6923      	ldr	r3, [r4, #16]
 80035a6:	6862      	ldr	r2, [r4, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	bfde      	ittt	le
 80035ac:	2330      	movle	r3, #48	; 0x30
 80035ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035b6:	ebac 0305 	sub.w	r3, ip, r5
 80035ba:	6123      	str	r3, [r4, #16]
 80035bc:	f8cd 8000 	str.w	r8, [sp]
 80035c0:	463b      	mov	r3, r7
 80035c2:	aa03      	add	r2, sp, #12
 80035c4:	4621      	mov	r1, r4
 80035c6:	4630      	mov	r0, r6
 80035c8:	f7ff fef6 	bl	80033b8 <_printf_common>
 80035cc:	3001      	adds	r0, #1
 80035ce:	d14d      	bne.n	800366c <_printf_i+0x1c8>
 80035d0:	f04f 30ff 	mov.w	r0, #4294967295
 80035d4:	b005      	add	sp, #20
 80035d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035da:	4839      	ldr	r0, [pc, #228]	; (80036c0 <_printf_i+0x21c>)
 80035dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035e0:	6813      	ldr	r3, [r2, #0]
 80035e2:	6821      	ldr	r1, [r4, #0]
 80035e4:	1d1d      	adds	r5, r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6015      	str	r5, [r2, #0]
 80035ea:	060a      	lsls	r2, r1, #24
 80035ec:	d50b      	bpl.n	8003606 <_printf_i+0x162>
 80035ee:	07ca      	lsls	r2, r1, #31
 80035f0:	bf44      	itt	mi
 80035f2:	f041 0120 	orrmi.w	r1, r1, #32
 80035f6:	6021      	strmi	r1, [r4, #0]
 80035f8:	b91b      	cbnz	r3, 8003602 <_printf_i+0x15e>
 80035fa:	6822      	ldr	r2, [r4, #0]
 80035fc:	f022 0220 	bic.w	r2, r2, #32
 8003600:	6022      	str	r2, [r4, #0]
 8003602:	2210      	movs	r2, #16
 8003604:	e7b7      	b.n	8003576 <_printf_i+0xd2>
 8003606:	064d      	lsls	r5, r1, #25
 8003608:	bf48      	it	mi
 800360a:	b29b      	uxthmi	r3, r3
 800360c:	e7ef      	b.n	80035ee <_printf_i+0x14a>
 800360e:	4665      	mov	r5, ip
 8003610:	fbb3 f1f2 	udiv	r1, r3, r2
 8003614:	fb02 3311 	mls	r3, r2, r1, r3
 8003618:	5cc3      	ldrb	r3, [r0, r3]
 800361a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800361e:	460b      	mov	r3, r1
 8003620:	2900      	cmp	r1, #0
 8003622:	d1f5      	bne.n	8003610 <_printf_i+0x16c>
 8003624:	e7b9      	b.n	800359a <_printf_i+0xf6>
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	6825      	ldr	r5, [r4, #0]
 800362a:	6961      	ldr	r1, [r4, #20]
 800362c:	1d18      	adds	r0, r3, #4
 800362e:	6010      	str	r0, [r2, #0]
 8003630:	0628      	lsls	r0, r5, #24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	d501      	bpl.n	800363a <_printf_i+0x196>
 8003636:	6019      	str	r1, [r3, #0]
 8003638:	e002      	b.n	8003640 <_printf_i+0x19c>
 800363a:	066a      	lsls	r2, r5, #25
 800363c:	d5fb      	bpl.n	8003636 <_printf_i+0x192>
 800363e:	8019      	strh	r1, [r3, #0]
 8003640:	2300      	movs	r3, #0
 8003642:	6123      	str	r3, [r4, #16]
 8003644:	4665      	mov	r5, ip
 8003646:	e7b9      	b.n	80035bc <_printf_i+0x118>
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	1d19      	adds	r1, r3, #4
 800364c:	6011      	str	r1, [r2, #0]
 800364e:	681d      	ldr	r5, [r3, #0]
 8003650:	6862      	ldr	r2, [r4, #4]
 8003652:	2100      	movs	r1, #0
 8003654:	4628      	mov	r0, r5
 8003656:	f7fc fde3 	bl	8000220 <memchr>
 800365a:	b108      	cbz	r0, 8003660 <_printf_i+0x1bc>
 800365c:	1b40      	subs	r0, r0, r5
 800365e:	6060      	str	r0, [r4, #4]
 8003660:	6863      	ldr	r3, [r4, #4]
 8003662:	6123      	str	r3, [r4, #16]
 8003664:	2300      	movs	r3, #0
 8003666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800366a:	e7a7      	b.n	80035bc <_printf_i+0x118>
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	462a      	mov	r2, r5
 8003670:	4639      	mov	r1, r7
 8003672:	4630      	mov	r0, r6
 8003674:	47c0      	blx	r8
 8003676:	3001      	adds	r0, #1
 8003678:	d0aa      	beq.n	80035d0 <_printf_i+0x12c>
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	079b      	lsls	r3, r3, #30
 800367e:	d413      	bmi.n	80036a8 <_printf_i+0x204>
 8003680:	68e0      	ldr	r0, [r4, #12]
 8003682:	9b03      	ldr	r3, [sp, #12]
 8003684:	4298      	cmp	r0, r3
 8003686:	bfb8      	it	lt
 8003688:	4618      	movlt	r0, r3
 800368a:	e7a3      	b.n	80035d4 <_printf_i+0x130>
 800368c:	2301      	movs	r3, #1
 800368e:	464a      	mov	r2, r9
 8003690:	4639      	mov	r1, r7
 8003692:	4630      	mov	r0, r6
 8003694:	47c0      	blx	r8
 8003696:	3001      	adds	r0, #1
 8003698:	d09a      	beq.n	80035d0 <_printf_i+0x12c>
 800369a:	3501      	adds	r5, #1
 800369c:	68e3      	ldr	r3, [r4, #12]
 800369e:	9a03      	ldr	r2, [sp, #12]
 80036a0:	1a9b      	subs	r3, r3, r2
 80036a2:	42ab      	cmp	r3, r5
 80036a4:	dcf2      	bgt.n	800368c <_printf_i+0x1e8>
 80036a6:	e7eb      	b.n	8003680 <_printf_i+0x1dc>
 80036a8:	2500      	movs	r5, #0
 80036aa:	f104 0919 	add.w	r9, r4, #25
 80036ae:	e7f5      	b.n	800369c <_printf_i+0x1f8>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1ac      	bne.n	800360e <_printf_i+0x16a>
 80036b4:	7803      	ldrb	r3, [r0, #0]
 80036b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036be:	e76c      	b.n	800359a <_printf_i+0xf6>
 80036c0:	08003971 	.word	0x08003971
 80036c4:	08003982 	.word	0x08003982

080036c8 <memcpy>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	1e43      	subs	r3, r0, #1
 80036cc:	440a      	add	r2, r1
 80036ce:	4291      	cmp	r1, r2
 80036d0:	d100      	bne.n	80036d4 <memcpy+0xc>
 80036d2:	bd10      	pop	{r4, pc}
 80036d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036dc:	e7f7      	b.n	80036ce <memcpy+0x6>

080036de <memmove>:
 80036de:	4288      	cmp	r0, r1
 80036e0:	b510      	push	{r4, lr}
 80036e2:	eb01 0302 	add.w	r3, r1, r2
 80036e6:	d807      	bhi.n	80036f8 <memmove+0x1a>
 80036e8:	1e42      	subs	r2, r0, #1
 80036ea:	4299      	cmp	r1, r3
 80036ec:	d00a      	beq.n	8003704 <memmove+0x26>
 80036ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036f2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80036f6:	e7f8      	b.n	80036ea <memmove+0xc>
 80036f8:	4283      	cmp	r3, r0
 80036fa:	d9f5      	bls.n	80036e8 <memmove+0xa>
 80036fc:	1881      	adds	r1, r0, r2
 80036fe:	1ad2      	subs	r2, r2, r3
 8003700:	42d3      	cmn	r3, r2
 8003702:	d100      	bne.n	8003706 <memmove+0x28>
 8003704:	bd10      	pop	{r4, pc}
 8003706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800370a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800370e:	e7f7      	b.n	8003700 <memmove+0x22>

08003710 <_free_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	4605      	mov	r5, r0
 8003714:	2900      	cmp	r1, #0
 8003716:	d045      	beq.n	80037a4 <_free_r+0x94>
 8003718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800371c:	1f0c      	subs	r4, r1, #4
 800371e:	2b00      	cmp	r3, #0
 8003720:	bfb8      	it	lt
 8003722:	18e4      	addlt	r4, r4, r3
 8003724:	f000 f8d2 	bl	80038cc <__malloc_lock>
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <_free_r+0x98>)
 800372a:	6813      	ldr	r3, [r2, #0]
 800372c:	4610      	mov	r0, r2
 800372e:	b933      	cbnz	r3, 800373e <_free_r+0x2e>
 8003730:	6063      	str	r3, [r4, #4]
 8003732:	6014      	str	r4, [r2, #0]
 8003734:	4628      	mov	r0, r5
 8003736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800373a:	f000 b8c8 	b.w	80038ce <__malloc_unlock>
 800373e:	42a3      	cmp	r3, r4
 8003740:	d90c      	bls.n	800375c <_free_r+0x4c>
 8003742:	6821      	ldr	r1, [r4, #0]
 8003744:	1862      	adds	r2, r4, r1
 8003746:	4293      	cmp	r3, r2
 8003748:	bf04      	itt	eq
 800374a:	681a      	ldreq	r2, [r3, #0]
 800374c:	685b      	ldreq	r3, [r3, #4]
 800374e:	6063      	str	r3, [r4, #4]
 8003750:	bf04      	itt	eq
 8003752:	1852      	addeq	r2, r2, r1
 8003754:	6022      	streq	r2, [r4, #0]
 8003756:	6004      	str	r4, [r0, #0]
 8003758:	e7ec      	b.n	8003734 <_free_r+0x24>
 800375a:	4613      	mov	r3, r2
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	b10a      	cbz	r2, 8003764 <_free_r+0x54>
 8003760:	42a2      	cmp	r2, r4
 8003762:	d9fa      	bls.n	800375a <_free_r+0x4a>
 8003764:	6819      	ldr	r1, [r3, #0]
 8003766:	1858      	adds	r0, r3, r1
 8003768:	42a0      	cmp	r0, r4
 800376a:	d10b      	bne.n	8003784 <_free_r+0x74>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	4401      	add	r1, r0
 8003770:	1858      	adds	r0, r3, r1
 8003772:	4282      	cmp	r2, r0
 8003774:	6019      	str	r1, [r3, #0]
 8003776:	d1dd      	bne.n	8003734 <_free_r+0x24>
 8003778:	6810      	ldr	r0, [r2, #0]
 800377a:	6852      	ldr	r2, [r2, #4]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	4401      	add	r1, r0
 8003780:	6019      	str	r1, [r3, #0]
 8003782:	e7d7      	b.n	8003734 <_free_r+0x24>
 8003784:	d902      	bls.n	800378c <_free_r+0x7c>
 8003786:	230c      	movs	r3, #12
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	e7d3      	b.n	8003734 <_free_r+0x24>
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	1821      	adds	r1, r4, r0
 8003790:	428a      	cmp	r2, r1
 8003792:	bf04      	itt	eq
 8003794:	6811      	ldreq	r1, [r2, #0]
 8003796:	6852      	ldreq	r2, [r2, #4]
 8003798:	6062      	str	r2, [r4, #4]
 800379a:	bf04      	itt	eq
 800379c:	1809      	addeq	r1, r1, r0
 800379e:	6021      	streq	r1, [r4, #0]
 80037a0:	605c      	str	r4, [r3, #4]
 80037a2:	e7c7      	b.n	8003734 <_free_r+0x24>
 80037a4:	bd38      	pop	{r3, r4, r5, pc}
 80037a6:	bf00      	nop
 80037a8:	200000a0 	.word	0x200000a0

080037ac <_malloc_r>:
 80037ac:	b570      	push	{r4, r5, r6, lr}
 80037ae:	1ccd      	adds	r5, r1, #3
 80037b0:	f025 0503 	bic.w	r5, r5, #3
 80037b4:	3508      	adds	r5, #8
 80037b6:	2d0c      	cmp	r5, #12
 80037b8:	bf38      	it	cc
 80037ba:	250c      	movcc	r5, #12
 80037bc:	2d00      	cmp	r5, #0
 80037be:	4606      	mov	r6, r0
 80037c0:	db01      	blt.n	80037c6 <_malloc_r+0x1a>
 80037c2:	42a9      	cmp	r1, r5
 80037c4:	d903      	bls.n	80037ce <_malloc_r+0x22>
 80037c6:	230c      	movs	r3, #12
 80037c8:	6033      	str	r3, [r6, #0]
 80037ca:	2000      	movs	r0, #0
 80037cc:	bd70      	pop	{r4, r5, r6, pc}
 80037ce:	f000 f87d 	bl	80038cc <__malloc_lock>
 80037d2:	4a21      	ldr	r2, [pc, #132]	; (8003858 <_malloc_r+0xac>)
 80037d4:	6814      	ldr	r4, [r2, #0]
 80037d6:	4621      	mov	r1, r4
 80037d8:	b991      	cbnz	r1, 8003800 <_malloc_r+0x54>
 80037da:	4c20      	ldr	r4, [pc, #128]	; (800385c <_malloc_r+0xb0>)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	b91b      	cbnz	r3, 80037e8 <_malloc_r+0x3c>
 80037e0:	4630      	mov	r0, r6
 80037e2:	f000 f863 	bl	80038ac <_sbrk_r>
 80037e6:	6020      	str	r0, [r4, #0]
 80037e8:	4629      	mov	r1, r5
 80037ea:	4630      	mov	r0, r6
 80037ec:	f000 f85e 	bl	80038ac <_sbrk_r>
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	d124      	bne.n	800383e <_malloc_r+0x92>
 80037f4:	230c      	movs	r3, #12
 80037f6:	6033      	str	r3, [r6, #0]
 80037f8:	4630      	mov	r0, r6
 80037fa:	f000 f868 	bl	80038ce <__malloc_unlock>
 80037fe:	e7e4      	b.n	80037ca <_malloc_r+0x1e>
 8003800:	680b      	ldr	r3, [r1, #0]
 8003802:	1b5b      	subs	r3, r3, r5
 8003804:	d418      	bmi.n	8003838 <_malloc_r+0x8c>
 8003806:	2b0b      	cmp	r3, #11
 8003808:	d90f      	bls.n	800382a <_malloc_r+0x7e>
 800380a:	600b      	str	r3, [r1, #0]
 800380c:	50cd      	str	r5, [r1, r3]
 800380e:	18cc      	adds	r4, r1, r3
 8003810:	4630      	mov	r0, r6
 8003812:	f000 f85c 	bl	80038ce <__malloc_unlock>
 8003816:	f104 000b 	add.w	r0, r4, #11
 800381a:	1d23      	adds	r3, r4, #4
 800381c:	f020 0007 	bic.w	r0, r0, #7
 8003820:	1ac3      	subs	r3, r0, r3
 8003822:	d0d3      	beq.n	80037cc <_malloc_r+0x20>
 8003824:	425a      	negs	r2, r3
 8003826:	50e2      	str	r2, [r4, r3]
 8003828:	e7d0      	b.n	80037cc <_malloc_r+0x20>
 800382a:	428c      	cmp	r4, r1
 800382c:	684b      	ldr	r3, [r1, #4]
 800382e:	bf16      	itet	ne
 8003830:	6063      	strne	r3, [r4, #4]
 8003832:	6013      	streq	r3, [r2, #0]
 8003834:	460c      	movne	r4, r1
 8003836:	e7eb      	b.n	8003810 <_malloc_r+0x64>
 8003838:	460c      	mov	r4, r1
 800383a:	6849      	ldr	r1, [r1, #4]
 800383c:	e7cc      	b.n	80037d8 <_malloc_r+0x2c>
 800383e:	1cc4      	adds	r4, r0, #3
 8003840:	f024 0403 	bic.w	r4, r4, #3
 8003844:	42a0      	cmp	r0, r4
 8003846:	d005      	beq.n	8003854 <_malloc_r+0xa8>
 8003848:	1a21      	subs	r1, r4, r0
 800384a:	4630      	mov	r0, r6
 800384c:	f000 f82e 	bl	80038ac <_sbrk_r>
 8003850:	3001      	adds	r0, #1
 8003852:	d0cf      	beq.n	80037f4 <_malloc_r+0x48>
 8003854:	6025      	str	r5, [r4, #0]
 8003856:	e7db      	b.n	8003810 <_malloc_r+0x64>
 8003858:	200000a0 	.word	0x200000a0
 800385c:	200000a4 	.word	0x200000a4

08003860 <_realloc_r>:
 8003860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003862:	4607      	mov	r7, r0
 8003864:	4614      	mov	r4, r2
 8003866:	460e      	mov	r6, r1
 8003868:	b921      	cbnz	r1, 8003874 <_realloc_r+0x14>
 800386a:	4611      	mov	r1, r2
 800386c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003870:	f7ff bf9c 	b.w	80037ac <_malloc_r>
 8003874:	b922      	cbnz	r2, 8003880 <_realloc_r+0x20>
 8003876:	f7ff ff4b 	bl	8003710 <_free_r>
 800387a:	4625      	mov	r5, r4
 800387c:	4628      	mov	r0, r5
 800387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003880:	f000 f826 	bl	80038d0 <_malloc_usable_size_r>
 8003884:	42a0      	cmp	r0, r4
 8003886:	d20f      	bcs.n	80038a8 <_realloc_r+0x48>
 8003888:	4621      	mov	r1, r4
 800388a:	4638      	mov	r0, r7
 800388c:	f7ff ff8e 	bl	80037ac <_malloc_r>
 8003890:	4605      	mov	r5, r0
 8003892:	2800      	cmp	r0, #0
 8003894:	d0f2      	beq.n	800387c <_realloc_r+0x1c>
 8003896:	4631      	mov	r1, r6
 8003898:	4622      	mov	r2, r4
 800389a:	f7ff ff15 	bl	80036c8 <memcpy>
 800389e:	4631      	mov	r1, r6
 80038a0:	4638      	mov	r0, r7
 80038a2:	f7ff ff35 	bl	8003710 <_free_r>
 80038a6:	e7e9      	b.n	800387c <_realloc_r+0x1c>
 80038a8:	4635      	mov	r5, r6
 80038aa:	e7e7      	b.n	800387c <_realloc_r+0x1c>

080038ac <_sbrk_r>:
 80038ac:	b538      	push	{r3, r4, r5, lr}
 80038ae:	4c06      	ldr	r4, [pc, #24]	; (80038c8 <_sbrk_r+0x1c>)
 80038b0:	2300      	movs	r3, #0
 80038b2:	4605      	mov	r5, r0
 80038b4:	4608      	mov	r0, r1
 80038b6:	6023      	str	r3, [r4, #0]
 80038b8:	f7fd fa52 	bl	8000d60 <_sbrk>
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d102      	bne.n	80038c6 <_sbrk_r+0x1a>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	b103      	cbz	r3, 80038c6 <_sbrk_r+0x1a>
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	bd38      	pop	{r3, r4, r5, pc}
 80038c8:	200003c4 	.word	0x200003c4

080038cc <__malloc_lock>:
 80038cc:	4770      	bx	lr

080038ce <__malloc_unlock>:
 80038ce:	4770      	bx	lr

080038d0 <_malloc_usable_size_r>:
 80038d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038d4:	1f18      	subs	r0, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bfbc      	itt	lt
 80038da:	580b      	ldrlt	r3, [r1, r0]
 80038dc:	18c0      	addlt	r0, r0, r3
 80038de:	4770      	bx	lr

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
