
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e90  08002e90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e94  08002e94  00012e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002ea4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002ea4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cde7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b14  00000000  00000000  0002ce23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002e938  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf8  00000000  00000000  0002f608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000221a8  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000093bc  00000000  00000000  000523a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1d5c  00000000  00000000  0005b764  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012d4c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003638  00000000  00000000  0012d53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e58 	.word	0x08002e58

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002e58 	.word	0x08002e58

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f000 fb8a 	bl	8000c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f80c 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f95a 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f92e 	bl	8000774 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000518:	f000 f872 	bl	8000600 <MX_CAN1_Init>
  MX_CAN2_Init();
 800051c:	f000 f8a6 	bl	800066c <MX_CAN2_Init>
  MX_TIM4_Init();
 8000520:	f000 f8da 	bl	80006d8 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x20>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2234      	movs	r2, #52	; 0x34
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f002 fc86 	bl	8002e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b29      	ldr	r3, [pc, #164]	; (80005f8 <SystemClock_Config+0xd0>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a28      	ldr	r2, [pc, #160]	; (80005f8 <SystemClock_Config+0xd0>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000568:	2300      	movs	r3, #0
 800056a:	603b      	str	r3, [r7, #0]
 800056c:	4b23      	ldr	r3, [pc, #140]	; (80005fc <SystemClock_Config+0xd4>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd4>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a0:	2354      	movs	r3, #84	; 0x54
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 031c 	add.w	r3, r7, #28
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fa19 	bl	80019ec <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f972 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 ff49 	bl	8001478 <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005ec:	f000 f95c 	bl	80008a8 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_CAN1_Init+0x64>)
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <MX_CAN1_Init+0x68>)
 8000608:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800060a:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_CAN1_Init+0x64>)
 800060c:	2203      	movs	r2, #3
 800060e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_CAN1_Init+0x64>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000616:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_CAN1_Init+0x64>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_CAN1_Init+0x64>)
 800061e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000622:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_CAN1_Init+0x64>)
 8000626:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800062a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_CAN1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_CAN1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_CAN1_Init+0x64>)
 8000640:	2201      	movs	r2, #1
 8000642:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_CAN1_Init+0x64>)
 8000652:	f000 fb57 	bl	8000d04 <HAL_CAN_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800065c:	f000 f924 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200000d4 	.word	0x200000d4
 8000668:	40006400 	.word	0x40006400

0800066c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_CAN2_Init+0x64>)
 8000672:	4a18      	ldr	r2, [pc, #96]	; (80006d4 <MX_CAN2_Init+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000676:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <MX_CAN2_Init+0x64>)
 8000678:	2203      	movs	r2, #3
 800067a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_CAN2_Init+0x64>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000682:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <MX_CAN2_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_CAN2_Init+0x64>)
 800068a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800068e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_CAN2_Init+0x64>)
 8000692:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000696:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_CAN2_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_CAN2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_CAN2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_CAN2_Init+0x64>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_CAN2_Init+0x64>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CAN2_Init+0x64>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_CAN2_Init+0x64>)
 80006be:	f000 fb21 	bl	8000d04 <HAL_CAN_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80006c8:	f000 f8ee 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000006c 	.word	0x2000006c
 80006d4:	40006800 	.word	0x40006800

080006d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_TIM4_Init+0x94>)
 80006f6:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <MX_TIM4_Init+0x98>)
 80006f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 840;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_TIM4_Init+0x94>)
 80006fc:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000700:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_TIM4_Init+0x94>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_TIM4_Init+0x94>)
 800070a:	f242 7210 	movw	r2, #10000	; 0x2710
 800070e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b16      	ldr	r3, [pc, #88]	; (800076c <MX_TIM4_Init+0x94>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_TIM4_Init+0x94>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800071c:	4813      	ldr	r0, [pc, #76]	; (800076c <MX_TIM4_Init+0x94>)
 800071e:	f001 fbbf 	bl	8001ea0 <HAL_TIM_Base_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000728:	f000 f8be 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4619      	mov	r1, r3
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <MX_TIM4_Init+0x94>)
 800073a:	f001 fce4 	bl	8002106 <HAL_TIM_ConfigClockSource>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000744:	f000 f8b0 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_TIM4_Init+0x94>)
 8000756:	f001 fef9 	bl	800254c <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000760:	f000 f8a2 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	3718      	adds	r7, #24
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40000800 	.word	0x40000800

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	; (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 ff5e 	bl	800266c <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f877 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000094 	.word	0x20000094
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	; 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2c      	ldr	r2, [pc, #176]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a25      	ldr	r2, [pc, #148]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a1e      	ldr	r2, [pc, #120]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <MX_GPIO_Init+0xd0>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2120      	movs	r1, #32
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_GPIO_Init+0xd4>)
 8000854:	f000 fdf6 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <MX_GPIO_Init+0xd8>)
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	4619      	mov	r1, r3
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_GPIO_Init+0xdc>)
 800086e:	f000 fc57 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000872:	2320      	movs	r3, #32
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_GPIO_Init+0xd4>)
 800088a:	f000 fc49 	bl	8001120 <HAL_GPIO_Init>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	10210000 	.word	0x10210000
 80008a4:	40020800 	.word	0x40020800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

while(1){
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x4>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008ee:	2007      	movs	r0, #7
 80008f0:	f000 fbd4 	bl	800109c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a43      	ldr	r2, [pc, #268]	; (8000a2c <HAL_CAN_MspInit+0x12c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d136      	bne.n	8000990 <HAL_CAN_MspInit+0x90>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000922:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <HAL_CAN_MspInit+0x130>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	4a41      	ldr	r2, [pc, #260]	; (8000a30 <HAL_CAN_MspInit+0x130>)
 800092a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800092c:	4b40      	ldr	r3, [pc, #256]	; (8000a30 <HAL_CAN_MspInit+0x130>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10d      	bne.n	8000950 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	4b3e      	ldr	r3, [pc, #248]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a3d      	ldr	r2, [pc, #244]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 800093e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 8000956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000958:	4a36      	ldr	r2, [pc, #216]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 800095a:	f043 0301 	orr.w	r3, r3, #1
 800095e:	6313      	str	r3, [r2, #48]	; 0x30
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 8000962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800096c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800097e:	2309      	movs	r3, #9
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	482b      	ldr	r0, [pc, #172]	; (8000a38 <HAL_CAN_MspInit+0x138>)
 800098a:	f000 fbc9 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800098e:	e048      	b.n	8000a22 <HAL_CAN_MspInit+0x122>
  else if(hcan->Instance==CAN2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <HAL_CAN_MspInit+0x13c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d143      	bne.n	8000a22 <HAL_CAN_MspInit+0x122>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	4a24      	ldr	r2, [pc, #144]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009a8:	6413      	str	r3, [r2, #64]	; 0x40
 80009aa:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <HAL_CAN_MspInit+0x130>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a1c      	ldr	r2, [pc, #112]	; (8000a30 <HAL_CAN_MspInit+0x130>)
 80009be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <HAL_CAN_MspInit+0x130>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10d      	bne.n	80009e4 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_CAN_MspInit+0x134>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a12:	2309      	movs	r3, #9
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <HAL_CAN_MspInit+0x140>)
 8000a1e:	f000 fb7f 	bl	8001120 <HAL_GPIO_Init>
}
 8000a22:	bf00      	nop
 8000a24:	3730      	adds	r7, #48	; 0x30
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40006400 	.word	0x40006400
 8000a30:	20000028 	.word	0x20000028
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40006800 	.word	0x40006800
 8000a40:	40020400 	.word	0x40020400

08000a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_TIM_Base_MspInit+0x48>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d115      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <HAL_TIM_Base_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <HAL_TIM_Base_MspInit+0x4c>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_TIM_Base_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	201e      	movs	r0, #30
 8000a78:	f000 fb1b 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000a7c:	201e      	movs	r0, #30
 8000a7e:	f000 fb34 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40000800 	.word	0x40000800
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	; 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d12b      	bne.n	8000b0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac6:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <HAL_UART_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aee:	230c      	movs	r3, #12
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	2303      	movs	r3, #3
 8000afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afe:	2307      	movs	r3, #7
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <HAL_UART_MspInit+0x8c>)
 8000b0a:	f000 fb09 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 f8a8 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
CANH2transmission(); //for comunication with nvdia tegra -slave
 8000b7c:	f000 f808 	bl	8000b90 <CANH2transmission>

//TODO con una frequenza di 10hz invio sul CANH2 la velocità del veicolo alla nvidia
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <TIM4_IRQHandler+0x14>)
 8000b82:	f001 f9b8 	bl	8001ef6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000002c 	.word	0x2000002c

08000b90 <CANH2transmission>:
void CANH2transmission(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

} //for comunication with nvdia tegra -slave
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <SystemInit+0x28>)
 8000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000baa:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <SystemInit+0x28>)
 8000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SystemInit+0x28>)
 8000bb6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bba:	609a      	str	r2, [r3, #8]
#endif
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bd0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bd2:	e003      	b.n	8000bdc <LoopCopyDataInit>

08000bd4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bd6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bd8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bda:	3104      	adds	r1, #4

08000bdc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000be0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000be2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000be4:	d3f6      	bcc.n	8000bd4 <CopyDataInit>
  ldr  r2, =_sbss
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000be8:	e002      	b.n	8000bf0 <LoopFillZerobss>

08000bea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bec:	f842 3b04 	str.w	r3, [r2], #4

08000bf0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bf2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bf4:	d3f9      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bf6:	f7ff ffd3 	bl	8000ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f002 f901 	bl	8002e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fc81 	bl	8000504 <main>
  bx  lr    
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c08:	08002e98 	.word	0x08002e98
  ldr  r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000c14:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000c18:	20000100 	.word	0x20000100

08000c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC_IRQHandler>
	...

08000c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c24:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <HAL_Init+0x40>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <HAL_Init+0x40>)
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a07      	ldr	r2, [pc, #28]	; (8000c60 <HAL_Init+0x40>)
 8000c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f000 fa27 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f808 	bl	8000c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c54:	f7ff fe2c 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023c00 	.word	0x40023c00

08000c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_InitTick+0x54>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <HAL_InitTick+0x58>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4619      	mov	r1, r3
 8000c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 fa3f 	bl	8001106 <HAL_SYSTICK_Config>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00e      	b.n	8000cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d80a      	bhi.n	8000cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f000 fa07 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <HAL_InitTick+0x5c>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	200000fc 	.word	0x200000fc

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	200000fc 	.word	0x200000fc

08000d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0ed      	b.n	8000ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fdec 	bl	8000900 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0202 	bic.w	r2, r2, #2
 8000d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d38:	f7ff ffd8 	bl	8000cec <HAL_GetTick>
 8000d3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3e:	e012      	b.n	8000d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d40:	f7ff ffd4 	bl	8000cec <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d90b      	bls.n	8000d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0c5      	b.n	8000ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1e5      	bne.n	8000d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d84:	f7ff ffb2 	bl	8000cec <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8a:	e012      	b.n	8000db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d8c:	f7ff ffae 	bl	8000cec <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b0a      	cmp	r3, #10
 8000d98:	d90b      	bls.n	8000db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2205      	movs	r2, #5
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e09f      	b.n	8000ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0e5      	beq.n	8000d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e1b      	ldrb	r3, [r3, #24]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e007      	b.n	8000dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7e5b      	ldrb	r3, [r3, #25]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e9b      	ldrb	r3, [r3, #26]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0220 	orr.w	r2, r2, #32
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0220 	bic.w	r2, r2, #32
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7edb      	ldrb	r3, [r3, #27]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0210 	bic.w	r2, r2, #16
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0210 	orr.w	r2, r2, #16
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7f1b      	ldrb	r3, [r3, #28]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0208 	orr.w	r2, r2, #8
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0208 	bic.w	r2, r2, #8
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7f5b      	ldrb	r3, [r3, #29]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0204 	orr.w	r2, r2, #4
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0204 	bic.w	r2, r2, #4
 8000eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	ea42 0103 	orr.w	r1, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e165      	b.n	8001408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8154 	bne.w	8001402 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d00b      	beq.n	800117a <HAL_GPIO_Init+0x5a>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800116e:	2b11      	cmp	r3, #17
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b12      	cmp	r3, #18
 8001178:	d130      	bne.n	80011dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	2203      	movs	r2, #3
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	68da      	ldr	r2, [r3, #12]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	091b      	lsrs	r3, r3, #4
 80011c6:	f003 0201 	and.w	r2, r3, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b02      	cmp	r3, #2
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0xfc>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b12      	cmp	r3, #18
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80ae 	beq.w	8001402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b5c      	ldr	r3, [pc, #368]	; (800141c <HAL_GPIO_Init+0x2fc>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a5b      	ldr	r2, [pc, #364]	; (800141c <HAL_GPIO_Init+0x2fc>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b59      	ldr	r3, [pc, #356]	; (800141c <HAL_GPIO_Init+0x2fc>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a57      	ldr	r2, [pc, #348]	; (8001420 <HAL_GPIO_Init+0x300>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4e      	ldr	r2, [pc, #312]	; (8001424 <HAL_GPIO_Init+0x304>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x21a>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4d      	ldr	r2, [pc, #308]	; (8001428 <HAL_GPIO_Init+0x308>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x216>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4c      	ldr	r2, [pc, #304]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x212>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4b      	ldr	r2, [pc, #300]	; (8001430 <HAL_GPIO_Init+0x310>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x20e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4a      	ldr	r2, [pc, #296]	; (8001434 <HAL_GPIO_Init+0x314>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x20a>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a49      	ldr	r2, [pc, #292]	; (8001438 <HAL_GPIO_Init+0x318>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x206>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x31c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x202>
 800131e:	2306      	movs	r3, #6
 8001320:	e00c      	b.n	800133c <HAL_GPIO_Init+0x21c>
 8001322:	2307      	movs	r3, #7
 8001324:	e00a      	b.n	800133c <HAL_GPIO_Init+0x21c>
 8001326:	2305      	movs	r3, #5
 8001328:	e008      	b.n	800133c <HAL_GPIO_Init+0x21c>
 800132a:	2304      	movs	r3, #4
 800132c:	e006      	b.n	800133c <HAL_GPIO_Init+0x21c>
 800132e:	2303      	movs	r3, #3
 8001330:	e004      	b.n	800133c <HAL_GPIO_Init+0x21c>
 8001332:	2302      	movs	r3, #2
 8001334:	e002      	b.n	800133c <HAL_GPIO_Init+0x21c>
 8001336:	2301      	movs	r3, #1
 8001338:	e000      	b.n	800133c <HAL_GPIO_Init+0x21c>
 800133a:	2300      	movs	r3, #0
 800133c:	69fa      	ldr	r2, [r7, #28]
 800133e:	f002 0203 	and.w	r2, r2, #3
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	4093      	lsls	r3, r2
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800134c:	4934      	ldr	r1, [pc, #208]	; (8001420 <HAL_GPIO_Init+0x300>)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	089b      	lsrs	r3, r3, #2
 8001352:	3302      	adds	r3, #2
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_GPIO_Init+0x320>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137e:	4a30      	ldr	r2, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x320>)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001384:	4b2e      	ldr	r3, [pc, #184]	; (8001440 <HAL_GPIO_Init+0x320>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a8:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_GPIO_Init+0x320>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b24      	ldr	r3, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x320>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a1b      	ldr	r2, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x320>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_GPIO_Init+0x320>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a10      	ldr	r2, [pc, #64]	; (8001440 <HAL_GPIO_Init+0x320>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3301      	adds	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	2b0f      	cmp	r3, #15
 800140c:	f67f ae96 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001410:	bf00      	nop
 8001412:	3724      	adds	r7, #36	; 0x24
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40021400 	.word	0x40021400
 800143c:	40021800 	.word	0x40021800
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0cc      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	d90c      	bls.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	4b65      	ldr	r3, [pc, #404]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a2:	4b63      	ldr	r3, [pc, #396]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d001      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e0b8      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d020      	beq.n	8001502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014cc:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014e4:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a52      	ldr	r2, [pc, #328]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b50      	ldr	r3, [pc, #320]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	494d      	ldr	r1, [pc, #308]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d044      	beq.n	8001598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d119      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e07f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d003      	beq.n	8001536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001532:	2b03      	cmp	r3, #3
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d109      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e06f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e067      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001556:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f023 0203 	bic.w	r2, r3, #3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4934      	ldr	r1, [pc, #208]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	4313      	orrs	r3, r2
 8001566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001568:	f7ff fbc0 	bl	8000cec <HAL_GetTick>
 800156c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156e:	e00a      	b.n	8001586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001570:	f7ff fbbc 	bl	8000cec <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e04f      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 020c 	and.w	r2, r3, #12
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	429a      	cmp	r2, r3
 8001596:	d1eb      	bne.n	8001570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001598:	4b25      	ldr	r3, [pc, #148]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 030f 	and.w	r3, r3, #15
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d20c      	bcs.n	80015c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e032      	b.n	8001626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d008      	beq.n	80015de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	4916      	ldr	r1, [pc, #88]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d009      	beq.n	80015fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fe:	f000 f855 	bl	80016ac <HAL_RCC_GetSysClockFreq>
 8001602:	4601      	mov	r1, r0
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1c0>)
 8001610:	5cd3      	ldrb	r3, [r2, r3]
 8001612:	fa21 f303 	lsr.w	r3, r1, r3
 8001616:	4a09      	ldr	r2, [pc, #36]	; (800163c <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800161a:	4b09      	ldr	r3, [pc, #36]	; (8001640 <HAL_RCC_ClockConfig+0x1c8>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb20 	bl	8000c64 <HAL_InitTick>

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023c00 	.word	0x40023c00
 8001634:	40023800 	.word	0x40023800
 8001638:	08002e70 	.word	0x08002e70
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004

08001644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_RCC_GetHCLKFreq+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000000 	.word	0x20000000

0800165c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001660:	f7ff fff0 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 8001664:	4601      	mov	r1, r0
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	0a9b      	lsrs	r3, r3, #10
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001678:	4618      	mov	r0, r3
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	08002e80 	.word	0x08002e80

08001684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001688:	f7ff ffdc 	bl	8001644 <HAL_RCC_GetHCLKFreq>
 800168c:	4601      	mov	r1, r0
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	0b5b      	lsrs	r3, r3, #13
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	4a03      	ldr	r2, [pc, #12]	; (80016a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	08002e80 	.word	0x08002e80

080016ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b087      	sub	sp, #28
 80016b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016c6:	4bc6      	ldr	r3, [pc, #792]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	f200 817e 	bhi.w	80019d0 <HAL_RCC_GetSysClockFreq+0x324>
 80016d4:	a201      	add	r2, pc, #4	; (adr r2, 80016dc <HAL_RCC_GetSysClockFreq+0x30>)
 80016d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016da:	bf00      	nop
 80016dc:	08001711 	.word	0x08001711
 80016e0:	080019d1 	.word	0x080019d1
 80016e4:	080019d1 	.word	0x080019d1
 80016e8:	080019d1 	.word	0x080019d1
 80016ec:	08001717 	.word	0x08001717
 80016f0:	080019d1 	.word	0x080019d1
 80016f4:	080019d1 	.word	0x080019d1
 80016f8:	080019d1 	.word	0x080019d1
 80016fc:	0800171d 	.word	0x0800171d
 8001700:	080019d1 	.word	0x080019d1
 8001704:	080019d1 	.word	0x080019d1
 8001708:	080019d1 	.word	0x080019d1
 800170c:	08001879 	.word	0x08001879
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001710:	4bb4      	ldr	r3, [pc, #720]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x338>)
 8001712:	613b      	str	r3, [r7, #16]
       break;
 8001714:	e15f      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001716:	4bb4      	ldr	r3, [pc, #720]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8001718:	613b      	str	r3, [r7, #16]
      break;
 800171a:	e15c      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800171c:	4bb0      	ldr	r3, [pc, #704]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001724:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001726:	4bae      	ldr	r3, [pc, #696]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d04a      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4bab      	ldr	r3, [pc, #684]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	ea03 0501 	and.w	r5, r3, r1
 8001748:	ea04 0602 	and.w	r6, r4, r2
 800174c:	4629      	mov	r1, r5
 800174e:	4632      	mov	r2, r6
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4619      	mov	r1, r3
 8001762:	4622      	mov	r2, r4
 8001764:	1b49      	subs	r1, r1, r5
 8001766:	eb62 0206 	sbc.w	r2, r2, r6
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0194      	lsls	r4, r2, #6
 8001774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	eb64 0402 	sbc.w	r4, r4, r2
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	195b      	adds	r3, r3, r5
 8001796:	eb44 0406 	adc.w	r4, r4, r6
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	0262      	lsls	r2, r4, #9
 80017a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80017a8:	0259      	lsls	r1, r3, #9
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7fe fd22 	bl	8000204 <__aeabi_uldivmod>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	e049      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4b85      	ldr	r3, [pc, #532]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	f04f 0400 	mov.w	r4, #0
 80017d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	ea03 0501 	and.w	r5, r3, r1
 80017de:	ea04 0602 	and.w	r6, r4, r2
 80017e2:	4629      	mov	r1, r5
 80017e4:	4632      	mov	r2, r6
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f04f 0400 	mov.w	r4, #0
 80017ee:	0154      	lsls	r4, r2, #5
 80017f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017f4:	014b      	lsls	r3, r1, #5
 80017f6:	4619      	mov	r1, r3
 80017f8:	4622      	mov	r2, r4
 80017fa:	1b49      	subs	r1, r1, r5
 80017fc:	eb62 0206 	sbc.w	r2, r2, r6
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	f04f 0400 	mov.w	r4, #0
 8001808:	0194      	lsls	r4, r2, #6
 800180a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800180e:	018b      	lsls	r3, r1, #6
 8001810:	1a5b      	subs	r3, r3, r1
 8001812:	eb64 0402 	sbc.w	r4, r4, r2
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	00e2      	lsls	r2, r4, #3
 8001820:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001824:	00d9      	lsls	r1, r3, #3
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	195b      	adds	r3, r3, r5
 800182c:	eb44 0406 	adc.w	r4, r4, r6
 8001830:	f04f 0100 	mov.w	r1, #0
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	02a2      	lsls	r2, r4, #10
 800183a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800183e:	0299      	lsls	r1, r3, #10
 8001840:	460b      	mov	r3, r1
 8001842:	4614      	mov	r4, r2
 8001844:	4618      	mov	r0, r3
 8001846:	4621      	mov	r1, r4
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f04f 0400 	mov.w	r4, #0
 800184e:	461a      	mov	r2, r3
 8001850:	4623      	mov	r3, r4
 8001852:	f7fe fcd7 	bl	8000204 <__aeabi_uldivmod>
 8001856:	4603      	mov	r3, r0
 8001858:	460c      	mov	r4, r1
 800185a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800185c:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	3301      	adds	r3, #1
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	fbb2 f3f3 	udiv	r3, r2, r3
 8001874:	613b      	str	r3, [r7, #16]
      break;
 8001876:	e0ae      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001878:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001880:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001882:	4b57      	ldr	r3, [pc, #348]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d04a      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188e:	4b54      	ldr	r3, [pc, #336]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	f04f 0400 	mov.w	r4, #0
 8001898:	f240 11ff 	movw	r1, #511	; 0x1ff
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	ea03 0501 	and.w	r5, r3, r1
 80018a4:	ea04 0602 	and.w	r6, r4, r2
 80018a8:	4629      	mov	r1, r5
 80018aa:	4632      	mov	r2, r6
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	0154      	lsls	r4, r2, #5
 80018b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ba:	014b      	lsls	r3, r1, #5
 80018bc:	4619      	mov	r1, r3
 80018be:	4622      	mov	r2, r4
 80018c0:	1b49      	subs	r1, r1, r5
 80018c2:	eb62 0206 	sbc.w	r2, r2, r6
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f04f 0400 	mov.w	r4, #0
 80018ce:	0194      	lsls	r4, r2, #6
 80018d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018d4:	018b      	lsls	r3, r1, #6
 80018d6:	1a5b      	subs	r3, r3, r1
 80018d8:	eb64 0402 	sbc.w	r4, r4, r2
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	00e2      	lsls	r2, r4, #3
 80018e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018ea:	00d9      	lsls	r1, r3, #3
 80018ec:	460b      	mov	r3, r1
 80018ee:	4614      	mov	r4, r2
 80018f0:	195b      	adds	r3, r3, r5
 80018f2:	eb44 0406 	adc.w	r4, r4, r6
 80018f6:	f04f 0100 	mov.w	r1, #0
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	0262      	lsls	r2, r4, #9
 8001900:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001904:	0259      	lsls	r1, r3, #9
 8001906:	460b      	mov	r3, r1
 8001908:	4614      	mov	r4, r2
 800190a:	4618      	mov	r0, r3
 800190c:	4621      	mov	r1, r4
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f04f 0400 	mov.w	r4, #0
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	f7fe fc74 	bl	8000204 <__aeabi_uldivmod>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e049      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	099b      	lsrs	r3, r3, #6
 800192a:	f04f 0400 	mov.w	r4, #0
 800192e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	ea03 0501 	and.w	r5, r3, r1
 800193a:	ea04 0602 	and.w	r6, r4, r2
 800193e:	4629      	mov	r1, r5
 8001940:	4632      	mov	r2, r6
 8001942:	f04f 0300 	mov.w	r3, #0
 8001946:	f04f 0400 	mov.w	r4, #0
 800194a:	0154      	lsls	r4, r2, #5
 800194c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001950:	014b      	lsls	r3, r1, #5
 8001952:	4619      	mov	r1, r3
 8001954:	4622      	mov	r2, r4
 8001956:	1b49      	subs	r1, r1, r5
 8001958:	eb62 0206 	sbc.w	r2, r2, r6
 800195c:	f04f 0300 	mov.w	r3, #0
 8001960:	f04f 0400 	mov.w	r4, #0
 8001964:	0194      	lsls	r4, r2, #6
 8001966:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800196a:	018b      	lsls	r3, r1, #6
 800196c:	1a5b      	subs	r3, r3, r1
 800196e:	eb64 0402 	sbc.w	r4, r4, r2
 8001972:	f04f 0100 	mov.w	r1, #0
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	00e2      	lsls	r2, r4, #3
 800197c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001980:	00d9      	lsls	r1, r3, #3
 8001982:	460b      	mov	r3, r1
 8001984:	4614      	mov	r4, r2
 8001986:	195b      	adds	r3, r3, r5
 8001988:	eb44 0406 	adc.w	r4, r4, r6
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	f04f 0200 	mov.w	r2, #0
 8001994:	02a2      	lsls	r2, r4, #10
 8001996:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800199a:	0299      	lsls	r1, r3, #10
 800199c:	460b      	mov	r3, r1
 800199e:	4614      	mov	r4, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	4621      	mov	r1, r4
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f04f 0400 	mov.w	r4, #0
 80019aa:	461a      	mov	r2, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	f7fe fc29 	bl	8000204 <__aeabi_uldivmod>
 80019b2:	4603      	mov	r3, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	0f1b      	lsrs	r3, r3, #28
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	613b      	str	r3, [r7, #16]
      break;
 80019ce:	e002      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x338>)
 80019d2:	613b      	str	r3, [r7, #16]
      break;
 80019d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d6:	693b      	ldr	r3, [r7, #16]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	00f42400 	.word	0x00f42400
 80019e8:	007a1200 	.word	0x007a1200

080019ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8083 	beq.w	8001b0c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a06:	4b95      	ldr	r3, [pc, #596]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d019      	beq.n	8001a46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a12:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d106      	bne.n	8001a2c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a1e:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a2a:	d00c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a2c:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a34:	2b0c      	cmp	r3, #12
 8001a36:	d112      	bne.n	8001a5e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a38:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a44:	d10b      	bne.n	8001a5e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a46:	4b85      	ldr	r3, [pc, #532]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d05b      	beq.n	8001b0a <HAL_RCC_OscConfig+0x11e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d157      	bne.n	8001b0a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e216      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a66:	d106      	bne.n	8001a76 <HAL_RCC_OscConfig+0x8a>
 8001a68:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a7b      	ldr	r2, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	e01d      	b.n	8001ab2 <HAL_RCC_OscConfig+0xc6>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a7e:	d10c      	bne.n	8001a9a <HAL_RCC_OscConfig+0xae>
 8001a80:	4b76      	ldr	r3, [pc, #472]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a75      	ldr	r2, [pc, #468]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b73      	ldr	r3, [pc, #460]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a72      	ldr	r2, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	e00b      	b.n	8001ab2 <HAL_RCC_OscConfig+0xc6>
 8001a9a:	4b70      	ldr	r3, [pc, #448]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6f      	ldr	r2, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	4b6d      	ldr	r3, [pc, #436]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a6c      	ldr	r2, [pc, #432]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d013      	beq.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f917 	bl	8000cec <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ac2:	f7ff f913 	bl	8000cec <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b64      	cmp	r3, #100	; 0x64
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1db      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad4:	4b61      	ldr	r3, [pc, #388]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xd6>
 8001ae0:	e014      	b.n	8001b0c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f903 	bl	8000cec <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aea:	f7ff f8ff 	bl	8000cec <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e1c7      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afc:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0xfe>
 8001b08:	e000      	b.n	8001b0c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d06f      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d017      	beq.n	8001b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b24:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b30:	4b4a      	ldr	r3, [pc, #296]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00b      	beq.n	8001b54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b3c:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b44:	2b0c      	cmp	r3, #12
 8001b46:	d11c      	bne.n	8001b82 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b48:	4b44      	ldr	r3, [pc, #272]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d116      	bne.n	8001b82 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_OscConfig+0x180>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e18f      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691b      	ldr	r3, [r3, #16]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4938      	ldr	r1, [pc, #224]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b80:	e03a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d020      	beq.n	8001bcc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b8a:	4b35      	ldr	r3, [pc, #212]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff f8ac 	bl	8000cec <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff f8a8 	bl	8000cec <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e170      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4925      	ldr	r1, [pc, #148]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	600b      	str	r3, [r1, #0]
 8001bca:	e015      	b.n	8001bf8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f88b 	bl	8000cec <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f887 	bl	8000cec <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e14f      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d037      	beq.n	8001c74 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d016      	beq.n	8001c3a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0c:	4b15      	ldr	r3, [pc, #84]	; (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff f86b 	bl	8000cec <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f867 	bl	8000cec <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e12f      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x22e>
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_RCC_OscConfig+0x278>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c40:	f7ff f854 	bl	8000cec <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c46:	e00f      	b.n	8001c68 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff f850 	bl	8000cec <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d908      	bls.n	8001c68 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e118      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	42470000 	.word	0x42470000
 8001c64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b8a      	ldr	r3, [pc, #552]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e9      	bne.n	8001c48 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 8097 	beq.w	8001db0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b83      	ldr	r3, [pc, #524]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b7f      	ldr	r3, [pc, #508]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a7e      	ldr	r2, [pc, #504]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b7c      	ldr	r3, [pc, #496]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b79      	ldr	r3, [pc, #484]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d118      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f80f 	bl	8000cec <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7ff f80b 	bl	8000cec <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0d3      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b6c      	ldr	r3, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4ac>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x31a>
 8001cf8:	4b66      	ldr	r3, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfc:	4a65      	ldr	r2, [pc, #404]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6713      	str	r3, [r2, #112]	; 0x70
 8001d04:	e01c      	b.n	8001d40 <HAL_RCC_OscConfig+0x354>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x33c>
 8001d0e:	4b61      	ldr	r3, [pc, #388]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d12:	4a60      	ldr	r2, [pc, #384]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1a:	4b5e      	ldr	r3, [pc, #376]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a5d      	ldr	r2, [pc, #372]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x354>
 8001d28:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2c:	4a59      	ldr	r2, [pc, #356]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	; 0x70
 8001d34:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	4a56      	ldr	r2, [pc, #344]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d015      	beq.n	8001d74 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d48:	f7fe ffd0 	bl	8000cec <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d50:	f7fe ffcc 	bl	8000cec <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e092      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d66:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ee      	beq.n	8001d50 <HAL_RCC_OscConfig+0x364>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d74:	f7fe ffba 	bl	8000cec <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ffb6 	bl	8000cec <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e07c      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d92:	4b40      	ldr	r3, [pc, #256]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1ee      	bne.n	8001d7c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d9e:	7dfb      	ldrb	r3, [r7, #23]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	4a3a      	ldr	r2, [pc, #232]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d068      	beq.n	8001e8a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001db8:	4b36      	ldr	r3, [pc, #216]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 030c 	and.w	r3, r3, #12
 8001dc0:	2b08      	cmp	r3, #8
 8001dc2:	d060      	beq.n	8001e86 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d145      	bne.n	8001e58 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7fe ff8b 	bl	8000cec <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe ff87 	bl	8000cec <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e04f      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f0      	bne.n	8001dda <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	019b      	lsls	r3, r3, #6
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	041b      	lsls	r3, r3, #16
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1a:	061b      	lsls	r3, r3, #24
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	071b      	lsls	r3, r3, #28
 8001e24:	491b      	ldr	r1, [pc, #108]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ff5c 	bl	8000cec <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ff58 	bl	8000cec <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e020      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x44c>
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x4b0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7fe ff45 	bl	8000cec <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e66:	f7fe ff41 	bl	8000cec <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e009      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e78:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_RCC_OscConfig+0x4a8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x47a>
 8001e84:	e001      	b.n	8001e8a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42470060 	.word	0x42470060

08001ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e01d      	b.n	8001eee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d106      	bne.n	8001ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe fdbc 	bl	8000a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f9fa 	bl	80022d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d122      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d11b      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f06f 0202 	mvn.w	r2, #2
 8001f22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f9af 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8001f3e:	e005      	b.n	8001f4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f9a1 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9b2 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d122      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d11b      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f06f 0204 	mvn.w	r2, #4
 8001f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f985 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8001f92:	e005      	b.n	8001fa0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f977 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f988 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b08      	cmp	r3, #8
 8001fb2:	d122      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b08      	cmp	r3, #8
 8001fc0:	d11b      	bne.n	8001ffa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0208 	mvn.w	r2, #8
 8001fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f95b 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8001fe6:	e005      	b.n	8001ff4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f94d 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f95e 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b10      	cmp	r3, #16
 8002006:	d122      	bne.n	800204e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b10      	cmp	r3, #16
 8002014:	d11b      	bne.n	800204e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f06f 0210 	mvn.w	r2, #16
 800201e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2208      	movs	r2, #8
 8002024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f931 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 800203a:	e005      	b.n	8002048 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f923 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f934 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d10e      	bne.n	800207a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b01      	cmp	r3, #1
 8002068:	d107      	bne.n	800207a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f06f 0201 	mvn.w	r2, #1
 8002072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8fd 	bl	8002274 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d10e      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002092:	2b80      	cmp	r3, #128	; 0x80
 8002094:	d107      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800209e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fad9 	bl	8002658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b0:	2b40      	cmp	r3, #64	; 0x40
 80020b2:	d10e      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020be:	2b40      	cmp	r3, #64	; 0x40
 80020c0:	d107      	bne.n	80020d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f8f9 	bl	80022c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d10e      	bne.n	80020fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0320 	and.w	r3, r3, #32
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	d107      	bne.n	80020fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0220 	mvn.w	r2, #32
 80020f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 faa3 	bl	8002644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b084      	sub	sp, #16
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_TIM_ConfigClockSource+0x18>
 800211a:	2302      	movs	r3, #2
 800211c:	e0a6      	b.n	800226c <HAL_TIM_ConfigClockSource+0x166>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800213c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002144:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b40      	cmp	r3, #64	; 0x40
 8002154:	d067      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x120>
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d80b      	bhi.n	8002172 <HAL_TIM_ConfigClockSource+0x6c>
 800215a:	2b10      	cmp	r3, #16
 800215c:	d073      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x140>
 800215e:	2b10      	cmp	r3, #16
 8002160:	d802      	bhi.n	8002168 <HAL_TIM_ConfigClockSource+0x62>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06f      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002166:	e078      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002168:	2b20      	cmp	r3, #32
 800216a:	d06c      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x140>
 800216c:	2b30      	cmp	r3, #48	; 0x30
 800216e:	d06a      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002170:	e073      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002172:	2b70      	cmp	r3, #112	; 0x70
 8002174:	d00d      	beq.n	8002192 <HAL_TIM_ConfigClockSource+0x8c>
 8002176:	2b70      	cmp	r3, #112	; 0x70
 8002178:	d804      	bhi.n	8002184 <HAL_TIM_ConfigClockSource+0x7e>
 800217a:	2b50      	cmp	r3, #80	; 0x50
 800217c:	d033      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0xe0>
 800217e:	2b60      	cmp	r3, #96	; 0x60
 8002180:	d041      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002182:	e06a      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002188:	d066      	beq.n	8002258 <HAL_TIM_ConfigClockSource+0x152>
 800218a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800218e:	d017      	beq.n	80021c0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002190:	e063      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f000 f9b3 	bl	800250c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	609a      	str	r2, [r3, #8]
      break;
 80021be:	e04c      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6899      	ldr	r1, [r3, #8]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f000 f99c 	bl	800250c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021e2:	609a      	str	r2, [r3, #8]
      break;
 80021e4:	e039      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f000 f910 	bl	8002418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2150      	movs	r1, #80	; 0x50
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f969 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002204:	e029      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 f92f 	bl	8002476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2160      	movs	r1, #96	; 0x60
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f959 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002224:	e019      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	461a      	mov	r2, r3
 8002234:	f000 f8f0 	bl	8002418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2140      	movs	r1, #64	; 0x40
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f949 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002244:	e009      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	4610      	mov	r0, r2
 8002252:	f000 f940 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 8002256:	e000      	b.n	800225a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002258:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a40      	ldr	r2, [pc, #256]	; (80023ec <TIM_Base_SetConfig+0x114>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d00f      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3d      	ldr	r2, [pc, #244]	; (80023f0 <TIM_Base_SetConfig+0x118>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3c      	ldr	r2, [pc, #240]	; (80023f4 <TIM_Base_SetConfig+0x11c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <TIM_Base_SetConfig+0x120>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a3a      	ldr	r2, [pc, #232]	; (80023fc <TIM_Base_SetConfig+0x124>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2f      	ldr	r2, [pc, #188]	; (80023ec <TIM_Base_SetConfig+0x114>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002338:	d027      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <TIM_Base_SetConfig+0x118>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d023      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2b      	ldr	r2, [pc, #172]	; (80023f4 <TIM_Base_SetConfig+0x11c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <TIM_Base_SetConfig+0x120>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <TIM_Base_SetConfig+0x124>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d017      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a28      	ldr	r2, [pc, #160]	; (8002400 <TIM_Base_SetConfig+0x128>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a27      	ldr	r2, [pc, #156]	; (8002404 <TIM_Base_SetConfig+0x12c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00f      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a26      	ldr	r2, [pc, #152]	; (8002408 <TIM_Base_SetConfig+0x130>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a25      	ldr	r2, [pc, #148]	; (800240c <TIM_Base_SetConfig+0x134>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a24      	ldr	r2, [pc, #144]	; (8002410 <TIM_Base_SetConfig+0x138>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <TIM_Base_SetConfig+0x13c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <TIM_Base_SetConfig+0x114>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_Base_SetConfig+0xf8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <TIM_Base_SetConfig+0x124>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d103      	bne.n	80023d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	615a      	str	r2, [r3, #20]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40010400 	.word	0x40010400
 8002400:	40014000 	.word	0x40014000
 8002404:	40014400 	.word	0x40014400
 8002408:	40014800 	.word	0x40014800
 800240c:	40001800 	.word	0x40001800
 8002410:	40001c00 	.word	0x40001c00
 8002414:	40002000 	.word	0x40002000

08002418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0201 	bic.w	r2, r3, #1
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f023 030a 	bic.w	r3, r3, #10
 8002454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	621a      	str	r2, [r3, #32]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002476:	b480      	push	{r7}
 8002478:	b087      	sub	sp, #28
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f023 0210 	bic.w	r2, r3, #16
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	031b      	lsls	r3, r3, #12
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	621a      	str	r2, [r3, #32]
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f043 0307 	orr.w	r3, r3, #7
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	021a      	lsls	r2, r3, #8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	431a      	orrs	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	4313      	orrs	r3, r2
 8002538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	609a      	str	r2, [r3, #8]
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002560:	2302      	movs	r3, #2
 8002562:	e05a      	b.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a21      	ldr	r2, [pc, #132]	; (8002628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b0:	d01d      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d018      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1b      	ldr	r2, [pc, #108]	; (8002630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d013      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d00e      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a18      	ldr	r2, [pc, #96]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d009      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d004      	beq.n	80025ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a15      	ldr	r2, [pc, #84]	; (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d10c      	bne.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40010000 	.word	0x40010000
 800262c:	40000400 	.word	0x40000400
 8002630:	40000800 	.word	0x40000800
 8002634:	40000c00 	.word	0x40000c00
 8002638:	40010400 	.word	0x40010400
 800263c:	40014000 	.word	0x40014000
 8002640:	40001800 	.word	0x40001800

08002644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e03f      	b.n	80026fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe f9fe 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f829 	bl	8002708 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800274a:	f023 030c 	bic.w	r3, r3, #12
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	68f9      	ldr	r1, [r7, #12]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002776:	f040 818b 	bne.w	8002a90 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4ac1      	ldr	r2, [pc, #772]	; (8002a84 <UART_SetConfig+0x37c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d005      	beq.n	8002790 <UART_SetConfig+0x88>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4abf      	ldr	r2, [pc, #764]	; (8002a88 <UART_SetConfig+0x380>)
 800278a:	4293      	cmp	r3, r2
 800278c:	f040 80bd 	bne.w	800290a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002790:	f7fe ff78 	bl	8001684 <HAL_RCC_GetPCLK2Freq>
 8002794:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	461d      	mov	r5, r3
 800279a:	f04f 0600 	mov.w	r6, #0
 800279e:	46a8      	mov	r8, r5
 80027a0:	46b1      	mov	r9, r6
 80027a2:	eb18 0308 	adds.w	r3, r8, r8
 80027a6:	eb49 0409 	adc.w	r4, r9, r9
 80027aa:	4698      	mov	r8, r3
 80027ac:	46a1      	mov	r9, r4
 80027ae:	eb18 0805 	adds.w	r8, r8, r5
 80027b2:	eb49 0906 	adc.w	r9, r9, r6
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80027c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80027c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80027ca:	4688      	mov	r8, r1
 80027cc:	4691      	mov	r9, r2
 80027ce:	eb18 0005 	adds.w	r0, r8, r5
 80027d2:	eb49 0106 	adc.w	r1, r9, r6
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	461d      	mov	r5, r3
 80027dc:	f04f 0600 	mov.w	r6, #0
 80027e0:	196b      	adds	r3, r5, r5
 80027e2:	eb46 0406 	adc.w	r4, r6, r6
 80027e6:	461a      	mov	r2, r3
 80027e8:	4623      	mov	r3, r4
 80027ea:	f7fd fd0b 	bl	8000204 <__aeabi_uldivmod>
 80027ee:	4603      	mov	r3, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	461a      	mov	r2, r3
 80027f4:	4ba5      	ldr	r3, [pc, #660]	; (8002a8c <UART_SetConfig+0x384>)
 80027f6:	fba3 2302 	umull	r2, r3, r3, r2
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	461d      	mov	r5, r3
 8002804:	f04f 0600 	mov.w	r6, #0
 8002808:	46a9      	mov	r9, r5
 800280a:	46b2      	mov	sl, r6
 800280c:	eb19 0309 	adds.w	r3, r9, r9
 8002810:	eb4a 040a 	adc.w	r4, sl, sl
 8002814:	4699      	mov	r9, r3
 8002816:	46a2      	mov	sl, r4
 8002818:	eb19 0905 	adds.w	r9, r9, r5
 800281c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800282c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002830:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002834:	4689      	mov	r9, r1
 8002836:	4692      	mov	sl, r2
 8002838:	eb19 0005 	adds.w	r0, r9, r5
 800283c:	eb4a 0106 	adc.w	r1, sl, r6
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	461d      	mov	r5, r3
 8002846:	f04f 0600 	mov.w	r6, #0
 800284a:	196b      	adds	r3, r5, r5
 800284c:	eb46 0406 	adc.w	r4, r6, r6
 8002850:	461a      	mov	r2, r3
 8002852:	4623      	mov	r3, r4
 8002854:	f7fd fcd6 	bl	8000204 <__aeabi_uldivmod>
 8002858:	4603      	mov	r3, r0
 800285a:	460c      	mov	r4, r1
 800285c:	461a      	mov	r2, r3
 800285e:	4b8b      	ldr	r3, [pc, #556]	; (8002a8c <UART_SetConfig+0x384>)
 8002860:	fba3 1302 	umull	r1, r3, r3, r2
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	2164      	movs	r1, #100	; 0x64
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	3332      	adds	r3, #50	; 0x32
 8002872:	4a86      	ldr	r2, [pc, #536]	; (8002a8c <UART_SetConfig+0x384>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002880:	4498      	add	r8, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	461d      	mov	r5, r3
 8002886:	f04f 0600 	mov.w	r6, #0
 800288a:	46a9      	mov	r9, r5
 800288c:	46b2      	mov	sl, r6
 800288e:	eb19 0309 	adds.w	r3, r9, r9
 8002892:	eb4a 040a 	adc.w	r4, sl, sl
 8002896:	4699      	mov	r9, r3
 8002898:	46a2      	mov	sl, r4
 800289a:	eb19 0905 	adds.w	r9, r9, r5
 800289e:	eb4a 0a06 	adc.w	sl, sl, r6
 80028a2:	f04f 0100 	mov.w	r1, #0
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028b6:	4689      	mov	r9, r1
 80028b8:	4692      	mov	sl, r2
 80028ba:	eb19 0005 	adds.w	r0, r9, r5
 80028be:	eb4a 0106 	adc.w	r1, sl, r6
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	461d      	mov	r5, r3
 80028c8:	f04f 0600 	mov.w	r6, #0
 80028cc:	196b      	adds	r3, r5, r5
 80028ce:	eb46 0406 	adc.w	r4, r6, r6
 80028d2:	461a      	mov	r2, r3
 80028d4:	4623      	mov	r3, r4
 80028d6:	f7fd fc95 	bl	8000204 <__aeabi_uldivmod>
 80028da:	4603      	mov	r3, r0
 80028dc:	460c      	mov	r4, r1
 80028de:	461a      	mov	r2, r3
 80028e0:	4b6a      	ldr	r3, [pc, #424]	; (8002a8c <UART_SetConfig+0x384>)
 80028e2:	fba3 1302 	umull	r1, r3, r3, r2
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2164      	movs	r1, #100	; 0x64
 80028ea:	fb01 f303 	mul.w	r3, r1, r3
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	4a65      	ldr	r2, [pc, #404]	; (8002a8c <UART_SetConfig+0x384>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	f003 0207 	and.w	r2, r3, #7
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4442      	add	r2, r8
 8002906:	609a      	str	r2, [r3, #8]
 8002908:	e26f      	b.n	8002dea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290a:	f7fe fea7 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 800290e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	461d      	mov	r5, r3
 8002914:	f04f 0600 	mov.w	r6, #0
 8002918:	46a8      	mov	r8, r5
 800291a:	46b1      	mov	r9, r6
 800291c:	eb18 0308 	adds.w	r3, r8, r8
 8002920:	eb49 0409 	adc.w	r4, r9, r9
 8002924:	4698      	mov	r8, r3
 8002926:	46a1      	mov	r9, r4
 8002928:	eb18 0805 	adds.w	r8, r8, r5
 800292c:	eb49 0906 	adc.w	r9, r9, r6
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800293c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002940:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002944:	4688      	mov	r8, r1
 8002946:	4691      	mov	r9, r2
 8002948:	eb18 0005 	adds.w	r0, r8, r5
 800294c:	eb49 0106 	adc.w	r1, r9, r6
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	461d      	mov	r5, r3
 8002956:	f04f 0600 	mov.w	r6, #0
 800295a:	196b      	adds	r3, r5, r5
 800295c:	eb46 0406 	adc.w	r4, r6, r6
 8002960:	461a      	mov	r2, r3
 8002962:	4623      	mov	r3, r4
 8002964:	f7fd fc4e 	bl	8000204 <__aeabi_uldivmod>
 8002968:	4603      	mov	r3, r0
 800296a:	460c      	mov	r4, r1
 800296c:	461a      	mov	r2, r3
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <UART_SetConfig+0x384>)
 8002970:	fba3 2302 	umull	r2, r3, r3, r2
 8002974:	095b      	lsrs	r3, r3, #5
 8002976:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	461d      	mov	r5, r3
 800297e:	f04f 0600 	mov.w	r6, #0
 8002982:	46a9      	mov	r9, r5
 8002984:	46b2      	mov	sl, r6
 8002986:	eb19 0309 	adds.w	r3, r9, r9
 800298a:	eb4a 040a 	adc.w	r4, sl, sl
 800298e:	4699      	mov	r9, r3
 8002990:	46a2      	mov	sl, r4
 8002992:	eb19 0905 	adds.w	r9, r9, r5
 8002996:	eb4a 0a06 	adc.w	sl, sl, r6
 800299a:	f04f 0100 	mov.w	r1, #0
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029ae:	4689      	mov	r9, r1
 80029b0:	4692      	mov	sl, r2
 80029b2:	eb19 0005 	adds.w	r0, r9, r5
 80029b6:	eb4a 0106 	adc.w	r1, sl, r6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	461d      	mov	r5, r3
 80029c0:	f04f 0600 	mov.w	r6, #0
 80029c4:	196b      	adds	r3, r5, r5
 80029c6:	eb46 0406 	adc.w	r4, r6, r6
 80029ca:	461a      	mov	r2, r3
 80029cc:	4623      	mov	r3, r4
 80029ce:	f7fd fc19 	bl	8000204 <__aeabi_uldivmod>
 80029d2:	4603      	mov	r3, r0
 80029d4:	460c      	mov	r4, r1
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b2c      	ldr	r3, [pc, #176]	; (8002a8c <UART_SetConfig+0x384>)
 80029da:	fba3 1302 	umull	r1, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2164      	movs	r1, #100	; 0x64
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	3332      	adds	r3, #50	; 0x32
 80029ec:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <UART_SetConfig+0x384>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029fa:	4498      	add	r8, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	461d      	mov	r5, r3
 8002a00:	f04f 0600 	mov.w	r6, #0
 8002a04:	46a9      	mov	r9, r5
 8002a06:	46b2      	mov	sl, r6
 8002a08:	eb19 0309 	adds.w	r3, r9, r9
 8002a0c:	eb4a 040a 	adc.w	r4, sl, sl
 8002a10:	4699      	mov	r9, r3
 8002a12:	46a2      	mov	sl, r4
 8002a14:	eb19 0905 	adds.w	r9, r9, r5
 8002a18:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a1c:	f04f 0100 	mov.w	r1, #0
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a28:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a2c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a30:	4689      	mov	r9, r1
 8002a32:	4692      	mov	sl, r2
 8002a34:	eb19 0005 	adds.w	r0, r9, r5
 8002a38:	eb4a 0106 	adc.w	r1, sl, r6
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	461d      	mov	r5, r3
 8002a42:	f04f 0600 	mov.w	r6, #0
 8002a46:	196b      	adds	r3, r5, r5
 8002a48:	eb46 0406 	adc.w	r4, r6, r6
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	f7fd fbd8 	bl	8000204 <__aeabi_uldivmod>
 8002a54:	4603      	mov	r3, r0
 8002a56:	460c      	mov	r4, r1
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <UART_SetConfig+0x384>)
 8002a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	2164      	movs	r1, #100	; 0x64
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	3332      	adds	r3, #50	; 0x32
 8002a6e:	4a07      	ldr	r2, [pc, #28]	; (8002a8c <UART_SetConfig+0x384>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4442      	add	r2, r8
 8002a80:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a82:	e1b2      	b.n	8002dea <UART_SetConfig+0x6e2>
 8002a84:	40011000 	.word	0x40011000
 8002a88:	40011400 	.word	0x40011400
 8002a8c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4ad7      	ldr	r2, [pc, #860]	; (8002df4 <UART_SetConfig+0x6ec>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d005      	beq.n	8002aa6 <UART_SetConfig+0x39e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4ad6      	ldr	r2, [pc, #856]	; (8002df8 <UART_SetConfig+0x6f0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	f040 80d1 	bne.w	8002c48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002aa6:	f7fe fded 	bl	8001684 <HAL_RCC_GetPCLK2Freq>
 8002aaa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	469a      	mov	sl, r3
 8002ab0:	f04f 0b00 	mov.w	fp, #0
 8002ab4:	46d0      	mov	r8, sl
 8002ab6:	46d9      	mov	r9, fp
 8002ab8:	eb18 0308 	adds.w	r3, r8, r8
 8002abc:	eb49 0409 	adc.w	r4, r9, r9
 8002ac0:	4698      	mov	r8, r3
 8002ac2:	46a1      	mov	r9, r4
 8002ac4:	eb18 080a 	adds.w	r8, r8, sl
 8002ac8:	eb49 090b 	adc.w	r9, r9, fp
 8002acc:	f04f 0100 	mov.w	r1, #0
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ad8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002adc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ae0:	4688      	mov	r8, r1
 8002ae2:	4691      	mov	r9, r2
 8002ae4:	eb1a 0508 	adds.w	r5, sl, r8
 8002ae8:	eb4b 0609 	adc.w	r6, fp, r9
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4619      	mov	r1, r3
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	f04f 0400 	mov.w	r4, #0
 8002afe:	0094      	lsls	r4, r2, #2
 8002b00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b04:	008b      	lsls	r3, r1, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	4623      	mov	r3, r4
 8002b0a:	4628      	mov	r0, r5
 8002b0c:	4631      	mov	r1, r6
 8002b0e:	f7fd fb79 	bl	8000204 <__aeabi_uldivmod>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	461a      	mov	r2, r3
 8002b18:	4bb8      	ldr	r3, [pc, #736]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002b1a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b1e:	095b      	lsrs	r3, r3, #5
 8002b20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	469b      	mov	fp, r3
 8002b28:	f04f 0c00 	mov.w	ip, #0
 8002b2c:	46d9      	mov	r9, fp
 8002b2e:	46e2      	mov	sl, ip
 8002b30:	eb19 0309 	adds.w	r3, r9, r9
 8002b34:	eb4a 040a 	adc.w	r4, sl, sl
 8002b38:	4699      	mov	r9, r3
 8002b3a:	46a2      	mov	sl, r4
 8002b3c:	eb19 090b 	adds.w	r9, r9, fp
 8002b40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b58:	4689      	mov	r9, r1
 8002b5a:	4692      	mov	sl, r2
 8002b5c:	eb1b 0509 	adds.w	r5, fp, r9
 8002b60:	eb4c 060a 	adc.w	r6, ip, sl
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	f04f 0400 	mov.w	r4, #0
 8002b76:	0094      	lsls	r4, r2, #2
 8002b78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b7c:	008b      	lsls	r3, r1, #2
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4623      	mov	r3, r4
 8002b82:	4628      	mov	r0, r5
 8002b84:	4631      	mov	r1, r6
 8002b86:	f7fd fb3d 	bl	8000204 <__aeabi_uldivmod>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b9a      	ldr	r3, [pc, #616]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002b92:	fba3 1302 	umull	r1, r3, r3, r2
 8002b96:	095b      	lsrs	r3, r3, #5
 8002b98:	2164      	movs	r1, #100	; 0x64
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	4a95      	ldr	r2, [pc, #596]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bb0:	4498      	add	r8, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	469b      	mov	fp, r3
 8002bb6:	f04f 0c00 	mov.w	ip, #0
 8002bba:	46d9      	mov	r9, fp
 8002bbc:	46e2      	mov	sl, ip
 8002bbe:	eb19 0309 	adds.w	r3, r9, r9
 8002bc2:	eb4a 040a 	adc.w	r4, sl, sl
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	46a2      	mov	sl, r4
 8002bca:	eb19 090b 	adds.w	r9, r9, fp
 8002bce:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002bd2:	f04f 0100 	mov.w	r1, #0
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bde:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002be2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002be6:	4689      	mov	r9, r1
 8002be8:	4692      	mov	sl, r2
 8002bea:	eb1b 0509 	adds.w	r5, fp, r9
 8002bee:	eb4c 060a 	adc.w	r6, ip, sl
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	0094      	lsls	r4, r2, #2
 8002c06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c0a:	008b      	lsls	r3, r1, #2
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4623      	mov	r3, r4
 8002c10:	4628      	mov	r0, r5
 8002c12:	4631      	mov	r1, r6
 8002c14:	f7fd faf6 	bl	8000204 <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002c20:	fba3 1302 	umull	r1, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2164      	movs	r1, #100	; 0x64
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a72      	ldr	r2, [pc, #456]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4442      	add	r2, r8
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e0d0      	b.n	8002dea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c48:	f7fe fd08 	bl	800165c <HAL_RCC_GetPCLK1Freq>
 8002c4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	469a      	mov	sl, r3
 8002c52:	f04f 0b00 	mov.w	fp, #0
 8002c56:	46d0      	mov	r8, sl
 8002c58:	46d9      	mov	r9, fp
 8002c5a:	eb18 0308 	adds.w	r3, r8, r8
 8002c5e:	eb49 0409 	adc.w	r4, r9, r9
 8002c62:	4698      	mov	r8, r3
 8002c64:	46a1      	mov	r9, r4
 8002c66:	eb18 080a 	adds.w	r8, r8, sl
 8002c6a:	eb49 090b 	adc.w	r9, r9, fp
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c82:	4688      	mov	r8, r1
 8002c84:	4691      	mov	r9, r2
 8002c86:	eb1a 0508 	adds.w	r5, sl, r8
 8002c8a:	eb4b 0609 	adc.w	r6, fp, r9
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	f04f 0400 	mov.w	r4, #0
 8002ca0:	0094      	lsls	r4, r2, #2
 8002ca2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ca6:	008b      	lsls	r3, r1, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4623      	mov	r3, r4
 8002cac:	4628      	mov	r0, r5
 8002cae:	4631      	mov	r1, r6
 8002cb0:	f7fd faa8 	bl	8000204 <__aeabi_uldivmod>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	469b      	mov	fp, r3
 8002cca:	f04f 0c00 	mov.w	ip, #0
 8002cce:	46d9      	mov	r9, fp
 8002cd0:	46e2      	mov	sl, ip
 8002cd2:	eb19 0309 	adds.w	r3, r9, r9
 8002cd6:	eb4a 040a 	adc.w	r4, sl, sl
 8002cda:	4699      	mov	r9, r3
 8002cdc:	46a2      	mov	sl, r4
 8002cde:	eb19 090b 	adds.w	r9, r9, fp
 8002ce2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cf2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cf6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cfa:	4689      	mov	r9, r1
 8002cfc:	4692      	mov	sl, r2
 8002cfe:	eb1b 0509 	adds.w	r5, fp, r9
 8002d02:	eb4c 060a 	adc.w	r6, ip, sl
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	f04f 0400 	mov.w	r4, #0
 8002d18:	0094      	lsls	r4, r2, #2
 8002d1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d1e:	008b      	lsls	r3, r1, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	4628      	mov	r0, r5
 8002d26:	4631      	mov	r1, r6
 8002d28:	f7fd fa6c 	bl	8000204 <__aeabi_uldivmod>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	461a      	mov	r2, r3
 8002d32:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002d34:	fba3 1302 	umull	r1, r3, r3, r2
 8002d38:	095b      	lsrs	r3, r3, #5
 8002d3a:	2164      	movs	r1, #100	; 0x64
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	3332      	adds	r3, #50	; 0x32
 8002d46:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	095b      	lsrs	r3, r3, #5
 8002d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d52:	4498      	add	r8, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	469b      	mov	fp, r3
 8002d58:	f04f 0c00 	mov.w	ip, #0
 8002d5c:	46d9      	mov	r9, fp
 8002d5e:	46e2      	mov	sl, ip
 8002d60:	eb19 0309 	adds.w	r3, r9, r9
 8002d64:	eb4a 040a 	adc.w	r4, sl, sl
 8002d68:	4699      	mov	r9, r3
 8002d6a:	46a2      	mov	sl, r4
 8002d6c:	eb19 090b 	adds.w	r9, r9, fp
 8002d70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d88:	4689      	mov	r9, r1
 8002d8a:	4692      	mov	sl, r2
 8002d8c:	eb1b 0509 	adds.w	r5, fp, r9
 8002d90:	eb4c 060a 	adc.w	r6, ip, sl
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f04f 0400 	mov.w	r4, #0
 8002da6:	0094      	lsls	r4, r2, #2
 8002da8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dac:	008b      	lsls	r3, r1, #2
 8002dae:	461a      	mov	r2, r3
 8002db0:	4623      	mov	r3, r4
 8002db2:	4628      	mov	r0, r5
 8002db4:	4631      	mov	r1, r6
 8002db6:	f7fd fa25 	bl	8000204 <__aeabi_uldivmod>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2164      	movs	r1, #100	; 0x64
 8002dca:	fb01 f303 	mul.w	r3, r1, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <UART_SetConfig+0x6f4>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4442      	add	r2, r8
 8002de6:	609a      	str	r2, [r3, #8]
}
 8002de8:	e7ff      	b.n	8002dea <UART_SetConfig+0x6e2>
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40011400 	.word	0x40011400
 8002dfc:	51eb851f 	.word	0x51eb851f

08002e00 <__libc_init_array>:
 8002e00:	b570      	push	{r4, r5, r6, lr}
 8002e02:	4e0d      	ldr	r6, [pc, #52]	; (8002e38 <__libc_init_array+0x38>)
 8002e04:	4c0d      	ldr	r4, [pc, #52]	; (8002e3c <__libc_init_array+0x3c>)
 8002e06:	1ba4      	subs	r4, r4, r6
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	2500      	movs	r5, #0
 8002e0c:	42a5      	cmp	r5, r4
 8002e0e:	d109      	bne.n	8002e24 <__libc_init_array+0x24>
 8002e10:	4e0b      	ldr	r6, [pc, #44]	; (8002e40 <__libc_init_array+0x40>)
 8002e12:	4c0c      	ldr	r4, [pc, #48]	; (8002e44 <__libc_init_array+0x44>)
 8002e14:	f000 f820 	bl	8002e58 <_init>
 8002e18:	1ba4      	subs	r4, r4, r6
 8002e1a:	10a4      	asrs	r4, r4, #2
 8002e1c:	2500      	movs	r5, #0
 8002e1e:	42a5      	cmp	r5, r4
 8002e20:	d105      	bne.n	8002e2e <__libc_init_array+0x2e>
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e28:	4798      	blx	r3
 8002e2a:	3501      	adds	r5, #1
 8002e2c:	e7ee      	b.n	8002e0c <__libc_init_array+0xc>
 8002e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e32:	4798      	blx	r3
 8002e34:	3501      	adds	r5, #1
 8002e36:	e7f2      	b.n	8002e1e <__libc_init_array+0x1e>
 8002e38:	08002e90 	.word	0x08002e90
 8002e3c:	08002e90 	.word	0x08002e90
 8002e40:	08002e90 	.word	0x08002e90
 8002e44:	08002e94 	.word	0x08002e94

08002e48 <memset>:
 8002e48:	4402      	add	r2, r0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <memset+0xa>
 8002e50:	4770      	bx	lr
 8002e52:	f803 1b01 	strb.w	r1, [r3], #1
 8002e56:	e7f9      	b.n	8002e4c <memset+0x4>

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr
